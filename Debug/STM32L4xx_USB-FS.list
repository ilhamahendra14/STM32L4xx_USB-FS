
STM32L4xx_USB-FS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009620  08009620  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009620  08009620  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009620  08009620  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  00019620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  00019624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f4  200001f4  0800981c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e8  0800981c  000213e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b7f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303f  00000000  00000000  00030da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00033de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00034c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023463  00000000  00000000  000358b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001180c  00000000  00000000  00058d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c26fa  00000000  00000000  0006a51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012cc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  0012cc6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094d8 	.word	0x080094d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	080094d8 	.word	0x080094d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa0d 	bl	8000692 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f810 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f872 	bl	8000364 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000280:	f007 fbba 	bl	80079f8 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS((uint8_t*)&"Hello There!!!\n", strlen("Hello There!!!\n"));
 8000284:	210f      	movs	r1, #15
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <main+0x28>)
 8000288:	f007 fc76 	bl	8007b78 <CDC_Transmit_FS>
	  HAL_Delay(500);
 800028c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000290:	f000 fa74 	bl	800077c <HAL_Delay>
	  CDC_Transmit_FS((uint8_t*)&"Hello There!!!\n", strlen("Hello There!!!\n"));
 8000294:	e7f6      	b.n	8000284 <main+0x14>
 8000296:	bf00      	nop
 8000298:	080094f0 	.word	0x080094f0

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b096      	sub	sp, #88	; 0x58
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	2244      	movs	r2, #68	; 0x44
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f008 f97e 	bl	80085ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	463b      	mov	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002c2:	f002 fabd 	bl	8002840 <HAL_PWREx_ControlVoltageScaling>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002cc:	f000 f8a4 	bl	8000418 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002d0:	f002 fa98 	bl	8002804 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002d4:	4b22      	ldr	r3, [pc, #136]	; (8000360 <SystemClock_Config+0xc4>)
 80002d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002da:	4a21      	ldr	r2, [pc, #132]	; (8000360 <SystemClock_Config+0xc4>)
 80002dc:	f023 0318 	bic.w	r3, r3, #24
 80002e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80002e4:	2334      	movs	r3, #52	; 0x34
 80002e6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002f8:	2360      	movs	r3, #96	; 0x60
 80002fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002fc:	2302      	movs	r3, #2
 80002fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000300:	2301      	movs	r3, #1
 8000302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000304:	2301      	movs	r3, #1
 8000306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000308:	2328      	movs	r3, #40	; 0x28
 800030a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800030c:	2307      	movs	r3, #7
 800030e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000310:	2302      	movs	r3, #2
 8000312:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000314:	2302      	movs	r3, #2
 8000316:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0314 	add.w	r3, r7, #20
 800031c:	4618      	mov	r0, r3
 800031e:	f002 faf5 	bl	800290c <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000328:	f000 f876 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2303      	movs	r3, #3
 8000332:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	2104      	movs	r1, #4
 8000344:	4618      	mov	r0, r3
 8000346:	f002 fef5 	bl	8003134 <HAL_RCC_ClockConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000350:	f000 f862 	bl	8000418 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000354:	f003 fad0 	bl	80038f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000358:	bf00      	nop
 800035a:	3758      	adds	r7, #88	; 0x58
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40021000 	.word	0x40021000

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_GPIO_Init+0xb0>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	4a25      	ldr	r2, [pc, #148]	; (8000414 <MX_GPIO_Init+0xb0>)
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000386:	4b23      	ldr	r3, [pc, #140]	; (8000414 <MX_GPIO_Init+0xb0>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	f003 0304 	and.w	r3, r3, #4
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b20      	ldr	r3, [pc, #128]	; (8000414 <MX_GPIO_Init+0xb0>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	4a1f      	ldr	r2, [pc, #124]	; (8000414 <MX_GPIO_Init+0xb0>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800039e:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_GPIO_Init+0xb0>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_GPIO_Init+0xb0>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a19      	ldr	r2, [pc, #100]	; (8000414 <MX_GPIO_Init+0xb0>)
 80003b0:	f043 0302 	orr.w	r3, r3, #2
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_GPIO_Init+0xb0>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0302 	and.w	r3, r3, #2
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003cc:	f000 fc76 	bl	8000cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80003d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4619      	mov	r1, r3
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f000 fafc 	bl	80009e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BootStat_Pin */
  GPIO_InitStruct.Pin = BootStat_Pin;
 80003f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f6:	2300      	movs	r3, #0
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fa:	2301      	movs	r3, #1
 80003fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BootStat_GPIO_Port, &GPIO_InitStruct);
 80003fe:	f107 030c 	add.w	r3, r7, #12
 8000402:	4619      	mov	r1, r3
 8000404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000408:	f000 faee 	bl	80009e8 <HAL_GPIO_Init>

}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6613      	str	r3, [r2, #96]	; 0x60
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	6593      	str	r3, [r2, #88]	; 0x58
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <NMI_Handler+0x4>

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0x4>

08000478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <MemManage_Handler+0x4>

0800047e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000482:	e7fe      	b.n	8000482 <BusFault_Handler+0x4>

08000484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <UsageFault_Handler+0x4>

0800048a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b8:	f000 f940 	bl	800073c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <USB_IRQHandler+0x10>)
 80004c6:	f000 fd4a 	bl	8000f5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000ebc 	.word	0x20000ebc

080004d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e00a      	b.n	80004fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004e6:	f3af 8000 	nop.w
 80004ea:	4601      	mov	r1, r0
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	b2ca      	uxtb	r2, r1
 80004f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf0      	blt.n	80004e6 <_read+0x12>
	}

return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af00      	add	r7, sp, #0
 8000514:	60f8      	str	r0, [r7, #12]
 8000516:	60b9      	str	r1, [r7, #8]
 8000518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	e009      	b.n	8000534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	3301      	adds	r3, #1
 8000532:	617b      	str	r3, [r7, #20]
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	429a      	cmp	r2, r3
 800053a:	dbf1      	blt.n	8000520 <_write+0x12>
	}
	return len;
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3718      	adds	r7, #24
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <_close>:

int _close(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
	return -1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056e:	605a      	str	r2, [r3, #4]
	return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <_isatty>:

int _isatty(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
	return 1;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	return 0;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	; (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f007 ffba 	bl	8008558 <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20010000 	.word	0x20010000
 8000610:	00000400 	.word	0x00000400
 8000614:	20000210 	.word	0x20000210
 8000618:	200013e8 	.word	0x200013e8

0800061c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <SystemInit+0x20>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <SystemInit+0x20>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000678 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff ffea 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <LoopForever+0x6>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <LoopForever+0xe>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <LoopForever+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f007 ff79 	bl	8008564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000672:	f7ff fdfd 	bl	8000270 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000678:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000684:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8000688:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800068c:	200013e8 	.word	0x200013e8

08000690 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_IRQHandler>

08000692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f961 	bl	8000964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f80e 	bl	80006c4 <HAL_InitTick>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e001      	b.n	80006b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006b4:	f7ff feb6 	bl	8000424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <HAL_InitTick+0x6c>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d023      	beq.n	8000720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <HAL_InitTick+0x70>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <HAL_InitTick+0x6c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f96d 	bl	80009ce <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10f      	bne.n	800071a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d809      	bhi.n	8000714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f937 	bl	800097a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_InitTick+0x74>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e007      	b.n	8000724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
 8000718:	e004      	b.n	8000724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e001      	b.n	8000724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008
 8000734:	20000000 	.word	0x20000000
 8000738:	20000004 	.word	0x20000004

0800073c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x20>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_IncTick+0x24>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a04      	ldr	r2, [pc, #16]	; (8000760 <HAL_IncTick+0x24>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000008 	.word	0x20000008
 8000760:	20000214 	.word	0x20000214

08000764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return uwTick;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_GetTick+0x14>)
 800076a:	681b      	ldr	r3, [r3, #0]
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	20000214 	.word	0x20000214

0800077c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000784:	f7ff ffee 	bl	8000764 <HAL_GetTick>
 8000788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d005      	beq.n	80007a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_Delay+0x44>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	4413      	add	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007a2:	bf00      	nop
 80007a4:	f7ff ffde 	bl	8000764 <HAL_GetTick>
 80007a8:	4602      	mov	r2, r0
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d8f7      	bhi.n	80007a4 <HAL_Delay+0x28>
  {
  }
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008

080007c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007e0:	4013      	ands	r3, r2
 80007e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007f6:	4a04      	ldr	r2, [pc, #16]	; (8000808 <__NVIC_SetPriorityGrouping+0x44>)
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	60d3      	str	r3, [r2, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <__NVIC_GetPriorityGrouping+0x18>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	f003 0307 	and.w	r3, r3, #7
}
 800081a:	4618      	mov	r0, r3
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000836:	2b00      	cmp	r3, #0
 8000838:	db0b      	blt.n	8000852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 021f 	and.w	r2, r3, #31
 8000840:	4907      	ldr	r1, [pc, #28]	; (8000860 <__NVIC_EnableIRQ+0x38>)
 8000842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000846:	095b      	lsrs	r3, r3, #5
 8000848:	2001      	movs	r0, #1
 800084a:	fa00 f202 	lsl.w	r2, r0, r2
 800084e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000930:	d301      	bcc.n	8000936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000932:	2301      	movs	r3, #1
 8000934:	e00f      	b.n	8000956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000936:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <SysTick_Config+0x40>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093e:	210f      	movs	r1, #15
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f7ff ff8e 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <SysTick_Config+0x40>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SysTick_Config+0x40>)
 8000950:	2207      	movs	r2, #7
 8000952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	e000e010 	.word	0xe000e010

08000964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff29 	bl	80007c4 <__NVIC_SetPriorityGrouping>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff3e 	bl	800080c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff8e 	bl	80008b8 <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5d 	bl	8000864 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	4603      	mov	r3, r0
 80009ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff31 	bl	8000828 <__NVIC_EnableIRQ>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ffa2 	bl	8000920 <SysTick_Config>
 80009dc:	4603      	mov	r3, r0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f6:	e148      	b.n	8000c8a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2101      	movs	r1, #1
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	fa01 f303 	lsl.w	r3, r1, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 813a 	beq.w	8000c84 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d005      	beq.n	8000a28 <HAL_GPIO_Init+0x40>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d130      	bne.n	8000a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	2203      	movs	r2, #3
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a5e:	2201      	movs	r2, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	091b      	lsrs	r3, r3, #4
 8000a74:	f003 0201 	and.w	r2, r3, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d017      	beq.n	8000ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d123      	bne.n	8000b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	220f      	movs	r2, #15
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f003 0307 	and.w	r3, r3, #7
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	08da      	lsrs	r2, r3, #3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3208      	adds	r2, #8
 8000b14:	6939      	ldr	r1, [r7, #16]
 8000b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	2203      	movs	r2, #3
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0203 	and.w	r2, r3, #3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8094 	beq.w	8000c84 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5c:	4b52      	ldr	r3, [pc, #328]	; (8000ca8 <HAL_GPIO_Init+0x2c0>)
 8000b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b60:	4a51      	ldr	r2, [pc, #324]	; (8000ca8 <HAL_GPIO_Init+0x2c0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6613      	str	r3, [r2, #96]	; 0x60
 8000b68:	4b4f      	ldr	r3, [pc, #316]	; (8000ca8 <HAL_GPIO_Init+0x2c0>)
 8000b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b74:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <HAL_GPIO_Init+0x2c4>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b9e:	d00d      	beq.n	8000bbc <HAL_GPIO_Init+0x1d4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a43      	ldr	r2, [pc, #268]	; (8000cb0 <HAL_GPIO_Init+0x2c8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d007      	beq.n	8000bb8 <HAL_GPIO_Init+0x1d0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a42      	ldr	r2, [pc, #264]	; (8000cb4 <HAL_GPIO_Init+0x2cc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d101      	bne.n	8000bb4 <HAL_GPIO_Init+0x1cc>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e004      	b.n	8000bbe <HAL_GPIO_Init+0x1d6>
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x1d6>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <HAL_GPIO_Init+0x1d6>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	f002 0203 	and.w	r2, r2, #3
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	4093      	lsls	r3, r2
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bce:	4937      	ldr	r1, [pc, #220]	; (8000cac <HAL_GPIO_Init+0x2c4>)
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c00:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c54:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	43db      	mvns	r3, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_GPIO_Init+0x2d0>)
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	3301      	adds	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f47f aeaf 	bne.w	80009f8 <HAL_GPIO_Init+0x10>
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	bf00      	nop
 8000c9e:	371c      	adds	r7, #28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	48000400 	.word	0x48000400
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ccc:	787b      	ldrb	r3, [r7, #1]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cd2:	887a      	ldrh	r2, [r7, #2]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cd8:	e002      	b.n	8000ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b08b      	sub	sp, #44	; 0x2c
 8000cf0:	af06      	add	r7, sp, #24
 8000cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e109      	b.n	8000f12 <HAL_PCD_Init+0x226>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d106      	bne.n	8000d18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f007 f88a 	bl	8007e2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f002 ff11 	bl	8003b4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	687e      	ldr	r6, [r7, #4]
 8000d32:	466d      	mov	r5, sp
 8000d34:	f106 0410 	add.w	r4, r6, #16
 8000d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d44:	1d33      	adds	r3, r6, #4
 8000d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d48:	6838      	ldr	r0, [r7, #0]
 8000d4a:	f002 fed7 	bl	8003afc <USB_CoreInit>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d005      	beq.n	8000d60 <HAL_PCD_Init+0x74>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2202      	movs	r2, #2
 8000d58:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e0d8      	b.n	8000f12 <HAL_PCD_Init+0x226>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 ff0b 	bl	8003b82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e04d      	b.n	8000e0e <HAL_PCD_Init+0x122>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	3305      	adds	r3, #5
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	1c5a      	adds	r2, r3, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	3304      	adds	r3, #4
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	b298      	uxth	r0, r3
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	333a      	adds	r3, #58	; 0x3a
 8000db2:	4602      	mov	r2, r0
 8000db4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3307      	adds	r3, #7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	333c      	adds	r3, #60	; 0x3c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	3340      	adds	r3, #64	; 0x40
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	3344      	adds	r3, #68	; 0x44
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3ac      	bcc.n	8000d72 <HAL_PCD_Init+0x86>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e044      	b.n	8000ea8 <HAL_PCD_Init+0x1bc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f203 136d 	addw	r3, r3, #365	; 0x16d
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	440b      	add	r3, r1
 8000e42:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e4a:	7bfa      	ldrb	r2, [r7, #15]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	f203 136f 	addw	r3, r3, #367	; 0x16f
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	7bfa      	ldrb	r2, [r7, #15]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3b5      	bcc.n	8000e1e <HAL_PCD_Init+0x132>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	687e      	ldr	r6, [r7, #4]
 8000eba:	466d      	mov	r5, sp
 8000ebc:	f106 0410 	add.w	r4, r6, #16
 8000ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ecc:	1d33      	adds	r3, r6, #4
 8000ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f002 fe63 	bl	8003b9c <USB_DevInit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e014      	b.n	8000f12 <HAL_PCD_Init+0x226>
  }

  hpcd->USB_Address = 0U;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  hpcd->State = HAL_PCD_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69db      	ldr	r3, [r3, #28]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d102      	bne.n	8000f06 <HAL_PCD_Init+0x21a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f001 fc55 	bl	80027b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f005 f86f 	bl	8005fee <USB_DevDisconnect>

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_PCD_Start+0x16>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e012      	b.n	8000f56 <HAL_PCD_Start+0x3c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fdee 	bl	8003b1e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 f83a 	bl	8005fc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b084      	sub	sp, #16
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f005 f854 	bl	8006018 <USB_ReadInterrupts>
 8000f70:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fb3e 	bl	80015fe <PCD_EP_ISR_Handler>

    return;
 8000f82:	e110      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d013      	beq.n	8000fb6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f006 ffd1 	bl	8007f4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f8fc 	bl	80011ac <HAL_PCD_SetAddress>

    return;
 8000fb4:	e0f7      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00c      	beq.n	8000fda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fd8:	e0e5      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000ffc:	e0d3      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d034      	beq.n	8001072 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001010:	b29a      	uxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0204 	bic.w	r2, r2, #4
 800101a:	b292      	uxth	r2, r2
 800101c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0208 	bic.w	r2, r2, #8
 8001032:	b292      	uxth	r2, r2
 8001034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800104a:	2100      	movs	r1, #0
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f007 fa2f 	bl	80084b0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 ffb4 	bl	8007fc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800106a:	b292      	uxth	r2, r2
 800106c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001070:	e099      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001078:	2b00      	cmp	r3, #0
 800107a:	d027      	beq.n	80010cc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0208 	orr.w	r2, r2, #8
 800108e:	b292      	uxth	r2, r2
 8001090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a6:	b292      	uxth	r2, r2
 80010a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0204 	orr.w	r2, r2, #4
 80010be:	b292      	uxth	r2, r2
 80010c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f006 ff61 	bl	8007f8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010ca:	e06c      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d040      	beq.n	8001158 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010de:	b29a      	uxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e8:	b292      	uxth	r2, r2
 80010ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d12b      	bne.n	8001150 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0204 	orr.w	r2, r2, #4
 800110a:	b292      	uxth	r2, r2
 800110c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	b292      	uxth	r2, r2
 8001124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001138:	b29b      	uxth	r3, r3
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001146:	2101      	movs	r1, #1
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f007 f9b1 	bl	80084b0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800114e:	e02a      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f006 ff1b 	bl	8007f8c <HAL_PCD_SuspendCallback>
    return;
 8001156:	e026      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00f      	beq.n	8001182 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800116a:	b29a      	uxth	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001174:	b292      	uxth	r2, r2
 8001176:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f006 fed9 	bl	8007f32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001180:	e011      	b.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00c      	beq.n	80011a6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119e:	b292      	uxth	r2, r2
 80011a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011a4:	bf00      	nop
  }
}
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_PCD_SetAddress+0x1a>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e013      	b.n	80011ee <HAL_PCD_SetAddress+0x42>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  hpcd->USB_Address = address;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	78fa      	ldrb	r2, [r7, #3]
 80011d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f004 feda 	bl	8005f98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	4608      	mov	r0, r1
 8001200:	4611      	mov	r1, r2
 8001202:	461a      	mov	r2, r3
 8001204:	4603      	mov	r3, r0
 8001206:	70fb      	strb	r3, [r7, #3]
 8001208:	460b      	mov	r3, r1
 800120a:	803b      	strh	r3, [r7, #0]
 800120c:	4613      	mov	r3, r2
 800120e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da0f      	bge.n	800123c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	3304      	adds	r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	705a      	strb	r2, [r3, #1]
 800123a:	e00f      	b.n	800125c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	f003 0207 	and.w	r2, r3, #7
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	3304      	adds	r3, #4
 8001254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2da      	uxtb	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001268:	883a      	ldrh	r2, [r7, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	78ba      	ldrb	r2, [r7, #2]
 8001272:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	785b      	ldrb	r3, [r3, #1]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b29a      	uxth	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001286:	78bb      	ldrb	r3, [r7, #2]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d102      	bne.n	8001292 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_PCD_EP_Open+0xaa>
 800129c:	2302      	movs	r3, #2
 800129e:	e00e      	b.n	80012be <HAL_PCD_EP_Open+0xc8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fc96 	bl	8003be0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return ret;
 80012bc:	7afb      	ldrb	r3, [r7, #11]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0f      	bge.n	80012fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	3304      	adds	r3, #4
 80012f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	705a      	strb	r2, [r3, #1]
 80012f8:	e00f      	b.n	800131a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0207 	and.w	r2, r3, #7
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	b2da      	uxtb	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800132c:	2b01      	cmp	r3, #1
 800132e:	d101      	bne.n	8001334 <HAL_PCD_EP_Close+0x6e>
 8001330:	2302      	movs	r3, #2
 8001332:	e00e      	b.n	8001352 <HAL_PCD_EP_Close+0x8c>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	4618      	mov	r0, r3
 8001344:	f003 f806 	bl	8004354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	460b      	mov	r3, r1
 8001368:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800136a:	7afb      	ldrb	r3, [r7, #11]
 800136c:	f003 0207 	and.w	r2, r3, #7
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2200      	movs	r2, #0
 800139a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800139c:	7afb      	ldrb	r3, [r7, #11]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013a8:	7afb      	ldrb	r3, [r7, #11]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d106      	bne.n	80013c0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6979      	ldr	r1, [r7, #20]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 f9b8 	bl	800472e <USB_EPStartXfer>
 80013be:	e005      	b.n	80013cc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6979      	ldr	r1, [r7, #20]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f9b1 	bl	800472e <USB_EPStartXfer>
  }

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	f003 0207 	and.w	r2, r3, #7
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80013f8:	681b      	ldr	r3, [r3, #0]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	460b      	mov	r3, r1
 8001414:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2201      	movs	r2, #1
 8001452:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	b2da      	uxtb	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <HAL_PCD_EP_Transmit+0x72>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6979      	ldr	r1, [r7, #20]
 8001470:	4618      	mov	r0, r3
 8001472:	f003 f95c 	bl	800472e <USB_EPStartXfer>
 8001476:	e005      	b.n	8001484 <HAL_PCD_EP_Transmit+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6979      	ldr	r1, [r7, #20]
 800147e:	4618      	mov	r0, r3
 8001480:	f003 f955 	bl	800472e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0207 	and.w	r2, r3, #7
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d901      	bls.n	80014ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e04e      	b.n	800154a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0f      	bge.n	80014d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	705a      	strb	r2, [r3, #1]
 80014d2:	e00d      	b.n	80014f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014d4:	78fa      	ldrb	r2, [r7, #3]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	3304      	adds	r3, #4
 80014e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_PCD_EP_SetStall+0x82>
 800150c:	2302      	movs	r3, #2
 800150e:	e01c      	b.n	800154a <HAL_PCD_EP_SetStall+0xbc>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f004 fc3b 	bl	8005d9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	2b00      	cmp	r3, #0
 800152c:	d108      	bne.n	8001540 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f004 fd7c 	bl	8006038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800155e:	78fb      	ldrb	r3, [r7, #3]
 8001560:	f003 020f 	and.w	r2, r3, #15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	d901      	bls.n	8001570 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e042      	b.n	80015f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001574:	2b00      	cmp	r3, #0
 8001576:	da0f      	bge.n	8001598 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	3304      	adds	r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	705a      	strb	r2, [r3, #1]
 8001596:	e00f      	b.n	80015b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	f003 0207 	and.w	r2, r3, #7
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	3304      	adds	r3, #4
 80015b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_EP_ClrStall+0x86>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e00e      	b.n	80015f6 <HAL_PCD_EP_ClrStall+0xa4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 fc28 	bl	8005e3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22ac 	strb.w	r2, [r3, #684]	; 0x2ac

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b096      	sub	sp, #88	; 0x58
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001606:	e3a9      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
  {
    wIstr = hpcd->Instance->ISTR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001610:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001614:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001622:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001626:	2b00      	cmp	r3, #0
 8001628:	f040 8169 	bne.w	80018fe <PCD_EP_ISR_Handler+0x300>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800162c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	d150      	bne.n	80016da <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	881b      	ldrh	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001648:	81fb      	strh	r3, [r7, #14]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	89fb      	ldrh	r3, [r7, #14]
 8001650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001658:	b29b      	uxth	r3, r3
 800165a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	332c      	adds	r3, #44	; 0x2c
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	4413      	add	r3, r2
 800167c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001688:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800168a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	441a      	add	r2, r3
 8001694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001696:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f006 fc2f 	bl	8007efe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 8357 	beq.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
 80016ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 8352 	bne.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b292      	uxth	r2, r2
 80016cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80016d8:	e340      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80016e0:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d032      	beq.n	800175e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001700:	b29b      	uxth	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	4413      	add	r3, r2
 8001712:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f503 712d 	add.w	r1, r3, #692	; 0x2b4
 800172a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800172c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800172e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001730:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001732:	b29b      	uxth	r3, r3
 8001734:	f004 fcce 	bl	80060d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29a      	uxth	r2, r3
 8001740:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001744:	4013      	ands	r3, r2
 8001746:	823b      	strh	r3, [r7, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	8a3a      	ldrh	r2, [r7, #16]
 800174e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001752:	b292      	uxth	r2, r2
 8001754:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f006 fba4 	bl	8007ea4 <HAL_PCD_SetupStageCallback>
 800175c:	e2fe      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800175e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001762:	2b00      	cmp	r3, #0
 8001764:	f280 82fa 	bge.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b29a      	uxth	r2, r3
 8001770:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001774:	4013      	ands	r3, r2
 8001776:	83fb      	strh	r3, [r7, #30]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	8bfa      	ldrh	r2, [r7, #30]
 800177e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001782:	b292      	uxth	r2, r2
 8001784:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d019      	beq.n	80017ea <PCD_EP_ISR_Handler+0x1ec>
 80017b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d015      	beq.n	80017ea <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017c4:	6959      	ldr	r1, [r3, #20]
 80017c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f004 fc80 	bl	80060d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	441a      	add	r2, r3
 80017de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017e2:	2100      	movs	r1, #0
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f006 fb6f 	bl	8007ec8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80017f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80017f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f040 82ad 	bne.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
 8001802:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001806:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800180a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800180e:	f000 82a5 	beq.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001820:	b29b      	uxth	r3, r3
 8001822:	461a      	mov	r2, r3
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	4413      	add	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b3e      	cmp	r3, #62	; 0x3e
 8001838:	d918      	bls.n	800186c <PCD_EP_ISR_Handler+0x26e>
 800183a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	647b      	str	r3, [r7, #68]	; 0x44
 8001842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <PCD_EP_ISR_Handler+0x256>
 800184e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001850:	3b01      	subs	r3, #1
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001856:	b29b      	uxth	r3, r3
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	b29b      	uxth	r3, r3
 800185c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001864:	b29a      	uxth	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	801a      	strh	r2, [r3, #0]
 800186a:	e029      	b.n	80018c0 <PCD_EP_ISR_Handler+0x2c2>
 800186c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d112      	bne.n	800189a <PCD_EP_ISR_Handler+0x29c>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	b29b      	uxth	r3, r3
 800187a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800187e:	b29a      	uxth	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	801a      	strh	r2, [r3, #0]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800188e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001892:	b29a      	uxth	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	801a      	strh	r2, [r3, #0]
 8001898:	e012      	b.n	80018c0 <PCD_EP_ISR_Handler+0x2c2>
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	647b      	str	r3, [r7, #68]	; 0x44
 80018a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <PCD_EP_ISR_Handler+0x2b6>
 80018ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b0:	3301      	adds	r3, #1
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
 80018b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d0:	827b      	strh	r3, [r7, #18]
 80018d2:	8a7b      	ldrh	r3, [r7, #18]
 80018d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80018d8:	827b      	strh	r3, [r7, #18]
 80018da:	8a7b      	ldrh	r3, [r7, #18]
 80018dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80018e0:	827b      	strh	r3, [r7, #18]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8013      	strh	r3, [r2, #0]
 80018fc:	e22e      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001912:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001916:	2b00      	cmp	r3, #0
 8001918:	f280 80f7 	bge.w	8001b0a <PCD_EP_ISR_Handler+0x50c>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	b29a      	uxth	r2, r3
 800192e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001932:	4013      	ands	r3, r2
 8001934:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800194a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800194e:	b292      	uxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001952:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	3304      	adds	r3, #4
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800196a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196c:	7b1b      	ldrb	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d123      	bne.n	80019ba <PCD_EP_ISR_Handler+0x3bc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800199a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 808e 	beq.w	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019aa:	6959      	ldr	r1, [r3, #20]
 80019ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ae:	88da      	ldrh	r2, [r3, #6]
 80019b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019b4:	f004 fb8e 	bl	80060d4 <USB_ReadPMA>
 80019b8:	e082      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80019ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019bc:	78db      	ldrb	r3, [r3, #3]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d10a      	bne.n	80019d8 <PCD_EP_ISR_Handler+0x3da>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80019c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80019c6:	461a      	mov	r2, r3
 80019c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f9d4 	bl	8001d78 <HAL_PCD_EP_DB_Receive>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80019d6:	e073      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	441a      	add	r2, r3
 8001a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d022      	beq.n	8001a7c <PCD_EP_ISR_Handler+0x47e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	4413      	add	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001a5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d02c      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a6c:	6959      	ldr	r1, [r3, #20]
 8001a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a70:	891a      	ldrh	r2, [r3, #8]
 8001a72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001a76:	f004 fb2d 	bl	80060d4 <USB_ReadPMA>
 8001a7a:	e021      	b.n	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8001aa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <PCD_EP_ISR_Handler+0x4c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	6959      	ldr	r1, [r3, #20]
 8001ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab6:	895a      	ldrh	r2, [r3, #10]
 8001ab8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001abc:	f004 fb0a 	bl	80060d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ac8:	441a      	add	r2, r3
 8001aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001acc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ad6:	441a      	add	r2, r3
 8001ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ada:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x4f2>
 8001ae4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d206      	bcs.n	8001afe <PCD_EP_ISR_Handler+0x500>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f006 f9e6 	bl	8007ec8 <HAL_PCD_DataOutStageCallback>
 8001afc:	e005      	b.n	8001b0a <PCD_EP_ISR_Handler+0x50c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe12 	bl	800472e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b0a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8122 	beq.w	8001d5c <PCD_EP_ISR_Handler+0x75e>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b18:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	441a      	add	r2, r3
 8001b5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6c:	78db      	ldrb	r3, [r3, #3]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	f040 80a2 	bne.w	8001cb8 <PCD_EP_ISR_Handler+0x6ba>
        {
          ep->xfer_len = 0U;
 8001b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7c:	7b1b      	ldrb	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8093 	beq.w	8001caa <PCD_EP_ISR_Handler+0x6ac>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d046      	beq.n	8001c1e <PCD_EP_ISR_Handler+0x620>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d126      	bne.n	8001be6 <PCD_EP_ISR_Handler+0x5e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	4413      	add	r3, r2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	00da      	lsls	r2, r3, #3
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	4413      	add	r3, r2
 8001bba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	801a      	strh	r2, [r3, #0]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	e061      	b.n	8001caa <PCD_EP_ISR_Handler+0x6ac>
 8001be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be8:	785b      	ldrb	r3, [r3, #1]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d15d      	bne.n	8001caa <PCD_EP_ISR_Handler+0x6ac>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	4413      	add	r3, r2
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	00da      	lsls	r2, r3, #3
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	4413      	add	r3, r2
 8001c10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
 8001c1c:	e045      	b.n	8001caa <PCD_EP_ISR_Handler+0x6ac>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c26:	785b      	ldrb	r3, [r3, #1]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d126      	bne.n	8001c7a <PCD_EP_ISR_Handler+0x67c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	4413      	add	r3, r2
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
 8001c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	00da      	lsls	r2, r3, #3
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
 8001c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	801a      	strh	r2, [r3, #0]
 8001c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c76:	801a      	strh	r2, [r3, #0]
 8001c78:	e017      	b.n	8001caa <PCD_EP_ISR_Handler+0x6ac>
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	785b      	ldrb	r3, [r3, #1]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d113      	bne.n	8001caa <PCD_EP_ISR_Handler+0x6ac>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c90:	4413      	add	r3, r2
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	00da      	lsls	r2, r3, #3
 8001c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f006 f924 	bl	8007efe <HAL_PCD_DataInStageCallback>
 8001cb6:	e051      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001cb8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d144      	bne.n	8001d4e <PCD_EP_ISR_Handler+0x750>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d907      	bls.n	8001d08 <PCD_EP_ISR_Handler+0x70a>
            {
              ep->xfer_len -= TxPctSize;
 8001cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d00:	1ad2      	subs	r2, r2, r3
 8001d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d04:	619a      	str	r2, [r3, #24]
 8001d06:	e002      	b.n	8001d0e <PCD_EP_ISR_Handler+0x710>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <PCD_EP_ISR_Handler+0x726>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f006 f8ee 	bl	8007efe <HAL_PCD_DataInStageCallback>
 8001d22:	e01b      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d2c:	441a      	add	r2, r3
 8001d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d30:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d3e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fcf1 	bl	800472e <USB_EPStartXfer>
 8001d4c:	e006      	b.n	8001d5c <PCD_EP_ISR_Handler+0x75e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001d4e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d52:	461a      	mov	r2, r3
 8001d54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f917 	bl	8001f8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f6ff ac4d 	blt.w	8001608 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3758      	adds	r7, #88	; 0x58
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d07c      	beq.n	8001e8a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	8b7b      	ldrh	r3, [r7, #26]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d306      	bcc.n	8001dce <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	8b7b      	ldrh	r3, [r7, #26]
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	e002      	b.n	8001dd4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d123      	bne.n	8001e24 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	833b      	strh	r3, [r7, #24]
 8001df8:	8b3b      	ldrh	r3, [r7, #24]
 8001dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dfe:	833b      	strh	r3, [r7, #24]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	8b3b      	ldrh	r3, [r7, #24]
 8001e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01f      	beq.n	8001e6e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e48:	82fb      	strh	r3, [r7, #22]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	8afb      	ldrh	r3, [r7, #22]
 8001e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e6e:	8b7b      	ldrh	r3, [r7, #26]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8085 	beq.w	8001f80 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	6959      	ldr	r1, [r3, #20]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	891a      	ldrh	r2, [r3, #8]
 8001e82:	8b7b      	ldrh	r3, [r7, #26]
 8001e84:	f004 f926 	bl	80060d4 <USB_ReadPMA>
 8001e88:	e07a      	b.n	8001f80 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	8b7b      	ldrh	r3, [r7, #26]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d306      	bcc.n	8001ec8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	8b7b      	ldrh	r3, [r7, #26]
 8001ec0:	1ad2      	subs	r2, r2, r3
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	619a      	str	r2, [r3, #24]
 8001ec6:	e002      	b.n	8001ece <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d123      	bne.n	8001f1e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef0:	83fb      	strh	r3, [r7, #30]
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	441a      	add	r2, r3
 8001f08:	8bfb      	ldrh	r3, [r7, #30]
 8001f0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11f      	bne.n	8001f68 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f42:	83bb      	strh	r3, [r7, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	8bbb      	ldrh	r3, [r7, #28]
 8001f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f68:	8b7b      	ldrh	r3, [r7, #26]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	6959      	ldr	r1, [r3, #20]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	895a      	ldrh	r2, [r3, #10]
 8001f7a:	8b7b      	ldrh	r3, [r7, #26]
 8001f7c:	f004 f8aa 	bl	80060d4 <USB_ReadPMA>
    }
  }

  return count;
 8001f80:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3720      	adds	r7, #32
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b0a2      	sub	sp, #136	; 0x88
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	4613      	mov	r3, r2
 8001f96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 81c5 	beq.w	800232e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d907      	bls.n	8001fe8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fe0:	1ad2      	subs	r2, r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	e002      	b.n	8001fee <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 80b9 	bne.w	800216a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d126      	bne.n	800204e <HAL_PCD_EP_DB_Transmit+0xc4>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200e:	b29b      	uxth	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	4413      	add	r3, r2
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	00da      	lsls	r2, r3, #3
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	4413      	add	r3, r2
 8002022:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002032:	b29a      	uxth	r2, r3
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	801a      	strh	r2, [r3, #0]
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002046:	b29a      	uxth	r2, r3
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	801a      	strh	r2, [r3, #0]
 800204c:	e01a      	b.n	8002084 <HAL_PCD_EP_DB_Transmit+0xfa>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d116      	bne.n	8002084 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	4413      	add	r3, r2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	00da      	lsls	r2, r3, #3
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	4413      	add	r3, r2
 8002078:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	2200      	movs	r2, #0
 8002082:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	785b      	ldrb	r3, [r3, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d126      	bne.n	80020e0 <HAL_PCD_EP_DB_Transmit+0x156>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	61bb      	str	r3, [r7, #24]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	00da      	lsls	r2, r3, #3
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	4413      	add	r3, r2
 80020b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	801a      	strh	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d8:	b29a      	uxth	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e017      	b.n	8002110 <HAL_PCD_EP_DB_Transmit+0x186>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	785b      	ldrb	r3, [r3, #1]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d113      	bne.n	8002110 <HAL_PCD_EP_DB_Transmit+0x186>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	6a3b      	ldr	r3, [r7, #32]
 80020f6:	4413      	add	r3, r2
 80020f8:	623b      	str	r3, [r7, #32]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	00da      	lsls	r2, r3, #3
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	4413      	add	r3, r2
 8002104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2200      	movs	r2, #0
 800210e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f005 fef1 	bl	8007efe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 82d2 	beq.w	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	827b      	strh	r3, [r7, #18]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	8a7b      	ldrh	r3, [r7, #18]
 8002154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800215c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	b29b      	uxth	r3, r3
 8002166:	8013      	strh	r3, [r2, #0]
 8002168:	e2b0      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	441a      	add	r2, r3
 80021a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	2b01      	cmp	r3, #1
 80021c0:	f040 8284 	bne.w	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021cc:	441a      	add	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021da:	441a      	add	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d309      	bcc.n	8002200 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021f8:	1ad2      	subs	r2, r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	e015      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800220c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002216:	e009      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d155      	bne.n	80022e0 <HAL_PCD_EP_DB_Transmit+0x356>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	63bb      	str	r3, [r7, #56]	; 0x38
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	4413      	add	r3, r2
 800224a:	63bb      	str	r3, [r7, #56]	; 0x38
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	00da      	lsls	r2, r3, #3
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	4413      	add	r3, r2
 8002256:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
 800225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800225e:	2b3e      	cmp	r3, #62	; 0x3e
 8002260:	d916      	bls.n	8002290 <HAL_PCD_EP_DB_Transmit+0x306>
 8002262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
 8002268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002274:	3b01      	subs	r3, #1
 8002276:	64bb      	str	r3, [r7, #72]	; 0x48
 8002278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227a:	b29b      	uxth	r3, r3
 800227c:	029b      	lsls	r3, r3, #10
 800227e:	b29b      	uxth	r3, r3
 8002280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002288:	b29a      	uxth	r2, r3
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228c:	801a      	strh	r2, [r3, #0]
 800228e:	e043      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <HAL_PCD_EP_DB_Transmit+0x332>
 8002296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	e02d      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x38e>
 80022bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_PCD_EP_DB_Transmit+0x348>
 80022cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ce:	3301      	adds	r3, #1
 80022d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80022d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	b29a      	uxth	r2, r3
 80022da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	e01b      	b.n	8002318 <HAL_PCD_EP_DB_Transmit+0x38e>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	785b      	ldrb	r3, [r3, #1]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d117      	bne.n	8002318 <HAL_PCD_EP_DB_Transmit+0x38e>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	643b      	str	r3, [r7, #64]	; 0x40
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	4413      	add	r3, r2
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	00da      	lsls	r2, r3, #3
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	4413      	add	r3, r2
 800230a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002312:	b29a      	uxth	r2, r3
 8002314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002316:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6959      	ldr	r1, [r3, #20]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	891a      	ldrh	r2, [r3, #8]
 8002324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002326:	b29b      	uxth	r3, r3
 8002328:	f003 fe92 	bl	8006050 <USB_WritePMA>
 800232c:	e1ce      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	4413      	add	r3, r2
 8002348:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002352:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800235e:	429a      	cmp	r2, r3
 8002360:	d307      	bcc.n	8002372 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236a:	1ad2      	subs	r2, r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	619a      	str	r2, [r3, #24]
 8002370:	e002      	b.n	8002378 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f040 80c4 	bne.w	800250a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	785b      	ldrb	r3, [r3, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d126      	bne.n	80023d8 <HAL_PCD_EP_DB_Transmit+0x44e>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239e:	4413      	add	r3, r2
 80023a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	00da      	lsls	r2, r3, #3
 80023a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023aa:	4413      	add	r3, r2
 80023ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023b0:	667b      	str	r3, [r7, #100]	; 0x64
 80023b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c0:	801a      	strh	r2, [r3, #0]
 80023c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	e01a      	b.n	800240e <HAL_PCD_EP_DB_Transmit+0x484>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	785b      	ldrb	r3, [r3, #1]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d116      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x484>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	673b      	str	r3, [r7, #112]	; 0x70
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f4:	4413      	add	r3, r2
 80023f6:	673b      	str	r3, [r7, #112]	; 0x70
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	00da      	lsls	r2, r3, #3
 80023fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002400:	4413      	add	r3, r2
 8002402:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002406:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d12f      	bne.n	800247c <HAL_PCD_EP_DB_Transmit+0x4f2>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002434:	4413      	add	r3, r2
 8002436:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	00da      	lsls	r2, r3, #3
 8002440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002444:	4413      	add	r3, r2
 8002446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800244a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800244e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	b29b      	uxth	r3, r3
 8002456:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800245a:	b29a      	uxth	r2, r3
 800245c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002472:	b29a      	uxth	r2, r3
 8002474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e017      	b.n	80024ac <HAL_PCD_EP_DB_Transmit+0x522>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d113      	bne.n	80024ac <HAL_PCD_EP_DB_Transmit+0x522>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002492:	4413      	add	r3, r2
 8002494:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800249e:	4413      	add	r3, r2
 80024a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80024a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a8:	2200      	movs	r2, #0
 80024aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f005 fd23 	bl	8007efe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 8104 	bne.w	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
 8002508:	e0e0      	b.n	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d121      	bne.n	8002558 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	441a      	add	r2, r3
 8002540:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800254c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80b4 	bne.w	80026cc <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800256c:	441a      	add	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800257a:	441a      	add	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d309      	bcc.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6a1a      	ldr	r2, [r3, #32]
 8002596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002598:	1ad2      	subs	r2, r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	621a      	str	r2, [r3, #32]
 800259e:	e015      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80025a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025b6:	e009      	b.n	80025cc <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	663b      	str	r3, [r7, #96]	; 0x60
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d155      	bne.n	8002686 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	65bb      	str	r3, [r7, #88]	; 0x58
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	4413      	add	r3, r2
 80025f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00da      	lsls	r2, r3, #3
 80025f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025fa:	4413      	add	r3, r2
 80025fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002600:	657b      	str	r3, [r7, #84]	; 0x54
 8002602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002604:	2b3e      	cmp	r3, #62	; 0x3e
 8002606:	d916      	bls.n	8002636 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	677b      	str	r3, [r7, #116]	; 0x74
 800260e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <HAL_PCD_EP_DB_Transmit+0x694>
 8002618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261a:	3b01      	subs	r3, #1
 800261c:	677b      	str	r3, [r7, #116]	; 0x74
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	b29b      	uxth	r3, r3
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	b29b      	uxth	r3, r3
 8002626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29a      	uxth	r2, r3
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e040      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002638:	2b00      	cmp	r3, #0
 800263a:	d112      	bne.n	8002662 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800263c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002646:	b29a      	uxth	r2, r3
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265a:	b29a      	uxth	r2, r3
 800265c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	e02a      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	677b      	str	r3, [r7, #116]	; 0x74
 8002668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002674:	3301      	adds	r3, #1
 8002676:	677b      	str	r3, [r7, #116]	; 0x74
 8002678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800267a:	b29b      	uxth	r3, r3
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	b29a      	uxth	r2, r3
 8002680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002682:	801a      	strh	r2, [r3, #0]
 8002684:	e018      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	785b      	ldrb	r3, [r3, #1]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d114      	bne.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x72e>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002696:	b29b      	uxth	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800269c:	4413      	add	r3, r2
 800269e:	663b      	str	r3, [r7, #96]	; 0x60
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	00da      	lsls	r2, r3, #3
 80026a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a8:	4413      	add	r3, r2
 80026aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	6959      	ldr	r1, [r3, #20]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	895a      	ldrh	r2, [r3, #10]
 80026c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f003 fcc2 	bl	8006050 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e6:	823b      	strh	r3, [r7, #16]
 80026e8:	8a3b      	ldrh	r3, [r7, #16]
 80026ea:	f083 0310 	eor.w	r3, r3, #16
 80026ee:	823b      	strh	r3, [r7, #16]
 80026f0:	8a3b      	ldrh	r3, [r7, #16]
 80026f2:	f083 0320 	eor.w	r3, r3, #32
 80026f6:	823b      	strh	r3, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	441a      	add	r2, r3
 8002706:	8a3b      	ldrh	r3, [r7, #16]
 8002708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800270c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002718:	b29b      	uxth	r3, r3
 800271a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3788      	adds	r7, #136	; 0x88
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002726:	b480      	push	{r7}
 8002728:	b087      	sub	sp, #28
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002738:	897b      	ldrh	r3, [r7, #10]
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	1c5a      	adds	r2, r3, #1
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	3304      	adds	r3, #4
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	e00a      	b.n	8002774 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800275e:	897a      	ldrh	r2, [r7, #10]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	3304      	adds	r3, #4
 8002772:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002774:	893b      	ldrh	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d107      	bne.n	800278a <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	b29a      	uxth	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	80da      	strh	r2, [r3, #6]
 8002788:	e00b      	b.n	80027a2 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2201      	movs	r2, #1
 800278e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b29a      	uxth	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	b29a      	uxth	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
  hpcd->LPM_State = LPM_L0;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000

08002824 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_PWREx_GetVoltageRange+0x18>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40007000 	.word	0x40007000

08002840 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284e:	d130      	bne.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285c:	d038      	beq.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002866:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800286c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2232      	movs	r2, #50	; 0x32
 8002874:	fb02 f303 	mul.w	r3, r2, r3
 8002878:	4a1b      	ldr	r2, [pc, #108]	; (80028e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9b      	lsrs	r3, r3, #18
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002884:	e002      	b.n	800288c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3b01      	subs	r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d102      	bne.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f2      	bne.n	8002886 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d110      	bne.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e00f      	b.n	80028d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d007      	beq.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028c8:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000
 80028e4:	20000000 	.word	0x20000000
 80028e8:	431bde83 	.word	0x431bde83

080028ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028fa:	6053      	str	r3, [r2, #4]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40007000 	.word	0x40007000

0800290c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f000 bc02 	b.w	8003124 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002920:	4b96      	ldr	r3, [pc, #600]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292a:	4b94      	ldr	r3, [pc, #592]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80e4 	beq.w	8002b0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_RCC_OscConfig+0x4c>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	f040 808b 	bne.w	8002a66 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b01      	cmp	r3, #1
 8002954:	f040 8087 	bne.w	8002a66 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002958:	4b88      	ldr	r3, [pc, #544]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x64>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e3d9      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1a      	ldr	r2, [r3, #32]
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <HAL_RCC_OscConfig+0x7e>
 8002980:	4b7e      	ldr	r3, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	e005      	b.n	8002996 <HAL_RCC_OscConfig+0x8a>
 800298a:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 800298c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002996:	4293      	cmp	r3, r2
 8002998:	d223      	bcs.n	80029e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fd54 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e3ba      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ae:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a72      	ldr	r2, [pc, #456]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	496d      	ldr	r1, [pc, #436]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4968      	ldr	r1, [pc, #416]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
 80029e0:	e025      	b.n	8002a2e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e2:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029e8:	f043 0308 	orr.w	r3, r3, #8
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	4960      	ldr	r1, [pc, #384]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a00:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	495b      	ldr	r1, [pc, #364]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fd14 	bl	800344c <RCC_SetFlashLatencyFromMSIRange>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e37a      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a2e:	f000 fc81 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 8002a32:	4602      	mov	r2, r0
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	4950      	ldr	r1, [pc, #320]	; (8002b80 <HAL_RCC_OscConfig+0x274>)
 8002a40:	5ccb      	ldrb	r3, [r1, r3]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4a:	4a4e      	ldr	r2, [pc, #312]	; (8002b84 <HAL_RCC_OscConfig+0x278>)
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <HAL_RCC_OscConfig+0x27c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fe36 	bl	80006c4 <HAL_InitTick>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d052      	beq.n	8002b08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	e35e      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d032      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a42      	ldr	r2, [pc, #264]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a7a:	f7fd fe73 	bl	8000764 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a82:	f7fd fe6f 	bl	8000764 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e347      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a94:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0308 	orr.w	r3, r3, #8
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4930      	ldr	r1, [pc, #192]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002abe:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	492b      	ldr	r1, [pc, #172]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
 8002ad2:	e01a      	b.n	8002b0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ad4:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a28      	ldr	r2, [pc, #160]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002ada:	f023 0301 	bic.w	r3, r3, #1
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ae0:	f7fd fe40 	bl	8000764 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ae8:	f7fd fe3c 	bl	8000764 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e314      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f0      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x1dc>
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d073      	beq.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_OscConfig+0x21c>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d10e      	bne.n	8002b40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d063      	beq.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d15f      	bne.n	8002bfc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e2f1      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x24c>
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e025      	b.n	8002ba4 <HAL_RCC_OscConfig+0x298>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d114      	bne.n	8002b8c <HAL_RCC_OscConfig+0x280>
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCC_OscConfig+0x270>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e013      	b.n	8002ba4 <HAL_RCC_OscConfig+0x298>
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	08009548 	.word	0x08009548
 8002b84:	20000000 	.word	0x20000000
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	4ba0      	ldr	r3, [pc, #640]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9f      	ldr	r2, [pc, #636]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b9d      	ldr	r3, [pc, #628]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a9c      	ldr	r2, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7fd fdda 	bl	8000764 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7fd fdd6 	bl	8000764 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e2ae      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bc6:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x2a8>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fd fdc6 	bl	8000764 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fd fdc2 	bl	8000764 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e29a      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d0>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d060      	beq.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x310>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d116      	bne.n	8002c4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_OscConfig+0x328>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e277      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c34:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	4973      	ldr	r1, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c48:	e040      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c52:	4b6f      	ldr	r3, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fd fd81 	bl	8000764 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fd fd7d 	bl	8000764 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e255      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c78:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b62      	ldr	r3, [pc, #392]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	061b      	lsls	r3, r3, #24
 8002c92:	495f      	ldr	r1, [pc, #380]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	604b      	str	r3, [r1, #4]
 8002c98:	e018      	b.n	8002ccc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fd fd5d 	bl	8000764 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fd fd59 	bl	8000764 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e231      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fd fd38 	bl	8000764 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fd fd34 	bl	8000764 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e20c      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x3ec>
 8002d18:	e01b      	b.n	8002d52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d20:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fd fd1b 	bl	8000764 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fd fd17 	bl	8000764 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1ef      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ef      	bne.n	8002d32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80a6 	beq.w	8002eac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d64:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b27      	ldr	r3, [pc, #156]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d118      	bne.n	8002dca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da4:	f7fd fcde 	bl	8000764 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dac:	f7fd fcda 	bl	8000764 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1b2      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_RCC_OscConfig+0x508>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d108      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4d8>
 8002dd2:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de2:	e029      	b.n	8002e38 <HAL_RCC_OscConfig+0x52c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d115      	bne.n	8002e18 <HAL_RCC_OscConfig+0x50c>
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e02:	4a03      	ldr	r2, [pc, #12]	; (8002e10 <HAL_RCC_OscConfig+0x504>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x52c>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
 8002e18:	4b9a      	ldr	r3, [pc, #616]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1e:	4a99      	ldr	r2, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e28:	4b96      	ldr	r3, [pc, #600]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	4a95      	ldr	r2, [pc, #596]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd fc90 	bl	8000764 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7fd fc8c 	bl	8000764 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e162      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e5e:	4b89      	ldr	r3, [pc, #548]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ed      	beq.n	8002e48 <HAL_RCC_OscConfig+0x53c>
 8002e6c:	e015      	b.n	8002e9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fd fc79 	bl	8000764 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fd fc75 	bl	8000764 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e14b      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8c:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ed      	bne.n	8002e76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d03c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01c      	beq.n	8002efa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ec0:	4b70      	ldr	r3, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec6:	4a6f      	ldr	r2, [pc, #444]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fd fc48 	bl	8000764 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed8:	f7fd fc44 	bl	8000764 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e11c      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eea:	4b66      	ldr	r3, [pc, #408]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002eec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0ef      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x5cc>
 8002ef8:	e01b      	b.n	8002f32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f00:	4a60      	ldr	r2, [pc, #384]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0a:	f7fd fc2b 	bl	8000764 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f12:	f7fd fc27 	bl	8000764 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0ff      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f24:	4b57      	ldr	r3, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ef      	bne.n	8002f12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80f3 	beq.w	8003122 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	f040 80c9 	bne.w	80030d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0203 	and.w	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d12c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	3b01      	subs	r3, #1
 8002f66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d123      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d113      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d06b      	beq.n	800308c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b0c      	cmp	r3, #12
 8002fb8:	d062      	beq.n	8003080 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002fba:	4b32      	ldr	r3, [pc, #200]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e0ac      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fca:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd6:	f7fd fbc5 	bl	8000764 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fd fbc1 	bl	8000764 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e099      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	4b21      	ldr	r3, [pc, #132]	; (8003088 <HAL_RCC_OscConfig+0x77c>)
 8003002:	4013      	ands	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800300c:	3a01      	subs	r2, #1
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	4311      	orrs	r1, r2
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003016:	0212      	lsls	r2, r2, #8
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0552      	lsls	r2, r2, #21
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800302a:	0852      	lsrs	r2, r2, #1
 800302c:	3a01      	subs	r2, #1
 800302e:	0652      	lsls	r2, r2, #25
 8003030:	4311      	orrs	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003036:	06d2      	lsls	r2, r2, #27
 8003038:	430a      	orrs	r2, r1
 800303a:	4912      	ldr	r1, [pc, #72]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 800303c:	4313      	orrs	r3, r2
 800303e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8003052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003058:	f7fd fb84 	bl	8000764 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003060:	f7fd fb80 	bl	8000764 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e058      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_RCC_OscConfig+0x778>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307e:	e050      	b.n	8003122 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04f      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
 8003084:	40021000 	.word	0x40021000
 8003088:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x820>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d144      	bne.n	8003122 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003098:	4b24      	ldr	r3, [pc, #144]	; (800312c <HAL_RCC_OscConfig+0x820>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a23      	ldr	r2, [pc, #140]	; (800312c <HAL_RCC_OscConfig+0x820>)
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <HAL_RCC_OscConfig+0x820>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a20      	ldr	r2, [pc, #128]	; (800312c <HAL_RCC_OscConfig+0x820>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030b0:	f7fd fb58 	bl	8000764 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fd fb54 	bl	8000764 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e02c      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <HAL_RCC_OscConfig+0x820>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x7ac>
 80030d6:	e024      	b.n	8003122 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d01f      	beq.n	800311e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_RCC_OscConfig+0x820>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a12      	ldr	r2, [pc, #72]	; (800312c <HAL_RCC_OscConfig+0x820>)
 80030e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ea:	f7fd fb3b 	bl	8000764 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f0:	e008      	b.n	8003104 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f2:	f7fd fb37 	bl	8000764 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e00f      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_OscConfig+0x820>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f0      	bne.n	80030f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_RCC_OscConfig+0x820>)
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	4905      	ldr	r1, [pc, #20]	; (800312c <HAL_RCC_OscConfig+0x820>)
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_OscConfig+0x824>)
 8003118:	4013      	ands	r3, r2
 800311a:	60cb      	str	r3, [r1, #12]
 800311c:	e001      	b.n	8003122 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021000 	.word	0x40021000
 8003130:	feeefffc 	.word	0xfeeefffc

08003134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0e7      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b75      	ldr	r3, [pc, #468]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4970      	ldr	r1, [pc, #448]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0cf      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d010      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003190:	429a      	cmp	r2, r3
 8003192:	d908      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b63      	ldr	r3, [pc, #396]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4960      	ldr	r1, [pc, #384]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d04c      	beq.n	800324c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	4b5a      	ldr	r3, [pc, #360]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d121      	bne.n	800320a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0a6      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d2:	4b54      	ldr	r3, [pc, #336]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d115      	bne.n	800320a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e09a      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e08e      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fa:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e086      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4943      	ldr	r1, [pc, #268]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321c:	f7fd faa2 	bl	8000764 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fd fa9e 	bl	8000764 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e06e      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b3a      	ldr	r3, [pc, #232]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003264:	429a      	cmp	r2, r3
 8003266:	d208      	bcs.n	800327a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	492b      	ldr	r1, [pc, #172]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800327a:	4b29      	ldr	r3, [pc, #164]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d210      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003288:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 0207 	bic.w	r2, r3, #7
 8003290:	4923      	ldr	r1, [pc, #140]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003298:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_RCC_ClockConfig+0x1ec>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e036      	b.n	8003318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4918      	ldr	r1, [pc, #96]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d009      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032d4:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4910      	ldr	r1, [pc, #64]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032e8:	f000 f824 	bl	8003334 <HAL_RCC_GetSysClockFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	490b      	ldr	r1, [pc, #44]	; (8003328 <HAL_RCC_ClockConfig+0x1f4>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	4a09      	ldr	r2, [pc, #36]	; (800332c <HAL_RCC_ClockConfig+0x1f8>)
 8003306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <HAL_RCC_ClockConfig+0x1fc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f9d9 	bl	80006c4 <HAL_InitTick>
 8003312:	4603      	mov	r3, r0
 8003314:	72fb      	strb	r3, [r7, #11]

  return status;
 8003316:	7afb      	ldrb	r3, [r7, #11]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40022000 	.word	0x40022000
 8003324:	40021000 	.word	0x40021000
 8003328:	08009548 	.word	0x08009548
 800332c:	20000000 	.word	0x20000000
 8003330:	20000004 	.word	0x20000004

08003334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003342:	4b3e      	ldr	r3, [pc, #248]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334c:	4b3b      	ldr	r3, [pc, #236]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d005      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x34>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d11e      	bne.n	80033a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003368:	4b34      	ldr	r3, [pc, #208]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d107      	bne.n	8003384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003374:	4b31      	ldr	r3, [pc, #196]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e005      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003390:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10d      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033ac:	4b25      	ldr	r3, [pc, #148]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	e004      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0c      	cmp	r3, #12
 80033c0:	d134      	bne.n	800342c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d003      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0xa6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xac>
 80033d8:	e005      	b.n	80033e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_RCC_GetSysClockFreq+0x110>)
 80033dc:	617b      	str	r3, [r7, #20]
      break;
 80033de:	e005      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_GetSysClockFreq+0x114>)
 80033e2:	617b      	str	r3, [r7, #20]
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	617b      	str	r3, [r7, #20]
      break;
 80033ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	3301      	adds	r3, #1
 80033f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	fb03 f202 	mul.w	r2, r3, r2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	0e5b      	lsrs	r3, r3, #25
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	3301      	adds	r3, #1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800342c:	69bb      	ldr	r3, [r7, #24]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	08009558 	.word	0x08009558
 8003444:	00f42400 	.word	0x00f42400
 8003448:	007a1200 	.word	0x007a1200

0800344c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003458:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003464:	f7ff f9de 	bl	8002824 <HAL_PWREx_GetVoltageRange>
 8003468:	6178      	str	r0, [r7, #20]
 800346a:	e014      	b.n	8003496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	4a24      	ldr	r2, [pc, #144]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6593      	str	r3, [r2, #88]	; 0x58
 8003478:	4b22      	ldr	r3, [pc, #136]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003484:	f7ff f9ce 	bl	8002824 <HAL_PWREx_GetVoltageRange>
 8003488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800348a:	4b1e      	ldr	r3, [pc, #120]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d10b      	bne.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d919      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2ba0      	cmp	r3, #160	; 0xa0
 80034a8:	d902      	bls.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034aa:	2302      	movs	r3, #2
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	e013      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e010      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b80      	cmp	r3, #128	; 0x80
 80034ba:	d902      	bls.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034bc:	2303      	movs	r3, #3
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e00a      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b80      	cmp	r3, #128	; 0x80
 80034c6:	d102      	bne.n	80034ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034c8:	2302      	movs	r3, #2
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e004      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b70      	cmp	r3, #112	; 0x70
 80034d2:	d101      	bne.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d4:	2301      	movs	r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 0207 	bic.w	r2, r3, #7
 80034e0:	4909      	ldr	r1, [pc, #36]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d001      	beq.n	80034fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40021000 	.word	0x40021000
 8003508:	40022000 	.word	0x40022000

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003514:	2300      	movs	r3, #0
 8003516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003518:	2300      	movs	r3, #0
 800351a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	2b00      	cmp	r3, #0
 8003526:	d031      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003530:	d01a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003536:	d814      	bhi.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d009      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800353c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003540:	d10f      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003542:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a5c      	ldr	r2, [pc, #368]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354e:	e00c      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f9de 	bl	8003918 <RCCEx_PLLSAI1_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003560:	e003      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	74fb      	strb	r3, [r7, #19]
      break;
 8003566:	e000      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b51      	ldr	r3, [pc, #324]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	494e      	ldr	r1, [pc, #312]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003586:	e001      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 809e 	beq.w	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800359e:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035ae:	2300      	movs	r3, #0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4a3f      	ldr	r2, [pc, #252]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
 80035c0:	4b3d      	ldr	r3, [pc, #244]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d0:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a39      	ldr	r2, [pc, #228]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035dc:	f7fd f8c2 	bl	8000764 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e2:	e009      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd f8be 	bl	8000764 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d902      	bls.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	74fb      	strb	r3, [r7, #19]
        break;
 80035f6:	e005      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035f8:	4b30      	ldr	r3, [pc, #192]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d15a      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800360a:	4b2b      	ldr	r3, [pc, #172]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800360c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01e      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	429a      	cmp	r2, r3
 8003624:	d019      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003630:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	4a1f      	ldr	r2, [pc, #124]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003652:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d016      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd f87e 	bl	8000764 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366a:	e00b      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd f87a 	bl	8000764 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d902      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	74fb      	strb	r3, [r7, #19]
            break;
 8003682:	e006      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0ec      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036ae:	e009      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
 80036b4:	e006      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c4:	7c7b      	ldrb	r3, [r7, #17]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d105      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b8a      	ldr	r3, [pc, #552]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4a89      	ldr	r2, [pc, #548]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00a      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036e2:	4b84      	ldr	r3, [pc, #528]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f023 0203 	bic.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4980      	ldr	r1, [pc, #512]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003704:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 020c 	bic.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	4978      	ldr	r1, [pc, #480]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003726:	4b73      	ldr	r3, [pc, #460]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	496f      	ldr	r1, [pc, #444]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	4967      	ldr	r1, [pc, #412]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00a      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800376a:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	495e      	ldr	r1, [pc, #376]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800378c:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	4956      	ldr	r1, [pc, #344]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ae:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d028      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d0:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	4945      	ldr	r1, [pc, #276]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ee:	d106      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f0:	4b40      	ldr	r3, [pc, #256]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037fa:	60d3      	str	r3, [r2, #12]
 80037fc:	e011      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003806:	d10c      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f882 	bl	8003918 <RCCEx_PLLSAI1_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800381e:	7cfb      	ldrb	r3, [r7, #19]
 8003820:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d028      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	492d      	ldr	r1, [pc, #180]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384c:	d106      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800384e:	4b29      	ldr	r3, [pc, #164]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003858:	60d3      	str	r3, [r2, #12]
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f853 	bl	8003918 <RCCEx_PLLSAI1_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01c      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389a:	4916      	ldr	r1, [pc, #88]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038aa:	d10c      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f830 	bl	8003918 <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	4904      	ldr	r1, [pc, #16]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000

08003918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003926:	4b74      	ldr	r3, [pc, #464]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003932:	4b71      	ldr	r3, [pc, #452]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0203 	and.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d10d      	bne.n	800395e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
       ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800394a:	4b6b      	ldr	r3, [pc, #428]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
       ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d047      	beq.n	80039ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e044      	b.n	80039ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d018      	beq.n	800399e <RCCEx_PLLSAI1_Config+0x86>
 800396c:	2b03      	cmp	r3, #3
 800396e:	d825      	bhi.n	80039bc <RCCEx_PLLSAI1_Config+0xa4>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d002      	beq.n	800397a <RCCEx_PLLSAI1_Config+0x62>
 8003974:	2b02      	cmp	r3, #2
 8003976:	d009      	beq.n	800398c <RCCEx_PLLSAI1_Config+0x74>
 8003978:	e020      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800397a:	4b5f      	ldr	r3, [pc, #380]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11d      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398a:	e01a      	b.n	80039c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800398c:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003994:	2b00      	cmp	r3, #0
 8003996:	d116      	bne.n	80039c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399c:	e013      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800399e:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10f      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039aa:	4b53      	ldr	r3, [pc, #332]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ba:	e006      	b.n	80039ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e004      	b.n	80039cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039c2:	bf00      	nop
 80039c4:	e002      	b.n	80039cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10d      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	430b      	orrs	r3, r1
 80039e8:	4943      	ldr	r1, [pc, #268]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d17c      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039f4:	4b40      	ldr	r3, [pc, #256]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3f      	ldr	r2, [pc, #252]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a00:	f7fc feb0 	bl	8000764 <HAL_GetTick>
 8003a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a06:	e009      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a08:	f7fc feac 	bl	8000764 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d902      	bls.n	8003a1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	73fb      	strb	r3, [r7, #15]
        break;
 8003a1a:	e005      	b.n	8003a28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a1c:	4b36      	ldr	r3, [pc, #216]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1ef      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d15f      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d110      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a34:	4b30      	ldr	r3, [pc, #192]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	0211      	lsls	r1, r2, #8
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	492a      	ldr	r1, [pc, #168]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]
 8003a54:	e027      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d112      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5c:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
 8003a6c:	0211      	lsls	r1, r2, #8
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6912      	ldr	r2, [r2, #16]
 8003a72:	0852      	lsrs	r2, r2, #1
 8003a74:	3a01      	subs	r2, #1
 8003a76:	0552      	lsls	r2, r2, #21
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	491f      	ldr	r1, [pc, #124]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	610b      	str	r3, [r1, #16]
 8003a80:	e011      	b.n	8003aa6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6892      	ldr	r2, [r2, #8]
 8003a92:	0211      	lsls	r1, r2, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6952      	ldr	r2, [r2, #20]
 8003a98:	0852      	lsrs	r2, r2, #1
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	0652      	lsls	r2, r2, #25
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	4915      	ldr	r1, [pc, #84]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ab0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fc fe57 	bl	8000764 <HAL_GetTick>
 8003ab6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab8:	e009      	b.n	8003ace <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aba:	f7fc fe53 	bl	8000764 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d902      	bls.n	8003ace <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	73fb      	strb	r3, [r7, #15]
          break;
 8003acc:	e005      	b.n	8003ada <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ef      	beq.n	8003aba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4903      	ldr	r1, [pc, #12]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40021000 	.word	0x40021000

08003afc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003afc:	b084      	sub	sp, #16
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	f107 0014 	add.w	r0, r7, #20
 8003b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	b004      	add	sp, #16
 8003b1c:	4770      	bx	lr

08003b1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b2e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003b32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b54:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003b58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	f107 0014 	add.w	r0, r7, #20
 8003baa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	b004      	add	sp, #16
 8003bdc:	4770      	bx	lr
	...

08003be0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b09d      	sub	sp, #116	; 0x74
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	78db      	ldrb	r3, [r3, #3]
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d81f      	bhi.n	8003c52 <USB_ActivateEndpoint+0x72>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <USB_ActivateEndpoint+0x38>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c5b 	.word	0x08003c5b
 8003c24:	08003c37 	.word	0x08003c37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003c28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c34:	e012      	b.n	8003c5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003c36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c3a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003c3e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c42:	e00b      	b.n	8003c5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003c44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c4c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003c50:	e004      	b.n	8003c5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003c58:	e000      	b.n	8003c5c <USB_ActivateEndpoint+0x7c>
      break;
 8003c5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	b21b      	sxth	r3, r3
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	b21a      	sxth	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b21b      	sxth	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	7b1b      	ldrb	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 816e 	bne.w	8003fae <USB_ActivateEndpoint+0x3ce>
  {
    if (ep->is_in != 0U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8084 	beq.w	8003de4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	00da      	lsls	r2, r3, #3
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	88db      	ldrh	r3, [r3, #6]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	827b      	strh	r3, [r7, #18]
 8003d1e:	8a7b      	ldrh	r3, [r7, #18]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d01b      	beq.n	8003d60 <USB_ActivateEndpoint+0x180>
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	823b      	strh	r3, [r7, #16]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	441a      	add	r2, r3
 8003d4a:	8a3b      	ldrh	r3, [r7, #16]
 8003d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	78db      	ldrb	r3, [r3, #3]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d020      	beq.n	8003daa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7e:	81bb      	strh	r3, [r7, #12]
 8003d80:	89bb      	ldrh	r3, [r7, #12]
 8003d82:	f083 0320 	eor.w	r3, r3, #32
 8003d86:	81bb      	strh	r3, [r7, #12]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	441a      	add	r2, r3
 8003d92:	89bb      	ldrh	r3, [r7, #12]
 8003d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	8013      	strh	r3, [r2, #0]
 8003da8:	e2cb      	b.n	8004342 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc0:	81fb      	strh	r3, [r7, #14]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	89fb      	ldrh	r3, [r7, #14]
 8003dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8013      	strh	r3, [r2, #0]
 8003de2:	e2ae      	b.n	8004342 <USB_ActivateEndpoint+0x762>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	4413      	add	r3, r2
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	00da      	lsls	r2, r3, #3
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	4413      	add	r3, r2
 8003e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	88db      	ldrh	r3, [r3, #6]
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e16:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	461a      	mov	r2, r3
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	4413      	add	r3, r2
 8003e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	00da      	lsls	r2, r3, #3
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	4413      	add	r3, r2
 8003e36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b3e      	cmp	r3, #62	; 0x3e
 8003e42:	d918      	bls.n	8003e76 <USB_ActivateEndpoint+0x296>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <USB_ActivateEndpoint+0x27e>
 8003e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	029b      	lsls	r3, r3, #10
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e029      	b.n	8003eca <USB_ActivateEndpoint+0x2ea>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d112      	bne.n	8003ea4 <USB_ActivateEndpoint+0x2c4>
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	801a      	strh	r2, [r3, #0]
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	801a      	strh	r2, [r3, #0]
 8003ea2:	e012      	b.n	8003eca <USB_ActivateEndpoint+0x2ea>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <USB_ActivateEndpoint+0x2de>
 8003eb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eba:	3301      	adds	r3, #1
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01b      	beq.n	8003f1a <USB_ActivateEndpoint+0x33a>
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef8:	843b      	strh	r3, [r7, #32]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	441a      	add	r2, r3
 8003f04:	8c3b      	ldrh	r3, [r7, #32]
 8003f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d124      	bne.n	8003f6c <USB_ActivateEndpoint+0x38c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f38:	83bb      	strh	r3, [r7, #28]
 8003f3a:	8bbb      	ldrh	r3, [r7, #28]
 8003f3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f40:	83bb      	strh	r3, [r7, #28]
 8003f42:	8bbb      	ldrh	r3, [r7, #28]
 8003f44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f48:	83bb      	strh	r3, [r7, #28]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	441a      	add	r2, r3
 8003f54:	8bbb      	ldrh	r3, [r7, #28]
 8003f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8013      	strh	r3, [r2, #0]
 8003f6a:	e1ea      	b.n	8004342 <USB_ActivateEndpoint+0x762>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	83fb      	strh	r3, [r7, #30]
 8003f84:	8bfb      	ldrh	r3, [r7, #30]
 8003f86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f8a:	83fb      	strh	r3, [r7, #30]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	8bfb      	ldrh	r3, [r7, #30]
 8003f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
 8003fac:	e1c9      	b.n	8004342 <USB_ActivateEndpoint+0x762>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d11e      	bne.n	8003ff4 <USB_ActivateEndpoint+0x414>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fe6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	8013      	strh	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <USB_ActivateEndpoint+0x450>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	441a      	add	r2, r3
 8004018:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800401c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800402c:	b29b      	uxth	r3, r3
 800402e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004040:	4413      	add	r3, r2
 8004042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	00da      	lsls	r2, r3, #3
 800404a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800404c:	4413      	add	r3, r2
 800404e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	891b      	ldrh	r3, [r3, #8]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	657b      	str	r3, [r7, #84]	; 0x54
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	461a      	mov	r2, r3
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	4413      	add	r3, r2
 8004076:	657b      	str	r3, [r7, #84]	; 0x54
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	00da      	lsls	r2, r3, #3
 800407e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004080:	4413      	add	r3, r2
 8004082:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004086:	653b      	str	r3, [r7, #80]	; 0x50
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	895b      	ldrh	r3, [r3, #10]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	b29b      	uxth	r3, r3
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004096:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 8093 	bne.w	80041c8 <USB_ActivateEndpoint+0x5e8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80040b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01b      	beq.n	80040f6 <USB_ActivateEndpoint+0x516>
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80040e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004104:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01b      	beq.n	8004146 <USB_ActivateEndpoint+0x566>
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	441a      	add	r2, r3
 8004130:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800413a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004142:	b29b      	uxth	r3, r3
 8004144:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	b29b      	uxth	r3, r3
 8004154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	873b      	strh	r3, [r7, #56]	; 0x38
 800415e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004160:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004164:	873b      	strh	r3, [r7, #56]	; 0x38
 8004166:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004168:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800416c:	873b      	strh	r3, [r7, #56]	; 0x38
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	441a      	add	r2, r3
 80041b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8013      	strh	r3, [r2, #0]
 80041c6:	e0bc      	b.n	8004342 <USB_ActivateEndpoint+0x762>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80041d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01d      	beq.n	8004220 <USB_ActivateEndpoint+0x640>
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800420c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421c:	b29b      	uxth	r3, r3
 800421e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01d      	beq.n	8004278 <USB_ActivateEndpoint+0x698>
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	b29b      	uxth	r3, r3
 800424a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004270:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	78db      	ldrb	r3, [r3, #3]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d024      	beq.n	80042ca <USB_ActivateEndpoint+0x6ea>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004296:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800429a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800429e:	f083 0320 	eor.w	r3, r3, #32
 80042a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80042b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
 80042c8:	e01d      	b.n	8004306 <USB_ActivateEndpoint+0x726>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004302:	b29b      	uxth	r3, r3
 8004304:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800432e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433e:	b29b      	uxth	r3, r3
 8004340:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004342:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004346:	4618      	mov	r0, r3
 8004348:	3774      	adds	r7, #116	; 0x74
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004354:	b480      	push	{r7}
 8004356:	b08d      	sub	sp, #52	; 0x34
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	7b1b      	ldrb	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 808e 	bne.w	8004484 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d044      	beq.n	80043fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	81bb      	strh	r3, [r7, #12]
 800437e:	89bb      	ldrh	r3, [r7, #12]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <USB_DeactivateEndpoint+0x6c>
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	817b      	strh	r3, [r7, #10]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	897b      	ldrh	r3, [r7, #10]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d6:	813b      	strh	r3, [r7, #8]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	893b      	ldrh	r3, [r7, #8]
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]
 80043f8:	e192      	b.n	8004720 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	827b      	strh	r3, [r7, #18]
 8004408:	8a7b      	ldrh	r3, [r7, #18]
 800440a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d01b      	beq.n	800444a <USB_DeactivateEndpoint+0xf6>
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	823b      	strh	r3, [r7, #16]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8a3b      	ldrh	r3, [r7, #16]
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004460:	81fb      	strh	r3, [r7, #14]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	89fb      	ldrh	r3, [r7, #14]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
 8004482:	e14d      	b.n	8004720 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f040 80a5 	bne.w	80045d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	843b      	strh	r3, [r7, #32]
 800449c:	8c3b      	ldrh	r3, [r7, #32]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01b      	beq.n	80044de <USB_DeactivateEndpoint+0x18a>
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	83fb      	strh	r3, [r7, #30]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	441a      	add	r2, r3
 80044c8:	8bfb      	ldrh	r3, [r7, #30]
 80044ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044da:	b29b      	uxth	r3, r3
 80044dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	83bb      	strh	r3, [r7, #28]
 80044ec:	8bbb      	ldrh	r3, [r7, #28]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01b      	beq.n	800452e <USB_DeactivateEndpoint+0x1da>
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	837b      	strh	r3, [r7, #26]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	8b7b      	ldrh	r3, [r7, #26]
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004544:	833b      	strh	r3, [r7, #24]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8b3b      	ldrh	r3, [r7, #24]
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	82fb      	strh	r3, [r7, #22]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8afb      	ldrh	r3, [r7, #22]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b4:	82bb      	strh	r3, [r7, #20]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	441a      	add	r2, r3
 80045c0:	8abb      	ldrh	r3, [r7, #20]
 80045c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8013      	strh	r3, [r2, #0]
 80045d6:	e0a3      	b.n	8004720 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80045e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <USB_DeactivateEndpoint+0x2d4>
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	b29b      	uxth	r3, r3
 8004626:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01b      	beq.n	8004678 <USB_DeactivateEndpoint+0x324>
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004656:	853b      	strh	r3, [r7, #40]	; 0x28
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	b29b      	uxth	r3, r3
 8004686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800469c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b29b      	uxth	r3, r3
 80046be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800470c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	b29b      	uxth	r3, r3
 800471e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3734      	adds	r7, #52	; 0x34
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b0c2      	sub	sp, #264	; 0x108
 8004732:	af00      	add	r7, sp, #0
 8004734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800473c:	6018      	str	r0, [r3, #0]
 800473e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004746:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b01      	cmp	r3, #1
 8004756:	f040 867b 	bne.w	8005450 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800475a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	429a      	cmp	r2, r3
 8004774:	d908      	bls.n	8004788 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004786:	e007      	b.n	8004798 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800478c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	7b1b      	ldrb	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d13a      	bne.n	800481e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80047a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6959      	ldr	r1, [r3, #20]
 80047b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	88da      	ldrh	r2, [r3, #6]
 80047c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80047ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80047ce:	6800      	ldr	r0, [r0, #0]
 80047d0:	f001 fc3e 	bl	8006050 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80047d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4413      	add	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	00da      	lsls	r2, r3, #3
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4413      	add	r3, r2
 800480a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	f000 bde3 	b.w	80053e4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800481e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b02      	cmp	r3, #2
 800482c:	f040 843a 	bne.w	80050a4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	429a      	cmp	r2, r3
 800484a:	f240 83b7 	bls.w	8004fbc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800484e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800485c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004874:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80048aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a1a      	ldr	r2, [r3, #32]
 80048b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80048c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 81b3 	beq.w	8004c56 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
 80048fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	785b      	ldrb	r3, [r3, #1]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d16d      	bne.n	80049e8 <USB_EPStartXfer+0x2ba>
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800491c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004926:	b29b      	uxth	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	4413      	add	r3, r2
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	00da      	lsls	r2, r3, #3
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	4413      	add	r3, r2
 8004942:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800494c:	2b3e      	cmp	r3, #62	; 0x3e
 800494e:	d91c      	bls.n	800498a <USB_EPStartXfer+0x25c>
 8004950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800495a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <USB_EPStartXfer+0x242>
 8004966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800496a:	3b01      	subs	r3, #1
 800496c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004970:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004974:	b29b      	uxth	r3, r3
 8004976:	029b      	lsls	r3, r3, #10
 8004978:	b29b      	uxth	r3, r3
 800497a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004982:	b29a      	uxth	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	801a      	strh	r2, [r3, #0]
 8004988:	e053      	b.n	8004a32 <USB_EPStartXfer+0x304>
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498e:	2b00      	cmp	r3, #0
 8004990:	d112      	bne.n	80049b8 <USB_EPStartXfer+0x28a>
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800499c:	b29a      	uxth	r2, r3
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	801a      	strh	r2, [r3, #0]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e03c      	b.n	8004a32 <USB_EPStartXfer+0x304>
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	085b      	lsrs	r3, r3, #1
 80049be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <USB_EPStartXfer+0x2aa>
 80049ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049d2:	3301      	adds	r3, #1
 80049d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80049dc:	b29b      	uxth	r3, r3
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e024      	b.n	8004a32 <USB_EPStartXfer+0x304>
 80049e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d11c      	bne.n	8004a32 <USB_EPStartXfer+0x304>
 80049f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	4413      	add	r3, r2
 8004a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00da      	lsls	r2, r3, #3
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	895b      	ldrh	r3, [r3, #10]
 8004a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6959      	ldr	r1, [r3, #20]
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004a58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004a5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004a60:	6800      	ldr	r0, [r0, #0]
 8004a62:	f001 faf5 	bl	8006050 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a76:	441a      	add	r2, r3
 8004a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d90f      	bls.n	8004ac0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a1a      	ldr	r2, [r3, #32]
 8004aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ab0:	1ad2      	subs	r2, r2, r3
 8004ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	621a      	str	r2, [r3, #32]
 8004abe:	e00e      	b.n	8004ade <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d16d      	bne.n	8004bca <USB_EPStartXfer+0x49c>
 8004aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	4413      	add	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	00da      	lsls	r2, r3, #3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4413      	add	r3, r2
 8004b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004b30:	d91c      	bls.n	8004b6c <USB_EPStartXfer+0x43e>
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <USB_EPStartXfer+0x424>
 8004b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	029b      	lsls	r3, r3, #10
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	e059      	b.n	8004c20 <USB_EPStartXfer+0x4f2>
 8004b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d112      	bne.n	8004b9a <USB_EPStartXfer+0x46c>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e042      	b.n	8004c20 <USB_EPStartXfer+0x4f2>
 8004b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <USB_EPStartXfer+0x48c>
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	029b      	lsls	r3, r3, #10
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	801a      	strh	r2, [r3, #0]
 8004bc8:	e02a      	b.n	8004c20 <USB_EPStartXfer+0x4f2>
 8004bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d122      	bne.n	8004c20 <USB_EPStartXfer+0x4f2>
 8004bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	623b      	str	r3, [r7, #32]
 8004be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	623b      	str	r3, [r7, #32]
 8004bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	00da      	lsls	r2, r3, #3
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	891b      	ldrh	r3, [r3, #8]
 8004c2c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6959      	ldr	r1, [r3, #20]
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004c46:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004c4a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004c4e:	6800      	ldr	r0, [r0, #0]
 8004c50:	f001 f9fe 	bl	8006050 <USB_WritePMA>
 8004c54:	e3c6      	b.n	80053e4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d16d      	bne.n	8004d42 <USB_EPStartXfer+0x614>
 8004c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c86:	4413      	add	r3, r2
 8004c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	00da      	lsls	r2, r3, #3
 8004c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ca8:	d91c      	bls.n	8004ce4 <USB_EPStartXfer+0x5b6>
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <USB_EPStartXfer+0x59c>
 8004cc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e059      	b.n	8004d98 <USB_EPStartXfer+0x66a>
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d112      	bne.n	8004d12 <USB_EPStartXfer+0x5e4>
 8004cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	e042      	b.n	8004d98 <USB_EPStartXfer+0x66a>
 8004d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <USB_EPStartXfer+0x604>
 8004d28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	e02a      	b.n	8004d98 <USB_EPStartXfer+0x66a>
 8004d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d122      	bne.n	8004d98 <USB_EPStartXfer+0x66a>
 8004d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	4413      	add	r3, r2
 8004d74:	653b      	str	r3, [r7, #80]	; 0x50
 8004d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	00da      	lsls	r2, r3, #3
 8004d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d86:	4413      	add	r3, r2
 8004d88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	891b      	ldrh	r3, [r3, #8]
 8004da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6959      	ldr	r1, [r3, #20]
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004dbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004dc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	f001 f942 	bl	8006050 <USB_WritePMA>
            ep->xfer_buff += len;
 8004dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ddc:	441a      	add	r2, r3
 8004dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d90f      	bls.n	8004e26 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8004e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e16:	1ad2      	subs	r2, r2, r3
 8004e18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	621a      	str	r2, [r3, #32]
 8004e24:	e00e      	b.n	8004e44 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2200      	movs	r2, #0
 8004e42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8004e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d16d      	bne.n	8004f3c <USB_EPStartXfer+0x80e>
 8004e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e80:	4413      	add	r3, r2
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	00da      	lsls	r2, r3, #3
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	4413      	add	r3, r2
 8004e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea2:	d91c      	bls.n	8004ede <USB_EPStartXfer+0x7b0>
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <USB_EPStartXfer+0x796>
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	029b      	lsls	r3, r3, #10
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	e053      	b.n	8004f86 <USB_EPStartXfer+0x858>
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d112      	bne.n	8004f0c <USB_EPStartXfer+0x7de>
 8004ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	e03c      	b.n	8004f86 <USB_EPStartXfer+0x858>
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f10:	085b      	lsrs	r3, r3, #1
 8004f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <USB_EPStartXfer+0x7fe>
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f26:	3301      	adds	r3, #1
 8004f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	e024      	b.n	8004f86 <USB_EPStartXfer+0x858>
 8004f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d11c      	bne.n	8004f86 <USB_EPStartXfer+0x858>
 8004f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f60:	4413      	add	r3, r2
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
 8004f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	00da      	lsls	r2, r3, #3
 8004f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f74:	4413      	add	r3, r2
 8004f76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	895b      	ldrh	r3, [r3, #10]
 8004f92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6959      	ldr	r1, [r3, #20]
 8004fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f001 f84b 	bl	8006050 <USB_WritePMA>
 8004fba:	e213      	b.n	80053e4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005048:	4413      	add	r3, r2
 800504a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800504c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	00da      	lsls	r2, r3, #3
 800505a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800505c:	4413      	add	r3, r2
 800505e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005062:	65bb      	str	r3, [r7, #88]	; 0x58
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005068:	b29a      	uxth	r2, r3
 800506a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800506c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800506e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	891b      	ldrh	r3, [r3, #8]
 800507a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6959      	ldr	r1, [r3, #20]
 800508a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800508e:	b29b      	uxth	r3, r3
 8005090:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005094:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005098:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800509c:	6800      	ldr	r0, [r0, #0]
 800509e:	f000 ffd7 	bl	8006050 <USB_WritePMA>
 80050a2:	e19f      	b.n	80053e4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80050a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80bc 	beq.w	8005262 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	673b      	str	r3, [r7, #112]	; 0x70
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	785b      	ldrb	r3, [r3, #1]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d16d      	bne.n	80051e2 <USB_EPStartXfer+0xab4>
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	66bb      	str	r3, [r7, #104]	; 0x68
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005120:	b29b      	uxth	r3, r3
 8005122:	461a      	mov	r2, r3
 8005124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005126:	4413      	add	r3, r2
 8005128:	66bb      	str	r3, [r7, #104]	; 0x68
 800512a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	00da      	lsls	r2, r3, #3
 8005138:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513a:	4413      	add	r3, r2
 800513c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005140:	667b      	str	r3, [r7, #100]	; 0x64
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005146:	2b3e      	cmp	r3, #62	; 0x3e
 8005148:	d91c      	bls.n	8005184 <USB_EPStartXfer+0xa56>
 800514a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <USB_EPStartXfer+0xa3c>
 8005160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005164:	3b01      	subs	r3, #1
 8005166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800516a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517c:	b29a      	uxth	r2, r3
 800517e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e053      	b.n	800522c <USB_EPStartXfer+0xafe>
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005188:	2b00      	cmp	r3, #0
 800518a:	d112      	bne.n	80051b2 <USB_EPStartXfer+0xa84>
 800518c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005196:	b29a      	uxth	r2, r3
 8005198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ae:	801a      	strh	r2, [r3, #0]
 80051b0:	e03c      	b.n	800522c <USB_EPStartXfer+0xafe>
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <USB_EPStartXfer+0xaa4>
 80051c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051cc:	3301      	adds	r3, #1
 80051ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80051d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e024      	b.n	800522c <USB_EPStartXfer+0xafe>
 80051e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11c      	bne.n	800522c <USB_EPStartXfer+0xafe>
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005206:	4413      	add	r3, r2
 8005208:	673b      	str	r3, [r7, #112]	; 0x70
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	00da      	lsls	r2, r3, #3
 8005218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800521a:	4413      	add	r3, r2
 800521c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005220:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	b29a      	uxth	r2, r3
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800522c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	895b      	ldrh	r3, [r3, #10]
 8005238:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6959      	ldr	r1, [r3, #20]
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524c:	b29b      	uxth	r3, r3
 800524e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005252:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005256:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	f000 fef8 	bl	8006050 <USB_WritePMA>
 8005260:	e0c0      	b.n	80053e4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d16d      	bne.n	800534e <USB_EPStartXfer+0xc20>
 8005272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800527e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005292:	4413      	add	r3, r2
 8005294:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	00da      	lsls	r2, r3, #3
 80052a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b2:	2b3e      	cmp	r3, #62	; 0x3e
 80052b4:	d91c      	bls.n	80052f0 <USB_EPStartXfer+0xbc2>
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <USB_EPStartXfer+0xba8>
 80052cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052d0:	3b01      	subs	r3, #1
 80052d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80052d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80052da:	b29b      	uxth	r3, r3
 80052dc:	029b      	lsls	r3, r3, #10
 80052de:	b29b      	uxth	r3, r3
 80052e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	e05f      	b.n	80053b0 <USB_EPStartXfer+0xc82>
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d112      	bne.n	800531e <USB_EPStartXfer+0xbf0>
 80052f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005302:	b29a      	uxth	r2, r3
 8005304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005316:	b29a      	uxth	r2, r3
 8005318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e048      	b.n	80053b0 <USB_EPStartXfer+0xc82>
 800531e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <USB_EPStartXfer+0xc10>
 8005334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005338:	3301      	adds	r3, #1
 800533a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800533e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005342:	b29b      	uxth	r3, r3
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	b29a      	uxth	r2, r3
 8005348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e030      	b.n	80053b0 <USB_EPStartXfer+0xc82>
 800534e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d128      	bne.n	80053b0 <USB_EPStartXfer+0xc82>
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800536c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537a:	b29b      	uxth	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005382:	4413      	add	r3, r2
 8005384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	00da      	lsls	r2, r3, #3
 8005396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800539a:	4413      	add	r3, r2
 800539c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	891b      	ldrh	r3, [r3, #8]
 80053bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6959      	ldr	r1, [r3, #20]
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053de:	6800      	ldr	r0, [r0, #0]
 80053e0:	f000 fe36 	bl	8006050 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80053e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540a:	817b      	strh	r3, [r7, #10]
 800540c:	897b      	ldrh	r3, [r7, #10]
 800540e:	f083 0310 	eor.w	r3, r3, #16
 8005412:	817b      	strh	r3, [r7, #10]
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	f083 0320 	eor.w	r3, r3, #32
 800541a:	817b      	strh	r3, [r7, #10]
 800541c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800543c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	b29b      	uxth	r3, r3
 800544a:	8013      	strh	r3, [r2, #0]
 800544c:	f000 bc9f 	b.w	8005d8e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	7b1b      	ldrb	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	f040 80ae 	bne.w	80055be <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	429a      	cmp	r2, r3
 800547c:	d917      	bls.n	80054ae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800547e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800548e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	619a      	str	r2, [r3, #24]
 80054ac:	e00e      	b.n	80054cc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2200      	movs	r2, #0
 80054ca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054f0:	4413      	add	r3, r2
 80054f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	00da      	lsls	r2, r3, #3
 8005504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005508:	4413      	add	r3, r2
 800550a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800550e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005516:	2b3e      	cmp	r3, #62	; 0x3e
 8005518:	d91d      	bls.n	8005556 <USB_EPStartXfer+0xe28>
 800551a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	f003 031f 	and.w	r3, r3, #31
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <USB_EPStartXfer+0xe0c>
 8005530:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005534:	3b01      	subs	r3, #1
 8005536:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800553a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800553e:	b29b      	uxth	r3, r3
 8005540:	029b      	lsls	r3, r3, #10
 8005542:	b29b      	uxth	r3, r3
 8005544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554c:	b29a      	uxth	r2, r3
 800554e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e3e1      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555a:	2b00      	cmp	r3, #0
 800555c:	d116      	bne.n	800558c <USB_EPStartXfer+0xe5e>
 800555e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005570:	801a      	strh	r2, [r3, #0]
 8005572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e3c6      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <USB_EPStartXfer+0xe7e>
 80055a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055a6:	3301      	adds	r3, #1
 80055a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055ba:	801a      	strh	r2, [r3, #0]
 80055bc:	e3ad      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80055be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f040 8200 	bne.w	80059d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f040 8091 	bne.w	8005704 <USB_EPStartXfer+0xfd6>
 80055e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80055f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	461a      	mov	r2, r3
 8005602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005606:	4413      	add	r3, r2
 8005608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800560c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	00da      	lsls	r2, r3, #3
 800561a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800561e:	4413      	add	r3, r2
 8005620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b3e      	cmp	r3, #62	; 0x3e
 8005636:	d925      	bls.n	8005684 <USB_EPStartXfer+0xf56>
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800564a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800564e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <USB_EPStartXfer+0xf3a>
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	3b01      	subs	r3, #1
 8005664:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566c:	b29b      	uxth	r3, r3
 800566e:	029b      	lsls	r3, r3, #10
 8005670:	b29b      	uxth	r3, r3
 8005672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e074      	b.n	800576e <USB_EPStartXfer+0x1040>
 8005684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d116      	bne.n	80056c2 <USB_EPStartXfer+0xf94>
 8005694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80056be:	801a      	strh	r2, [r3, #0]
 80056c0:	e055      	b.n	800576e <USB_EPStartXfer+0x1040>
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	085b      	lsrs	r3, r3, #1
 80056d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <USB_EPStartXfer+0xfc4>
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	3301      	adds	r3, #1
 80056ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	029b      	lsls	r3, r3, #10
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e034      	b.n	800576e <USB_EPStartXfer+0x1040>
 8005704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	785b      	ldrb	r3, [r3, #1]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d12c      	bne.n	800576e <USB_EPStartXfer+0x1040>
 8005714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005730:	b29b      	uxth	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005738:	4413      	add	r3, r2
 800573a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800573e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	00da      	lsls	r2, r3, #3
 800574c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005750:	4413      	add	r3, r2
 8005752:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800575a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	b29a      	uxth	r2, r3
 8005768:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800576c:	801a      	strh	r2, [r3, #0]
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800577c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 8091 	bne.w	80058b0 <USB_EPStartXfer+0x1182>
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800579c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057b2:	4413      	add	r3, r2
 80057b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	00da      	lsls	r2, r3, #3
 80057c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057ca:	4413      	add	r3, r2
 80057cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b3e      	cmp	r3, #62	; 0x3e
 80057e2:	d925      	bls.n	8005830 <USB_EPStartXfer+0x1102>
 80057e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f003 031f 	and.w	r3, r3, #31
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <USB_EPStartXfer+0x10e6>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580e:	3b01      	subs	r3, #1
 8005810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005818:	b29b      	uxth	r3, r3
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	e06d      	b.n	800590c <USB_EPStartXfer+0x11de>
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d116      	bne.n	800586e <USB_EPStartXfer+0x1140>
 8005840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584c:	b29a      	uxth	r2, r3
 800584e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005864:	b29a      	uxth	r2, r3
 8005866:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800586a:	801a      	strh	r2, [r3, #0]
 800586c:	e04e      	b.n	800590c <USB_EPStartXfer+0x11de>
 800586e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	085b      	lsrs	r3, r3, #1
 800587c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <USB_EPStartXfer+0x1170>
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005898:	3301      	adds	r3, #1
 800589a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800589e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	029b      	lsls	r3, r3, #10
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e02d      	b.n	800590c <USB_EPStartXfer+0x11de>
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d125      	bne.n	800590c <USB_EPStartXfer+0x11de>
 80058c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058d6:	4413      	add	r3, r2
 80058d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	00da      	lsls	r2, r3, #3
 80058ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058ee:	4413      	add	r3, r2
 80058f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	b29a      	uxth	r2, r3
 8005906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800590a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800590c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 81fe 	beq.w	8005d1a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800591e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800593e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <USB_EPStartXfer+0x1228>
 800594a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10d      	bne.n	8005972 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005956:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800595e:	2b00      	cmp	r3, #0
 8005960:	f040 81db 	bne.w	8005d1a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005964:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	f040 81d4 	bne.w	8005d1a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800599c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80059ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	8013      	strh	r3, [r2, #0]
 80059ce:	e1a4      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	78db      	ldrb	r3, [r3, #3]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f040 819a 	bne.w	8005d16 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d917      	bls.n	8005a2e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 80059fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	619a      	str	r2, [r3, #24]
 8005a2c:	e00e      	b.n	8005a4c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d178      	bne.n	8005b4e <USB_EPStartXfer+0x1420>
 8005a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a80:	4413      	add	r3, r2
 8005a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	00da      	lsls	r2, r3, #3
 8005a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa8:	d91d      	bls.n	8005ae6 <USB_EPStartXfer+0x13b8>
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <USB_EPStartXfer+0x139c>
 8005ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e064      	b.n	8005bb0 <USB_EPStartXfer+0x1482>
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d116      	bne.n	8005b1c <USB_EPStartXfer+0x13ee>
 8005aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e049      	b.n	8005bb0 <USB_EPStartXfer+0x1482>
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <USB_EPStartXfer+0x140e>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b36:	3301      	adds	r3, #1
 8005b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	e030      	b.n	8005bb0 <USB_EPStartXfer+0x1482>
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d128      	bne.n	8005bb0 <USB_EPStartXfer+0x1482>
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b82:	4413      	add	r3, r2
 8005b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	00da      	lsls	r2, r3, #3
 8005b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d178      	bne.n	8005cc0 <USB_EPStartXfer+0x1592>
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	00da      	lsls	r2, r3, #3
 8005c06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c18:	2b3e      	cmp	r3, #62	; 0x3e
 8005c1a:	d91d      	bls.n	8005c58 <USB_EPStartXfer+0x152a>
 8005c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	f003 031f 	and.w	r3, r3, #31
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <USB_EPStartXfer+0x150e>
 8005c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c36:	3b01      	subs	r3, #1
 8005c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e060      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d116      	bne.n	8005c8e <USB_EPStartXfer+0x1560>
 8005c60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	e045      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
 8005c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d004      	beq.n	8005cae <USB_EPStartXfer+0x1580>
 8005ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e02c      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d124      	bne.n	8005d1a <USB_EPStartXfer+0x15ec>
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	00da      	lsls	r2, r3, #3
 8005cfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cfe:	4413      	add	r3, r2
 8005d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d12:	801a      	strh	r2, [r3, #0]
 8005d14:	e001      	b.n	8005d1a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e03a      	b.n	8005d90 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d40:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d020      	beq.n	8005dee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc2:	81bb      	strh	r3, [r7, #12]
 8005dc4:	89bb      	ldrh	r3, [r7, #12]
 8005dc6:	f083 0310 	eor.w	r3, r3, #16
 8005dca:	81bb      	strh	r3, [r7, #12]
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	441a      	add	r2, r3
 8005dd6:	89bb      	ldrh	r3, [r7, #12]
 8005dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	8013      	strh	r3, [r2, #0]
 8005dec:	e01f      	b.n	8005e2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	81fb      	strh	r3, [r7, #14]
 8005e06:	89fb      	ldrh	r3, [r7, #14]
 8005e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e0c:	81fb      	strh	r3, [r7, #14]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	89fb      	ldrh	r3, [r7, #14]
 8005e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	7b1b      	ldrb	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 809d 	bne.w	8005f8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d04c      	beq.n	8005ef2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	823b      	strh	r3, [r7, #16]
 8005e66:	8a3b      	ldrh	r3, [r7, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <USB_EPClearStall+0x6c>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e86:	81fb      	strh	r3, [r7, #14]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	89fb      	ldrh	r3, [r7, #14]
 8005e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d06c      	beq.n	8005f8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec6:	81bb      	strh	r3, [r7, #12]
 8005ec8:	89bb      	ldrh	r3, [r7, #12]
 8005eca:	f083 0320 	eor.w	r3, r3, #32
 8005ece:	81bb      	strh	r3, [r7, #12]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	89bb      	ldrh	r3, [r7, #12]
 8005edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	8013      	strh	r3, [r2, #0]
 8005ef0:	e04b      	b.n	8005f8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	82fb      	strh	r3, [r7, #22]
 8005f00:	8afb      	ldrh	r3, [r7, #22]
 8005f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01b      	beq.n	8005f42 <USB_EPClearStall+0x106>
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f20:	82bb      	strh	r3, [r7, #20]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	441a      	add	r2, r3
 8005f2c:	8abb      	ldrh	r3, [r7, #20]
 8005f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f58:	827b      	strh	r3, [r7, #18]
 8005f5a:	8a7b      	ldrh	r3, [r7, #18]
 8005f5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f60:	827b      	strh	r3, [r7, #18]
 8005f62:	8a7b      	ldrh	r3, [r7, #18]
 8005f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f68:	827b      	strh	r3, [r7, #18]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	8a7b      	ldrh	r3, [r7, #18]
 8005f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d103      	bne.n	8005fb2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2280      	movs	r2, #128	; 0x80
 8005fae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006026:	b29b      	uxth	r3, r3
 8006028:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006050:	b480      	push	{r7}
 8006052:	b08b      	sub	sp, #44	; 0x2c
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4611      	mov	r1, r2
 800605c:	461a      	mov	r2, r3
 800605e:	460b      	mov	r3, r1
 8006060:	80fb      	strh	r3, [r7, #6]
 8006062:	4613      	mov	r3, r2
 8006064:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006066:	88bb      	ldrh	r3, [r7, #4]
 8006068:	3301      	adds	r3, #1
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006080:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	e01b      	b.n	80060c0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3301      	adds	r3, #1
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	b21a      	sxth	r2, r3
 8006098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800609c:	4313      	orrs	r3, r2
 800609e:	b21b      	sxth	r3, r3
 80060a0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	8a7a      	ldrh	r2, [r7, #18]
 80060a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	3302      	adds	r3, #2
 80060ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	3301      	adds	r3, #1
 80060b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	3b01      	subs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e0      	bne.n	8006088 <USB_WritePMA+0x38>
  }
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	372c      	adds	r7, #44	; 0x2c
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b08b      	sub	sp, #44	; 0x2c
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	4611      	mov	r1, r2
 80060e0:	461a      	mov	r2, r3
 80060e2:	460b      	mov	r3, r1
 80060e4:	80fb      	strh	r3, [r7, #6]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060ea:	88bb      	ldrh	r3, [r7, #4]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006104:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	627b      	str	r3, [r7, #36]	; 0x24
 800610a:	e018      	b.n	800613e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	3302      	adds	r3, #2
 8006118:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	b2da      	uxtb	r2, r3
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	3301      	adds	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	0a1b      	lsrs	r3, r3, #8
 800612c:	b2da      	uxtb	r2, r3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	3301      	adds	r3, #1
 8006136:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	3b01      	subs	r3, #1
 800613c:	627b      	str	r3, [r7, #36]	; 0x24
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006144:	88bb      	ldrh	r3, [r7, #4]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	701a      	strb	r2, [r3, #0]
  }
}
 8006160:	bf00      	nop
 8006162:	372c      	adds	r7, #44	; 0x2c
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006178:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800617c:	f002 f9ce 	bl	800851c <USBD_static_malloc>
 8006180:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006190:	2302      	movs	r3, #2
 8006192:	e066      	b.n	8006262 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	7c1b      	ldrb	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d119      	bne.n	80061d8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061a8:	2202      	movs	r2, #2
 80061aa:	2181      	movs	r1, #129	; 0x81
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 ffb7 	bl	8008120 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061bc:	2202      	movs	r2, #2
 80061be:	2101      	movs	r1, #1
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 ffad 	bl	8008120 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2210      	movs	r2, #16
 80061d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80061d6:	e016      	b.n	8006206 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	2202      	movs	r2, #2
 80061dc:	2181      	movs	r1, #129	; 0x81
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 ff9e 	bl	8008120 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061ea:	2340      	movs	r3, #64	; 0x40
 80061ec:	2202      	movs	r2, #2
 80061ee:	2101      	movs	r1, #1
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 ff95 	bl	8008120 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2210      	movs	r2, #16
 8006202:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006206:	2308      	movs	r3, #8
 8006208:	2203      	movs	r2, #3
 800620a:	2182      	movs	r1, #130	; 0x82
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 ff87 	bl	8008120 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7c1b      	ldrb	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d109      	bne.n	8006250 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006246:	2101      	movs	r1, #1
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 f8e5 	bl	8008418 <USBD_LL_PrepareReceive>
 800624e:	e007      	b.n	8006260 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	2101      	movs	r1, #1
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f002 f8dc 	bl	8008418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b082      	sub	sp, #8
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006276:	2181      	movs	r1, #129	; 0x81
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 ff8f 	bl	800819c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006284:	2101      	movs	r1, #1
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f001 ff88 	bl	800819c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006294:	2182      	movs	r1, #130	; 0x82
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 ff80 	bl	800819c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062c6:	4618      	mov	r0, r3
 80062c8:	f002 f936 	bl	8008538 <USBD_static_free>
    pdev->pClassData = NULL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006304:	2303      	movs	r3, #3
 8006306:	e0af      	b.n	8006468 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006310:	2b00      	cmp	r3, #0
 8006312:	d03f      	beq.n	8006394 <USBD_CDC_Setup+0xb4>
 8006314:	2b20      	cmp	r3, #32
 8006316:	f040 809f 	bne.w	8006458 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02e      	beq.n	8006380 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	b25b      	sxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	da16      	bge.n	800635a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006338:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	88d2      	ldrh	r2, [r2, #6]
 800633e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	88db      	ldrh	r3, [r3, #6]
 8006344:	2b07      	cmp	r3, #7
 8006346:	bf28      	it	cs
 8006348:	2307      	movcs	r3, #7
 800634a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	89fa      	ldrh	r2, [r7, #14]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 facf 	bl	80078f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006358:	e085      	b.n	8006466 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	785a      	ldrb	r2, [r3, #1]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	88db      	ldrh	r3, [r3, #6]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006370:	6939      	ldr	r1, [r7, #16]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	461a      	mov	r2, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 fae8 	bl	800794e <USBD_CtlPrepareRx>
      break;
 800637e:	e072      	b.n	8006466 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	7850      	ldrb	r0, [r2, #1]
 800638c:	2200      	movs	r2, #0
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	4798      	blx	r3
      break;
 8006392:	e068      	b.n	8006466 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b0b      	cmp	r3, #11
 800639a:	d852      	bhi.n	8006442 <USBD_CDC_Setup+0x162>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <USBD_CDC_Setup+0xc4>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	08006451 	.word	0x08006451
 80063ac:	08006443 	.word	0x08006443
 80063b0:	08006443 	.word	0x08006443
 80063b4:	08006443 	.word	0x08006443
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006443 	.word	0x08006443
 80063c0:	08006443 	.word	0x08006443
 80063c4:	08006443 	.word	0x08006443
 80063c8:	08006443 	.word	0x08006443
 80063cc:	080063ff 	.word	0x080063ff
 80063d0:	08006429 	.word	0x08006429
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d107      	bne.n	80063f0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063e0:	f107 030a 	add.w	r3, r7, #10
 80063e4:	2202      	movs	r2, #2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fa84 	bl	80078f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063ee:	e032      	b.n	8006456 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 fa0e 	bl	8007814 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f8:	2303      	movs	r3, #3
 80063fa:	75fb      	strb	r3, [r7, #23]
          break;
 80063fc:	e02b      	b.n	8006456 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d107      	bne.n	800641a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800640a:	f107 030d 	add.w	r3, r7, #13
 800640e:	2201      	movs	r2, #1
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fa6f 	bl	80078f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006418:	e01d      	b.n	8006456 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f9f9 	bl	8007814 <USBD_CtlError>
            ret = USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	75fb      	strb	r3, [r7, #23]
          break;
 8006426:	e016      	b.n	8006456 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d00f      	beq.n	8006454 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 f9ec 	bl	8007814 <USBD_CtlError>
            ret = USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006440:	e008      	b.n	8006454 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 f9e5 	bl	8007814 <USBD_CtlError>
          ret = USBD_FAIL;
 800644a:	2303      	movs	r3, #3
 800644c:	75fb      	strb	r3, [r7, #23]
          break;
 800644e:	e002      	b.n	8006456 <USBD_CDC_Setup+0x176>
          break;
 8006450:	bf00      	nop
 8006452:	e008      	b.n	8006466 <USBD_CDC_Setup+0x186>
          break;
 8006454:	bf00      	nop
      }
      break;
 8006456:	e006      	b.n	8006466 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 f9da 	bl	8007814 <USBD_CtlError>
      ret = USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	75fb      	strb	r3, [r7, #23]
      break;
 8006464:	bf00      	nop
  }

  return (uint8_t)ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006482:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800648e:	2303      	movs	r3, #3
 8006490:	e04f      	b.n	8006532 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006498:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800649a:	78fa      	ldrb	r2, [r7, #3]
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3318      	adds	r3, #24
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d029      	beq.n	8006504 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	440b      	add	r3, r1
 80064be:	3318      	adds	r3, #24
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	78f9      	ldrb	r1, [r7, #3]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	460b      	mov	r3, r1
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	440b      	add	r3, r1
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	4403      	add	r3, r0
 80064d0:	333c      	adds	r3, #60	; 0x3c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d110      	bne.n	8006504 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80064e2:	78fa      	ldrb	r2, [r7, #3]
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	440b      	add	r3, r1
 80064f0:	3318      	adds	r3, #24
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064f6:	78f9      	ldrb	r1, [r7, #3]
 80064f8:	2300      	movs	r3, #0
 80064fa:	2200      	movs	r2, #0
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 ff53 	bl	80083a8 <USBD_LL_Transmit>
 8006502:	e015      	b.n	8006530 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	e015      	b.n	8006588 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 ff91 	bl	8008488 <USBD_LL_GetRxDataSize>
 8006566:	4602      	mov	r2, r0
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006582:	4611      	mov	r1, r2
 8006584:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800659e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e01b      	b.n	80065e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d015      	beq.n	80065e0 <USBD_CDC_EP0_RxReady+0x50>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80065ba:	2bff      	cmp	r3, #255	; 0xff
 80065bc:	d010      	beq.n	80065e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80065cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80065d4:	b292      	uxth	r2, r2
 80065d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	22ff      	movs	r2, #255	; 0xff
 80065dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2243      	movs	r2, #67	; 0x43
 80065f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	20000094 	.word	0x20000094

0800660c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2243      	movs	r2, #67	; 0x43
 8006618:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800661a:	4b03      	ldr	r3, [pc, #12]	; (8006628 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	20000050 	.word	0x20000050

0800662c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2243      	movs	r2, #67	; 0x43
 8006638:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	200000d8 	.word	0x200000d8

0800664c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	220a      	movs	r2, #10
 8006658:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800665a:	4b03      	ldr	r3, [pc, #12]	; (8006668 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	2000000c 	.word	0x2000000c

0800666c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800667c:	2303      	movs	r3, #3
 800667e:	e004      	b.n	800668a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006696:	b480      	push	{r7}
 8006698:	b087      	sub	sp, #28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e008      	b.n	80066c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e004      	b.n	80066f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006712:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006722:	2303      	movs	r3, #3
 8006724:	e01a      	b.n	800675c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800672c:	2b00      	cmp	r3, #0
 800672e:	d114      	bne.n	800675a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2201      	movs	r2, #1
 8006734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800674e:	2181      	movs	r1, #129	; 0x81
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 fe29 	bl	80083a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006772:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800677e:	2303      	movs	r3, #3
 8006780:	e016      	b.n	80067b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7c1b      	ldrb	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006794:	2101      	movs	r1, #1
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f001 fe3e 	bl	8008418 <USBD_LL_PrepareReceive>
 800679c:	e007      	b.n	80067ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067a4:	2340      	movs	r3, #64	; 0x40
 80067a6:	2101      	movs	r1, #1
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fe35 	bl	8008418 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e01f      	b.n	8006810 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	79fa      	ldrb	r2, [r7, #7]
 8006802:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f001 fbf7 	bl	8007ff8 <USBD_LL_Init>
 800680a:	4603      	mov	r3, r0
 800680c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800682c:	2303      	movs	r3, #3
 800682e:	e016      	b.n	800685e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f107 020e 	add.w	r2, r7, #14
 8006850:	4610      	mov	r0, r2
 8006852:	4798      	blx	r3
 8006854:	4602      	mov	r2, r0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 fc24 	bl	80080bc <USBD_LL_Start>
 8006874:	4603      	mov	r3, r0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80068a0:	2303      	movs	r3, #3
 80068a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	4611      	mov	r1, r2
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	78fa      	ldrb	r2, [r7, #3]
 80068ec:	4611      	mov	r1, r2
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	4798      	blx	r3
  }

  return USBD_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 ff46 	bl	80077a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2b02      	cmp	r3, #2
 8006936:	d01a      	beq.n	800696e <USBD_LL_SetupStage+0x72>
 8006938:	2b02      	cmp	r3, #2
 800693a:	d822      	bhi.n	8006982 <USBD_LL_SetupStage+0x86>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <USBD_LL_SetupStage+0x4a>
 8006940:	2b01      	cmp	r3, #1
 8006942:	d00a      	beq.n	800695a <USBD_LL_SetupStage+0x5e>
 8006944:	e01d      	b.n	8006982 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9ee 	bl	8006d30 <USBD_StdDevReq>
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]
      break;
 8006958:	e020      	b.n	800699c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fa52 	bl	8006e0c <USBD_StdItfReq>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	e016      	b.n	800699c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa91 	bl	8006e9e <USBD_StdEPReq>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
      break;
 8006980:	e00c      	b.n	800699c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006988:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fc39 	bl	8008208 <USBD_LL_StallEP>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
      break;
 800699a:	bf00      	nop
  }

  return ret;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	460b      	mov	r3, r1
 80069b0:	607a      	str	r2, [r7, #4]
 80069b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069b4:	7afb      	ldrb	r3, [r7, #11]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d138      	bne.n	8006a2c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80069c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069c8:	2b03      	cmp	r3, #3
 80069ca:	d14a      	bne.n	8006a62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d913      	bls.n	8006a00 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4293      	cmp	r3, r2
 80069f0:	bf28      	it	cs
 80069f2:	4613      	movcs	r3, r2
 80069f4:	461a      	mov	r2, r3
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 ffc5 	bl	8007988 <USBD_CtlContinueRx>
 80069fe:	e030      	b.n	8006a62 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d10b      	bne.n	8006a24 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 ffc0 	bl	80079aa <USBD_CtlSendStatus>
 8006a2a:	e01a      	b.n	8006a62 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d114      	bne.n	8006a62 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00e      	beq.n	8006a62 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	7afa      	ldrb	r2, [r7, #11]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006a5e:	7dfb      	ldrb	r3, [r7, #23]
 8006a60:	e000      	b.n	8006a64 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	460b      	mov	r3, r1
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d16b      	bne.n	8006b58 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3314      	adds	r3, #20
 8006a84:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d156      	bne.n	8006b3e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d914      	bls.n	8006ac6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 ff3a 	bl	800792c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f001 fcaa 	bl	8008418 <USBD_LL_PrepareReceive>
 8006ac4:	e03b      	b.n	8006b3e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d11c      	bne.n	8006b0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d316      	bcc.n	8006b0c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d20f      	bcs.n	8006b0c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006aec:	2200      	movs	r2, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 ff1b 	bl	800792c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006afe:	2300      	movs	r3, #0
 8006b00:	2200      	movs	r2, #0
 8006b02:	2100      	movs	r1, #0
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f001 fc87 	bl	8008418 <USBD_LL_PrepareReceive>
 8006b0a:	e018      	b.n	8006b3e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d10b      	bne.n	8006b30 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b30:	2180      	movs	r1, #128	; 0x80
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 fb68 	bl	8008208 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 ff49 	bl	80079d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d122      	bne.n	8006b8e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff fe98 	bl	800687e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b56:	e01a      	b.n	8006b8e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d114      	bne.n	8006b8e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	4798      	blx	r3
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	e000      	b.n	8006b90 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e02f      	b.n	8006c2c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00f      	beq.n	8006bf6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6852      	ldr	r2, [r2, #4]
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fa8f 	bl	8008120 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2240      	movs	r2, #64	; 0x40
 8006c0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 fa81 	bl	8008120 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	78fa      	ldrb	r2, [r7, #3]
 8006c44:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b04      	cmp	r3, #4
 8006c92:	d106      	bne.n	8006ca2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e012      	b.n	8006cec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d10b      	bne.n	8006cea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d12:	8a3b      	ldrh	r3, [r7, #16]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	b21a      	sxth	r2, r3
 8006d18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b21b      	sxth	r3, r3
 8006d20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d22:	89fb      	ldrh	r3, [r7, #14]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d005      	beq.n	8006d56 <USBD_StdDevReq+0x26>
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d853      	bhi.n	8006df6 <USBD_StdDevReq+0xc6>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00b      	beq.n	8006d6a <USBD_StdDevReq+0x3a>
 8006d52:	2b20      	cmp	r3, #32
 8006d54:	d14f      	bne.n	8006df6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	e04a      	b.n	8006e00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d83b      	bhi.n	8006dea <USBD_StdDevReq+0xba>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBD_StdDevReq+0x48>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006dcd 	.word	0x08006dcd
 8006d7c:	08006de1 	.word	0x08006de1
 8006d80:	08006deb 	.word	0x08006deb
 8006d84:	08006dd7 	.word	0x08006dd7
 8006d88:	08006deb 	.word	0x08006deb
 8006d8c:	08006dab 	.word	0x08006dab
 8006d90:	08006da1 	.word	0x08006da1
 8006d94:	08006deb 	.word	0x08006deb
 8006d98:	08006dc3 	.word	0x08006dc3
 8006d9c:	08006db5 	.word	0x08006db5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9de 	bl	8007164 <USBD_GetDescriptor>
          break;
 8006da8:	e024      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fb6d 	bl	800748c <USBD_SetAddress>
          break;
 8006db2:	e01f      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fbac 	bl	8007514 <USBD_SetConfig>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]
          break;
 8006dc0:	e018      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fc4b 	bl	8007660 <USBD_GetConfig>
          break;
 8006dca:	e013      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fc7c 	bl	80076cc <USBD_GetStatus>
          break;
 8006dd4:	e00e      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fcab 	bl	8007734 <USBD_SetFeature>
          break;
 8006dde:	e009      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fcba 	bl	800775c <USBD_ClrFeature>
          break;
 8006de8:	e004      	b.n	8006df4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fd11 	bl	8007814 <USBD_CtlError>
          break;
 8006df2:	bf00      	nop
      }
      break;
 8006df4:	e004      	b.n	8006e00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fd0b 	bl	8007814 <USBD_CtlError>
      break;
 8006dfe:	bf00      	nop
  }

  return ret;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop

08006e0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d005      	beq.n	8006e32 <USBD_StdItfReq+0x26>
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d82f      	bhi.n	8006e8a <USBD_StdItfReq+0x7e>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <USBD_StdItfReq+0x26>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d12b      	bne.n	8006e8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d81d      	bhi.n	8006e7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	889b      	ldrh	r3, [r3, #4]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d813      	bhi.n	8006e72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
 8006e58:	4603      	mov	r3, r0
 8006e5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	88db      	ldrh	r3, [r3, #6]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d110      	bne.n	8006e86 <USBD_StdItfReq+0x7a>
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10d      	bne.n	8006e86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fd9d 	bl	80079aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006e70:	e009      	b.n	8006e86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006e72:	6839      	ldr	r1, [r7, #0]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fccd 	bl	8007814 <USBD_CtlError>
          break;
 8006e7a:	e004      	b.n	8006e86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fcc8 	bl	8007814 <USBD_CtlError>
          break;
 8006e84:	e000      	b.n	8006e88 <USBD_StdItfReq+0x7c>
          break;
 8006e86:	bf00      	nop
      }
      break;
 8006e88:	e004      	b.n	8006e94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcc1 	bl	8007814 <USBD_CtlError>
      break;
 8006e92:	bf00      	nop
  }

  return ret;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	889b      	ldrh	r3, [r3, #4]
 8006eb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eba:	2b40      	cmp	r3, #64	; 0x40
 8006ebc:	d007      	beq.n	8006ece <USBD_StdEPReq+0x30>
 8006ebe:	2b40      	cmp	r3, #64	; 0x40
 8006ec0:	f200 8145 	bhi.w	800714e <USBD_StdEPReq+0x2b0>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00c      	beq.n	8006ee2 <USBD_StdEPReq+0x44>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	f040 8140 	bne.w	800714e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e13a      	b.n	8007158 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d007      	beq.n	8006efa <USBD_StdEPReq+0x5c>
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	f300 8129 	bgt.w	8007142 <USBD_StdEPReq+0x2a4>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d07f      	beq.n	8006ff4 <USBD_StdEPReq+0x156>
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d03c      	beq.n	8006f72 <USBD_StdEPReq+0xd4>
 8006ef8:	e123      	b.n	8007142 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d002      	beq.n	8006f0c <USBD_StdEPReq+0x6e>
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d016      	beq.n	8006f38 <USBD_StdEPReq+0x9a>
 8006f0a:	e02c      	b.n	8006f66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <USBD_StdEPReq+0x90>
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d00a      	beq.n	8006f2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f973 	bl	8008208 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f96f 	bl	8008208 <USBD_LL_StallEP>
 8006f2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006f2c:	e020      	b.n	8006f70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fc6f 	bl	8007814 <USBD_CtlError>
              break;
 8006f36:	e01b      	b.n	8006f70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10e      	bne.n	8006f5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00b      	beq.n	8006f5e <USBD_StdEPReq+0xc0>
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b80      	cmp	r3, #128	; 0x80
 8006f4a:	d008      	beq.n	8006f5e <USBD_StdEPReq+0xc0>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	88db      	ldrh	r3, [r3, #6]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 f955 	bl	8008208 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fd23 	bl	80079aa <USBD_CtlSendStatus>

              break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fc53 	bl	8007814 <USBD_CtlError>
              break;
 8006f6e:	bf00      	nop
          }
          break;
 8006f70:	e0ec      	b.n	800714c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d002      	beq.n	8006f84 <USBD_StdEPReq+0xe6>
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d016      	beq.n	8006fb0 <USBD_StdEPReq+0x112>
 8006f82:	e030      	b.n	8006fe6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f84:	7bbb      	ldrb	r3, [r7, #14]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <USBD_StdEPReq+0x108>
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d00a      	beq.n	8006fa6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f937 	bl	8008208 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f9a:	2180      	movs	r1, #128	; 0x80
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 f933 	bl	8008208 <USBD_LL_StallEP>
 8006fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa4:	e025      	b.n	8006ff2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc33 	bl	8007814 <USBD_CtlError>
              break;
 8006fae:	e020      	b.n	8006ff2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11b      	bne.n	8006ff0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 f954 	bl	8008274 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fcec 	bl	80079aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc13 	bl	8007814 <USBD_CtlError>
              break;
 8006fee:	e000      	b.n	8006ff2 <USBD_StdEPReq+0x154>
              break;
 8006ff0:	bf00      	nop
          }
          break;
 8006ff2:	e0ab      	b.n	800714c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d002      	beq.n	8007006 <USBD_StdEPReq+0x168>
 8007000:	2b03      	cmp	r3, #3
 8007002:	d032      	beq.n	800706a <USBD_StdEPReq+0x1cc>
 8007004:	e097      	b.n	8007136 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <USBD_StdEPReq+0x17e>
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d004      	beq.n	800701c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fbfd 	bl	8007814 <USBD_CtlError>
                break;
 800701a:	e091      	b.n	8007140 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800701c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007020:	2b00      	cmp	r3, #0
 8007022:	da0b      	bge.n	800703c <USBD_StdEPReq+0x19e>
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	3310      	adds	r3, #16
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	4413      	add	r3, r2
 8007038:	3304      	adds	r3, #4
 800703a:	e00b      	b.n	8007054 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007042:	4613      	mov	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	3304      	adds	r3, #4
 8007054:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2200      	movs	r2, #0
 800705a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2202      	movs	r2, #2
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fc47 	bl	80078f6 <USBD_CtlSendData>
              break;
 8007068:	e06a      	b.n	8007140 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800706a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800706e:	2b00      	cmp	r3, #0
 8007070:	da11      	bge.n	8007096 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	3324      	adds	r3, #36	; 0x24
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d117      	bne.n	80070bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fbc0 	bl	8007814 <USBD_CtlError>
                  break;
 8007094:	e054      	b.n	8007140 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	f003 020f 	and.w	r2, r3, #15
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	440b      	add	r3, r1
 80070a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d104      	bne.n	80070bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fbad 	bl	8007814 <USBD_CtlError>
                  break;
 80070ba:	e041      	b.n	8007140 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	da0b      	bge.n	80070dc <USBD_StdEPReq+0x23e>
 80070c4:	7bbb      	ldrb	r3, [r7, #14]
 80070c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	3310      	adds	r3, #16
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	4413      	add	r3, r2
 80070d8:	3304      	adds	r3, #4
 80070da:	e00b      	b.n	80070f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	3304      	adds	r3, #4
 80070f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <USBD_StdEPReq+0x264>
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d103      	bne.n	800710a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e00e      	b.n	8007128 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 f8e6 	bl	80082e0 <USBD_LL_IsStallEP>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e002      	b.n	8007128 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2202      	movs	r2, #2
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fbe1 	bl	80078f6 <USBD_CtlSendData>
              break;
 8007134:	e004      	b.n	8007140 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb6b 	bl	8007814 <USBD_CtlError>
              break;
 800713e:	bf00      	nop
          }
          break;
 8007140:	e004      	b.n	800714c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fb65 	bl	8007814 <USBD_CtlError>
          break;
 800714a:	bf00      	nop
      }
      break;
 800714c:	e004      	b.n	8007158 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb5f 	bl	8007814 <USBD_CtlError>
      break;
 8007156:	bf00      	nop
  }

  return ret;
 8007158:	7bfb      	ldrb	r3, [r7, #15]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
	...

08007164 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800716e:	2300      	movs	r3, #0
 8007170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	0a1b      	lsrs	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	2b0e      	cmp	r3, #14
 8007186:	f200 8152 	bhi.w	800742e <USBD_GetDescriptor+0x2ca>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <USBD_GetDescriptor+0x2c>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	08007201 	.word	0x08007201
 8007194:	08007219 	.word	0x08007219
 8007198:	08007259 	.word	0x08007259
 800719c:	0800742f 	.word	0x0800742f
 80071a0:	0800742f 	.word	0x0800742f
 80071a4:	080073cf 	.word	0x080073cf
 80071a8:	080073fb 	.word	0x080073fb
 80071ac:	0800742f 	.word	0x0800742f
 80071b0:	0800742f 	.word	0x0800742f
 80071b4:	0800742f 	.word	0x0800742f
 80071b8:	0800742f 	.word	0x0800742f
 80071bc:	0800742f 	.word	0x0800742f
 80071c0:	0800742f 	.word	0x0800742f
 80071c4:	0800742f 	.word	0x0800742f
 80071c8:	080071cd 	.word	0x080071cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	7c12      	ldrb	r2, [r2, #16]
 80071e4:	f107 0108 	add.w	r1, r7, #8
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
 80071ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ee:	e126      	b.n	800743e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fb0e 	bl	8007814 <USBD_CtlError>
        err++;
 80071f8:	7afb      	ldrb	r3, [r7, #11]
 80071fa:	3301      	adds	r3, #1
 80071fc:	72fb      	strb	r3, [r7, #11]
      break;
 80071fe:	e11e      	b.n	800743e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	4610      	mov	r0, r2
 8007212:	4798      	blx	r3
 8007214:	60f8      	str	r0, [r7, #12]
      break;
 8007216:	e112      	b.n	800743e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7c1b      	ldrb	r3, [r3, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10d      	bne.n	800723c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3301      	adds	r3, #1
 8007236:	2202      	movs	r2, #2
 8007238:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800723a:	e100      	b.n	800743e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	f107 0208 	add.w	r2, r7, #8
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
 800724c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	2202      	movs	r2, #2
 8007254:	701a      	strb	r2, [r3, #0]
      break;
 8007256:	e0f2      	b.n	800743e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	885b      	ldrh	r3, [r3, #2]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b05      	cmp	r3, #5
 8007260:	f200 80ac 	bhi.w	80073bc <USBD_GetDescriptor+0x258>
 8007264:	a201      	add	r2, pc, #4	; (adr r2, 800726c <USBD_GetDescriptor+0x108>)
 8007266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726a:	bf00      	nop
 800726c:	08007285 	.word	0x08007285
 8007270:	080072b9 	.word	0x080072b9
 8007274:	080072ed 	.word	0x080072ed
 8007278:	08007321 	.word	0x08007321
 800727c:	08007355 	.word	0x08007355
 8007280:	08007389 	.word	0x08007389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e091      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fab2 	bl	8007814 <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e089      	b.n	80073cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e077      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa98 	bl	8007814 <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e06f      	b.n	80073cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00b      	beq.n	8007310 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	7c12      	ldrb	r2, [r2, #16]
 8007304:	f107 0108 	add.w	r1, r7, #8
 8007308:	4610      	mov	r0, r2
 800730a:	4798      	blx	r3
 800730c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800730e:	e05d      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa7e 	bl	8007814 <USBD_CtlError>
            err++;
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	3301      	adds	r3, #1
 800731c:	72fb      	strb	r3, [r7, #11]
          break;
 800731e:	e055      	b.n	80073cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	7c12      	ldrb	r2, [r2, #16]
 8007338:	f107 0108 	add.w	r1, r7, #8
 800733c:	4610      	mov	r0, r2
 800733e:	4798      	blx	r3
 8007340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007342:	e043      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa64 	bl	8007814 <USBD_CtlError>
            err++;
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	3301      	adds	r3, #1
 8007350:	72fb      	strb	r3, [r7, #11]
          break;
 8007352:	e03b      	b.n	80073cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7c12      	ldrb	r2, [r2, #16]
 800736c:	f107 0108 	add.w	r1, r7, #8
 8007370:	4610      	mov	r0, r2
 8007372:	4798      	blx	r3
 8007374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007376:	e029      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fa4a 	bl	8007814 <USBD_CtlError>
            err++;
 8007380:	7afb      	ldrb	r3, [r7, #11]
 8007382:	3301      	adds	r3, #1
 8007384:	72fb      	strb	r3, [r7, #11]
          break;
 8007386:	e021      	b.n	80073cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00b      	beq.n	80073ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7c12      	ldrb	r2, [r2, #16]
 80073a0:	f107 0108 	add.w	r1, r7, #8
 80073a4:	4610      	mov	r0, r2
 80073a6:	4798      	blx	r3
 80073a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073aa:	e00f      	b.n	80073cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fa30 	bl	8007814 <USBD_CtlError>
            err++;
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3301      	adds	r3, #1
 80073b8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ba:	e007      	b.n	80073cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa28 	bl	8007814 <USBD_CtlError>
          err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80073ca:	bf00      	nop
      }
      break;
 80073cc:	e037      	b.n	800743e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7c1b      	ldrb	r3, [r3, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	f107 0208 	add.w	r2, r7, #8
 80073e2:	4610      	mov	r0, r2
 80073e4:	4798      	blx	r3
 80073e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073e8:	e029      	b.n	800743e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa11 	bl	8007814 <USBD_CtlError>
        err++;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
 80073f4:	3301      	adds	r3, #1
 80073f6:	72fb      	strb	r3, [r7, #11]
      break;
 80073f8:	e021      	b.n	800743e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	7c1b      	ldrb	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10d      	bne.n	800741e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	f107 0208 	add.w	r2, r7, #8
 800740e:	4610      	mov	r0, r2
 8007410:	4798      	blx	r3
 8007412:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	2207      	movs	r2, #7
 800741a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800741c:	e00f      	b.n	800743e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9f7 	bl	8007814 <USBD_CtlError>
        err++;
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	3301      	adds	r3, #1
 800742a:	72fb      	strb	r3, [r7, #11]
      break;
 800742c:	e007      	b.n	800743e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9ef 	bl	8007814 <USBD_CtlError>
      err++;
 8007436:	7afb      	ldrb	r3, [r7, #11]
 8007438:	3301      	adds	r3, #1
 800743a:	72fb      	strb	r3, [r7, #11]
      break;
 800743c:	bf00      	nop
  }

  if (err != 0U)
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11e      	bne.n	8007482 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	88db      	ldrh	r3, [r3, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d016      	beq.n	800747a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800744c:	893b      	ldrh	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	88da      	ldrh	r2, [r3, #6]
 8007456:	893b      	ldrh	r3, [r7, #8]
 8007458:	4293      	cmp	r3, r2
 800745a:	bf28      	it	cs
 800745c:	4613      	movcs	r3, r2
 800745e:	b29b      	uxth	r3, r3
 8007460:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	461a      	mov	r2, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa44 	bl	80078f6 <USBD_CtlSendData>
 800746e:	e009      	b.n	8007484 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f9ce 	bl	8007814 <USBD_CtlError>
 8007478:	e004      	b.n	8007484 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa95 	bl	80079aa <USBD_CtlSendStatus>
 8007480:	e000      	b.n	8007484 <USBD_GetDescriptor+0x320>
    return;
 8007482:	bf00      	nop
  }
}
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop

0800748c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	889b      	ldrh	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d131      	bne.n	8007502 <USBD_SetAddress+0x76>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	88db      	ldrh	r3, [r3, #6]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d12d      	bne.n	8007502 <USBD_SetAddress+0x76>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	2b7f      	cmp	r3, #127	; 0x7f
 80074ac:	d829      	bhi.n	8007502 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b03      	cmp	r3, #3
 80074c4:	d104      	bne.n	80074d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9a3 	bl	8007814 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ce:	e01d      	b.n	800750c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7bfa      	ldrb	r2, [r7, #15]
 80074d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 ff2d 	bl	800833c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fa61 	bl	80079aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f6:	e009      	b.n	800750c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007500:	e004      	b.n	800750c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f985 	bl	8007814 <USBD_CtlError>
  }
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	4b4c      	ldr	r3, [pc, #304]	; (800765c <USBD_SetConfig+0x148>)
 800752a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800752c:	4b4b      	ldr	r3, [pc, #300]	; (800765c <USBD_SetConfig+0x148>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d905      	bls.n	8007540 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f96c 	bl	8007814 <USBD_CtlError>
    return USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	e088      	b.n	8007652 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d002      	beq.n	8007552 <USBD_SetConfig+0x3e>
 800754c:	2b03      	cmp	r3, #3
 800754e:	d025      	beq.n	800759c <USBD_SetConfig+0x88>
 8007550:	e071      	b.n	8007636 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007552:	4b42      	ldr	r3, [pc, #264]	; (800765c <USBD_SetConfig+0x148>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01c      	beq.n	8007594 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800755a:	4b40      	ldr	r3, [pc, #256]	; (800765c <USBD_SetConfig+0x148>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007564:	4b3d      	ldr	r3, [pc, #244]	; (800765c <USBD_SetConfig+0x148>)
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	4619      	mov	r1, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff f992 	bl	8006894 <USBD_SetClassConfig>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f949 	bl	8007814 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007582:	e065      	b.n	8007650 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa10 	bl	80079aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2203      	movs	r2, #3
 800758e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007592:	e05d      	b.n	8007650 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa08 	bl	80079aa <USBD_CtlSendStatus>
      break;
 800759a:	e059      	b.n	8007650 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800759c:	4b2f      	ldr	r3, [pc, #188]	; (800765c <USBD_SetConfig+0x148>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d112      	bne.n	80075ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80075ac:	4b2b      	ldr	r3, [pc, #172]	; (800765c <USBD_SetConfig+0x148>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80075b6:	4b29      	ldr	r3, [pc, #164]	; (800765c <USBD_SetConfig+0x148>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f985 	bl	80068cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9f1 	bl	80079aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80075c8:	e042      	b.n	8007650 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80075ca:	4b24      	ldr	r3, [pc, #144]	; (800765c <USBD_SetConfig+0x148>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d02a      	beq.n	800762e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff f973 	bl	80068cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80075e6:	4b1d      	ldr	r3, [pc, #116]	; (800765c <USBD_SetConfig+0x148>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <USBD_SetConfig+0x148>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f94c 	bl	8006894 <USBD_SetClassConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00f      	beq.n	8007626 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f903 	bl	8007814 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7ff f958 	bl	80068cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007624:	e014      	b.n	8007650 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9bf 	bl	80079aa <USBD_CtlSendStatus>
      break;
 800762c:	e010      	b.n	8007650 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f9bb 	bl	80079aa <USBD_CtlSendStatus>
      break;
 8007634:	e00c      	b.n	8007650 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f8eb 	bl	8007814 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800763e:	4b07      	ldr	r3, [pc, #28]	; (800765c <USBD_SetConfig+0x148>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff f941 	bl	80068cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800764a:	2303      	movs	r3, #3
 800764c:	73fb      	strb	r3, [r7, #15]
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000218 	.word	0x20000218

08007660 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	88db      	ldrh	r3, [r3, #6]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d004      	beq.n	800767c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f8cd 	bl	8007814 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800767a:	e023      	b.n	80076c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	dc02      	bgt.n	800768e <USBD_GetConfig+0x2e>
 8007688:	2b00      	cmp	r3, #0
 800768a:	dc03      	bgt.n	8007694 <USBD_GetConfig+0x34>
 800768c:	e015      	b.n	80076ba <USBD_GetConfig+0x5a>
 800768e:	2b03      	cmp	r3, #3
 8007690:	d00b      	beq.n	80076aa <USBD_GetConfig+0x4a>
 8007692:	e012      	b.n	80076ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3308      	adds	r3, #8
 800769e:	2201      	movs	r2, #1
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f927 	bl	80078f6 <USBD_CtlSendData>
        break;
 80076a8:	e00c      	b.n	80076c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	2201      	movs	r2, #1
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f91f 	bl	80078f6 <USBD_CtlSendData>
        break;
 80076b8:	e004      	b.n	80076c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f8a9 	bl	8007814 <USBD_CtlError>
        break;
 80076c2:	bf00      	nop
}
 80076c4:	bf00      	nop
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	3b01      	subs	r3, #1
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d81e      	bhi.n	8007722 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	88db      	ldrh	r3, [r3, #6]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d004      	beq.n	80076f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f890 	bl	8007814 <USBD_CtlError>
        break;
 80076f4:	e01a      	b.n	800772c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d005      	beq.n	8007712 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	f043 0202 	orr.w	r2, r3, #2
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	330c      	adds	r3, #12
 8007716:	2202      	movs	r2, #2
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8eb 	bl	80078f6 <USBD_CtlSendData>
      break;
 8007720:	e004      	b.n	800772c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f875 	bl	8007814 <USBD_CtlError>
      break;
 800772a:	bf00      	nop
  }
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	885b      	ldrh	r3, [r3, #2]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d106      	bne.n	8007754 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f92b 	bl	80079aa <USBD_CtlSendStatus>
  }
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	2b02      	cmp	r3, #2
 8007772:	d80b      	bhi.n	800778c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10c      	bne.n	8007796 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f910 	bl	80079aa <USBD_CtlSendStatus>
      }
      break;
 800778a:	e004      	b.n	8007796 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f840 	bl	8007814 <USBD_CtlError>
      break;
 8007794:	e000      	b.n	8007798 <USBD_ClrFeature+0x3c>
      break;
 8007796:	bf00      	nop
  }
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	781a      	ldrb	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	781a      	ldrb	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fa92 	bl	8006cf4 <SWAPBYTE>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3301      	adds	r3, #1
 80077dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3301      	adds	r3, #1
 80077e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff fa85 	bl	8006cf4 <SWAPBYTE>
 80077ea:	4603      	mov	r3, r0
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fa78 	bl	8006cf4 <SWAPBYTE>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	80da      	strh	r2, [r3, #6]
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fcf1 	bl	8008208 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fced 	bl	8008208 <USBD_LL_StallEP>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b086      	sub	sp, #24
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d036      	beq.n	80078ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007850:	6938      	ldr	r0, [r7, #16]
 8007852:	f000 f836 	bl	80078c2 <USBD_GetLen>
 8007856:	4603      	mov	r3, r0
 8007858:	3301      	adds	r3, #1
 800785a:	b29b      	uxth	r3, r3
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007864:	7dfb      	ldrb	r3, [r7, #23]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4413      	add	r3, r2
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	7812      	ldrb	r2, [r2, #0]
 800786e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007870:	7dfb      	ldrb	r3, [r7, #23]
 8007872:	3301      	adds	r3, #1
 8007874:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4413      	add	r3, r2
 800787c:	2203      	movs	r2, #3
 800787e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	3301      	adds	r3, #1
 8007884:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007886:	e013      	b.n	80078b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007888:	7dfb      	ldrb	r3, [r7, #23]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	7812      	ldrb	r2, [r2, #0]
 8007892:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	3301      	adds	r3, #1
 8007898:	613b      	str	r3, [r7, #16]
    idx++;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	3301      	adds	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	3301      	adds	r3, #1
 80078ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e7      	bne.n	8007888 <USBD_GetString+0x52>
 80078b8:	e000      	b.n	80078bc <USBD_GetString+0x86>
    return;
 80078ba:	bf00      	nop
  }
}
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80078d2:	e005      	b.n	80078e0 <USBD_GetLen+0x1e>
  {
    len++;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	3301      	adds	r3, #1
 80078d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	3301      	adds	r3, #1
 80078de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1f5      	bne.n	80078d4 <USBD_GetLen+0x12>
  }

  return len;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2202      	movs	r2, #2
 8007906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	2100      	movs	r1, #0
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 fd43 	bl	80083a8 <USBD_LL_Transmit>

  return USBD_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	2100      	movs	r1, #0
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fd32 	bl	80083a8 <USBD_LL_Transmit>

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2203      	movs	r2, #3
 800795e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	2100      	movs	r1, #0
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	f000 fd4d 	bl	8008418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	2100      	movs	r1, #0
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fd3c 	bl	8008418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2204      	movs	r2, #4
 80079b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80079ba:	2300      	movs	r3, #0
 80079bc:	2200      	movs	r2, #0
 80079be:	2100      	movs	r1, #0
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fcf1 	bl	80083a8 <USBD_LL_Transmit>

  return USBD_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2205      	movs	r2, #5
 80079dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079e0:	2300      	movs	r3, #0
 80079e2:	2200      	movs	r2, #0
 80079e4:	2100      	movs	r1, #0
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd16 	bl	8008418 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079fc:	2200      	movs	r2, #0
 80079fe:	4912      	ldr	r1, [pc, #72]	; (8007a48 <MX_USB_DEVICE_Init+0x50>)
 8007a00:	4812      	ldr	r0, [pc, #72]	; (8007a4c <MX_USB_DEVICE_Init+0x54>)
 8007a02:	f7fe fed9 	bl	80067b8 <USBD_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a0c:	f7f8 fd04 	bl	8000418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a10:	490f      	ldr	r1, [pc, #60]	; (8007a50 <MX_USB_DEVICE_Init+0x58>)
 8007a12:	480e      	ldr	r0, [pc, #56]	; (8007a4c <MX_USB_DEVICE_Init+0x54>)
 8007a14:	f7fe ff00 	bl	8006818 <USBD_RegisterClass>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a1e:	f7f8 fcfb 	bl	8000418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a22:	490c      	ldr	r1, [pc, #48]	; (8007a54 <MX_USB_DEVICE_Init+0x5c>)
 8007a24:	4809      	ldr	r0, [pc, #36]	; (8007a4c <MX_USB_DEVICE_Init+0x54>)
 8007a26:	f7fe fe21 	bl	800666c <USBD_CDC_RegisterInterface>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a30:	f7f8 fcf2 	bl	8000418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <MX_USB_DEVICE_Init+0x54>)
 8007a36:	f7fe ff16 	bl	8006866 <USBD_Start>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a40:	f7f8 fcea 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000130 	.word	0x20000130
 8007a4c:	2000021c 	.word	0x2000021c
 8007a50:	20000018 	.word	0x20000018
 8007a54:	2000011c 	.word	0x2000011c

08007a58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4905      	ldr	r1, [pc, #20]	; (8007a74 <CDC_Init_FS+0x1c>)
 8007a60:	4805      	ldr	r0, [pc, #20]	; (8007a78 <CDC_Init_FS+0x20>)
 8007a62:	f7fe fe18 	bl	8006696 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a66:	4905      	ldr	r1, [pc, #20]	; (8007a7c <CDC_Init_FS+0x24>)
 8007a68:	4803      	ldr	r0, [pc, #12]	; (8007a78 <CDC_Init_FS+0x20>)
 8007a6a:	f7fe fe32 	bl	80066d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	200008d4 	.word	0x200008d4
 8007a78:	2000021c 	.word	0x2000021c
 8007a7c:	200004ec 	.word	0x200004ec

08007a80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	4603      	mov	r3, r0
 8007a98:	6039      	str	r1, [r7, #0]
 8007a9a:	71fb      	strb	r3, [r7, #7]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	2b23      	cmp	r3, #35	; 0x23
 8007aa4:	d84a      	bhi.n	8007b3c <CDC_Control_FS+0xac>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <CDC_Control_FS+0x1c>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007b3d 	.word	0x08007b3d
 8007ab0:	08007b3d 	.word	0x08007b3d
 8007ab4:	08007b3d 	.word	0x08007b3d
 8007ab8:	08007b3d 	.word	0x08007b3d
 8007abc:	08007b3d 	.word	0x08007b3d
 8007ac0:	08007b3d 	.word	0x08007b3d
 8007ac4:	08007b3d 	.word	0x08007b3d
 8007ac8:	08007b3d 	.word	0x08007b3d
 8007acc:	08007b3d 	.word	0x08007b3d
 8007ad0:	08007b3d 	.word	0x08007b3d
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007b3d 	.word	0x08007b3d
 8007adc:	08007b3d 	.word	0x08007b3d
 8007ae0:	08007b3d 	.word	0x08007b3d
 8007ae4:	08007b3d 	.word	0x08007b3d
 8007ae8:	08007b3d 	.word	0x08007b3d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b3d 	.word	0x08007b3d
 8007af4:	08007b3d 	.word	0x08007b3d
 8007af8:	08007b3d 	.word	0x08007b3d
 8007afc:	08007b3d 	.word	0x08007b3d
 8007b00:	08007b3d 	.word	0x08007b3d
 8007b04:	08007b3d 	.word	0x08007b3d
 8007b08:	08007b3d 	.word	0x08007b3d
 8007b0c:	08007b3d 	.word	0x08007b3d
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b3d 	.word	0x08007b3d
 8007b20:	08007b3d 	.word	0x08007b3d
 8007b24:	08007b3d 	.word	0x08007b3d
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b3d 	.word	0x08007b3d
 8007b30:	08007b3d 	.word	0x08007b3d
 8007b34:	08007b3d 	.word	0x08007b3d
 8007b38:	08007b3d 	.word	0x08007b3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b3c:	bf00      	nop
  }

  return (USBD_OK);
 8007b3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	4806      	ldr	r0, [pc, #24]	; (8007b74 <CDC_Receive_FS+0x28>)
 8007b5a:	f7fe fdba 	bl	80066d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b5e:	4805      	ldr	r0, [pc, #20]	; (8007b74 <CDC_Receive_FS+0x28>)
 8007b60:	f7fe fe00 	bl	8006764 <USBD_CDC_ReceivePacket>
  printf(Buf);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fd29 	bl	80085bc <iprintf>
  return (USBD_OK);
 8007b6a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	2000021c 	.word	0x2000021c

08007b78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b88:	4b0d      	ldr	r3, [pc, #52]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e00b      	b.n	8007bb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b9e:	887b      	ldrh	r3, [r7, #2]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007ba6:	f7fe fd76 	bl	8006696 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <CDC_Transmit_FS+0x48>)
 8007bac:	f7fe fdaa 	bl	8006704 <USBD_CDC_TransmitPacket>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	2000021c 	.word	0x2000021c

08007bc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
	...

08007be8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2212      	movs	r2, #18
 8007bf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bfa:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	20000150 	.word	0x20000150

08007c0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	6039      	str	r1, [r7, #0]
 8007c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20000170 	.word	0x20000170

08007c30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4907      	ldr	r1, [pc, #28]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c46:	4808      	ldr	r0, [pc, #32]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c48:	f7ff fdf5 	bl	8007836 <USBD_GetString>
 8007c4c:	e004      	b.n	8007c58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4904      	ldr	r1, [pc, #16]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c52:	4805      	ldr	r0, [pc, #20]	; (8007c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007c54:	f7ff fdef 	bl	8007836 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c58:	4b02      	ldr	r3, [pc, #8]	; (8007c64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000cbc 	.word	0x20000cbc
 8007c68:	08009500 	.word	0x08009500

08007c6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	6039      	str	r1, [r7, #0]
 8007c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	4904      	ldr	r1, [pc, #16]	; (8007c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c7c:	4804      	ldr	r0, [pc, #16]	; (8007c90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c7e:	f7ff fdda 	bl	8007836 <USBD_GetString>
  return USBD_StrDesc;
 8007c82:	4b02      	ldr	r3, [pc, #8]	; (8007c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}
 8007c8c:	20000cbc 	.word	0x20000cbc
 8007c90:	08009518 	.word	0x08009518

08007c94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	6039      	str	r1, [r7, #0]
 8007c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	221a      	movs	r2, #26
 8007ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ca6:	f000 f855 	bl	8007d54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007caa:	4b02      	ldr	r3, [pc, #8]	; (8007cb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000174 	.word	0x20000174

08007cb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6039      	str	r1, [r7, #0]
 8007cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d105      	bne.n	8007cd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	4907      	ldr	r1, [pc, #28]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cce:	4808      	ldr	r0, [pc, #32]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cd0:	f7ff fdb1 	bl	8007836 <USBD_GetString>
 8007cd4:	e004      	b.n	8007ce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cda:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cdc:	f7ff fdab 	bl	8007836 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	20000cbc 	.word	0x20000cbc
 8007cf0:	0800952c 	.word	0x0800952c

08007cf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d00:	79fb      	ldrb	r3, [r7, #7]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	4907      	ldr	r1, [pc, #28]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d0a:	4808      	ldr	r0, [pc, #32]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d0c:	f7ff fd93 	bl	8007836 <USBD_GetString>
 8007d10:	e004      	b.n	8007d1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4904      	ldr	r1, [pc, #16]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d16:	4805      	ldr	r0, [pc, #20]	; (8007d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d18:	f7ff fd8d 	bl	8007836 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d1c:	4b02      	ldr	r3, [pc, #8]	; (8007d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000cbc 	.word	0x20000cbc
 8007d2c:	08009538 	.word	0x08009538

08007d30 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	220c      	movs	r2, #12
 8007d40:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007d42:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20000164 	.word	0x20000164

08007d54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <Get_SerialNum+0x44>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d60:	4b0e      	ldr	r3, [pc, #56]	; (8007d9c <Get_SerialNum+0x48>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d66:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <Get_SerialNum+0x4c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4413      	add	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d7a:	2208      	movs	r2, #8
 8007d7c:	4909      	ldr	r1, [pc, #36]	; (8007da4 <Get_SerialNum+0x50>)
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f814 	bl	8007dac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d84:	2204      	movs	r2, #4
 8007d86:	4908      	ldr	r1, [pc, #32]	; (8007da8 <Get_SerialNum+0x54>)
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f000 f80f 	bl	8007dac <IntToUnicode>
  }
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	1fff7590 	.word	0x1fff7590
 8007d9c:	1fff7594 	.word	0x1fff7594
 8007da0:	1fff7598 	.word	0x1fff7598
 8007da4:	20000176 	.word	0x20000176
 8007da8:	20000186 	.word	0x20000186

08007dac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]
 8007dc2:	e027      	b.n	8007e14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	0f1b      	lsrs	r3, r3, #28
 8007dc8:	2b09      	cmp	r3, #9
 8007dca:	d80b      	bhi.n	8007de4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	0f1b      	lsrs	r3, r3, #28
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	440b      	add	r3, r1
 8007ddc:	3230      	adds	r2, #48	; 0x30
 8007dde:	b2d2      	uxtb	r2, r2
 8007de0:	701a      	strb	r2, [r3, #0]
 8007de2:	e00a      	b.n	8007dfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	0f1b      	lsrs	r3, r3, #28
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	7dfb      	ldrb	r3, [r7, #23]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	4619      	mov	r1, r3
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	440b      	add	r3, r1
 8007df4:	3237      	adds	r2, #55	; 0x37
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	011b      	lsls	r3, r3, #4
 8007dfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	3301      	adds	r3, #1
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	4413      	add	r3, r2
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
 8007e10:	3301      	adds	r3, #1
 8007e12:	75fb      	strb	r3, [r7, #23]
 8007e14:	7dfa      	ldrb	r2, [r7, #23]
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d3d3      	bcc.n	8007dc4 <IntToUnicode+0x18>
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	371c      	adds	r7, #28
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b098      	sub	sp, #96	; 0x60
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	2254      	movs	r2, #84	; 0x54
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fbb5 	bl	80085ac <memset>
  if(pcdHandle->Instance==USB)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a15      	ldr	r2, [pc, #84]	; (8007e9c <HAL_PCD_MspInit+0x70>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d122      	bne.n	8007e92 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e50:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007e52:	2300      	movs	r3, #0
 8007e54:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e56:	f107 030c 	add.w	r3, r7, #12
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fb fb56 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007e66:	f7f8 fad7 	bl	8000418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ea0 <HAL_PCD_MspInit+0x74>)
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <HAL_PCD_MspInit+0x74>)
 8007e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e74:	6593      	str	r3, [r2, #88]	; 0x58
 8007e76:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <HAL_PCD_MspInit+0x74>)
 8007e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e7e:	60bb      	str	r3, [r7, #8]
 8007e80:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	2043      	movs	r0, #67	; 0x43
 8007e88:	f7f8 fd77 	bl	800097a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007e8c:	2043      	movs	r0, #67	; 0x43
 8007e8e:	f7f8 fd90 	bl	80009b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e92:	bf00      	nop
 8007e94:	3760      	adds	r7, #96	; 0x60
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	40006800 	.word	0x40006800
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe fd1e 	bl	80068fc <USBD_LL_SetupStage>
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8007eda:	78fa      	ldrb	r2, [r7, #3]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	78fb      	ldrb	r3, [r7, #3]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f7fe fd58 	bl	80069a6 <USBD_LL_DataOutStage>
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	460b      	mov	r3, r1
 8007f08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 02f8 	ldr.w	r0, [r3, #760]	; 0x2f8
 8007f10:	78fa      	ldrb	r2, [r7, #3]
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4613      	mov	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	440b      	add	r3, r1
 8007f1e:	3340      	adds	r3, #64	; 0x40
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f7fe fda1 	bl	8006a6c <USBD_LL_DataInStage>
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b082      	sub	sp, #8
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe feb5 	bl	8006cb0 <USBD_LL_SOF>
}
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007f56:	2301      	movs	r3, #1
 8007f58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d001      	beq.n	8007f66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007f62:	f7f8 fa59 	bl	8000418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fe fe5f 	bl	8006c34 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe fe0b 	bl	8006b98 <USBD_LL_Reset>
}
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe fe5a 	bl	8006c54 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d005      	beq.n	8007fb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fa8:	4b04      	ldr	r3, [pc, #16]	; (8007fbc <HAL_PCD_SuspendCallback+0x30>)
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	4a03      	ldr	r2, [pc, #12]	; (8007fbc <HAL_PCD_SuspendCallback+0x30>)
 8007fae:	f043 0306 	orr.w	r3, r3, #6
 8007fb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007fb4:	bf00      	nop
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	e000ed00 	.word	0xe000ed00

08007fc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <HAL_PCD_ResumeCallback+0x34>)
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	4a07      	ldr	r2, [pc, #28]	; (8007ff4 <HAL_PCD_ResumeCallback+0x34>)
 8007fd6:	f023 0306 	bic.w	r3, r3, #6
 8007fda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007fdc:	f000 fab6 	bl	800854c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fe4a 	bl	8006c80 <USBD_LL_Resume>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	e000ed00 	.word	0xe000ed00

08007ff8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8008000:	f7fa fc74 	bl	80028ec <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008004:	4a2b      	ldr	r2, [pc, #172]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c2 32f8 	str.w	r3, [r2, #760]	; 0x2f8
  pdev->pData = &hpcd_USB_FS;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a29      	ldr	r2, [pc, #164]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008010:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8008014:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008016:	4a28      	ldr	r2, [pc, #160]	; (80080b8 <USBD_LL_Init+0xc0>)
 8008018:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800801a:	4b26      	ldr	r3, [pc, #152]	; (80080b4 <USBD_LL_Init+0xbc>)
 800801c:	2208      	movs	r2, #8
 800801e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008020:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008022:	2202      	movs	r2, #2
 8008024:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008026:	4b23      	ldr	r3, [pc, #140]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008028:	2202      	movs	r2, #2
 800802a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800802c:	4b21      	ldr	r3, [pc, #132]	; (80080b4 <USBD_LL_Init+0xbc>)
 800802e:	2200      	movs	r2, #0
 8008030:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008032:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008034:	2200      	movs	r2, #0
 8008036:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008038:	4b1e      	ldr	r3, [pc, #120]	; (80080b4 <USBD_LL_Init+0xbc>)
 800803a:	2200      	movs	r2, #0
 800803c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800803e:	4b1d      	ldr	r3, [pc, #116]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008040:	2200      	movs	r2, #0
 8008042:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008044:	481b      	ldr	r0, [pc, #108]	; (80080b4 <USBD_LL_Init+0xbc>)
 8008046:	f7f8 fe51 	bl	8000cec <HAL_PCD_Init>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8008050:	f7f8 f9e2 	bl	8000418 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800805a:	2318      	movs	r3, #24
 800805c:	2200      	movs	r2, #0
 800805e:	2100      	movs	r1, #0
 8008060:	f7fa fb61 	bl	8002726 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800806a:	2358      	movs	r3, #88	; 0x58
 800806c:	2200      	movs	r2, #0
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	f7fa fb59 	bl	8002726 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800807a:	23c0      	movs	r3, #192	; 0xc0
 800807c:	2200      	movs	r2, #0
 800807e:	2181      	movs	r1, #129	; 0x81
 8008080:	f7fa fb51 	bl	8002726 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800808a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800808e:	2200      	movs	r2, #0
 8008090:	2101      	movs	r1, #1
 8008092:	f7fa fb48 	bl	8002726 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800809c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a0:	2200      	movs	r2, #0
 80080a2:	2182      	movs	r1, #130	; 0x82
 80080a4:	f7fa fb3f 	bl	8002726 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000ebc 	.word	0x20000ebc
 80080b8:	40006800 	.word	0x40006800

080080bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f8 ff21 	bl	8000f1a <HAL_PCD_Start>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d816      	bhi.n	8008110 <USBD_LL_Start+0x54>
 80080e2:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <USBD_LL_Start+0x2c>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	080080ff 	.word	0x080080ff
 80080f0:	08008105 	.word	0x08008105
 80080f4:	0800810b 	.word	0x0800810b
    case HAL_OK :
      usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
    break;
 80080fc:	e00b      	b.n	8008116 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
    break;
 8008102:	e008      	b.n	8008116 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	e005      	b.n	8008116 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
    break;
 800810e:	e002      	b.n	8008116 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	73fb      	strb	r3, [r7, #15]
    break;
 8008114:	bf00      	nop
  }
  return usb_status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	461a      	mov	r2, r3
 800812e:	4603      	mov	r3, r0
 8008130:	70fb      	strb	r3, [r7, #3]
 8008132:	460b      	mov	r3, r1
 8008134:	70bb      	strb	r3, [r7, #2]
 8008136:	4613      	mov	r3, r2
 8008138:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008148:	78bb      	ldrb	r3, [r7, #2]
 800814a:	883a      	ldrh	r2, [r7, #0]
 800814c:	78f9      	ldrb	r1, [r7, #3]
 800814e:	f7f9 f852 	bl	80011f6 <HAL_PCD_EP_Open>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b03      	cmp	r3, #3
 800815a:	d817      	bhi.n	800818c <USBD_LL_OpenEP+0x6c>
 800815c:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <USBD_LL_OpenEP+0x44>)
 800815e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008162:	bf00      	nop
 8008164:	08008175 	.word	0x08008175
 8008168:	0800817b 	.word	0x0800817b
 800816c:	08008181 	.word	0x08008181
 8008170:	08008187 	.word	0x08008187
    case HAL_OK :
      usb_status = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
    break;
 8008178:	e00b      	b.n	8008192 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
    break;
 800817e:	e008      	b.n	8008192 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008180:	2301      	movs	r3, #1
 8008182:	73fb      	strb	r3, [r7, #15]
    break;
 8008184:	e005      	b.n	8008192 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008186:	2303      	movs	r3, #3
 8008188:	73fb      	strb	r3, [r7, #15]
    break;
 800818a:	e002      	b.n	8008192 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800818c:	2303      	movs	r3, #3
 800818e:	73fb      	strb	r3, [r7, #15]
    break;
 8008190:	bf00      	nop
  }
  return usb_status;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081b6:	78fa      	ldrb	r2, [r7, #3]
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7f9 f883 	bl	80012c6 <HAL_PCD_EP_Close>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d816      	bhi.n	80081f8 <USBD_LL_CloseEP+0x5c>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBD_LL_CloseEP+0x34>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081e7 	.word	0x080081e7
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	080081f3 	.word	0x080081f3
    case HAL_OK :
      usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e00b      	b.n	80081fe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e008      	b.n	80081fe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	e005      	b.n	80081fe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	73fb      	strb	r3, [r7, #15]
    break;
 80081f6:	e002      	b.n	80081fe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
    break;
 80081fc:	bf00      	nop
  }
  return usb_status;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	4611      	mov	r1, r2
 8008226:	4618      	mov	r0, r3
 8008228:	f7f9 f931 	bl	800148e <HAL_PCD_EP_SetStall>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d816      	bhi.n	8008264 <USBD_LL_StallEP+0x5c>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <USBD_LL_StallEP+0x34>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008253 	.word	0x08008253
 8008244:	08008259 	.word	0x08008259
 8008248:	0800825f 	.word	0x0800825f
    case HAL_OK :
      usb_status = USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
    break;
 8008250:	e00b      	b.n	800826a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008252:	2303      	movs	r3, #3
 8008254:	73fb      	strb	r3, [r7, #15]
    break;
 8008256:	e008      	b.n	800826a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008258:	2301      	movs	r3, #1
 800825a:	73fb      	strb	r3, [r7, #15]
    break;
 800825c:	e005      	b.n	800826a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
    break;
 8008262:	e002      	b.n	800826a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008264:	2303      	movs	r3, #3
 8008266:	73fb      	strb	r3, [r7, #15]
    break;
 8008268:	bf00      	nop
  }
  return usb_status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800828e:	78fa      	ldrb	r2, [r7, #3]
 8008290:	4611      	mov	r1, r2
 8008292:	4618      	mov	r0, r3
 8008294:	f7f9 f95d 	bl	8001552 <HAL_PCD_EP_ClrStall>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d816      	bhi.n	80082d0 <USBD_LL_ClearStallEP+0x5c>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBD_LL_ClearStallEP+0x34>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082bf 	.word	0x080082bf
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082cb 	.word	0x080082cb
    case HAL_OK :
      usb_status = USBD_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
    break;
 80082bc:	e00b      	b.n	80082d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	73fb      	strb	r3, [r7, #15]
    break;
 80082c2:	e008      	b.n	80082d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082c4:	2301      	movs	r3, #1
 80082c6:	73fb      	strb	r3, [r7, #15]
    break;
 80082c8:	e005      	b.n	80082d6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ca:	2303      	movs	r3, #3
 80082cc:	73fb      	strb	r3, [r7, #15]
    break;
 80082ce:	e002      	b.n	80082d6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	73fb      	strb	r3, [r7, #15]
    break;
 80082d4:	bf00      	nop
  }
  return usb_status;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	da0c      	bge.n	8008316 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082fc:	78fb      	ldrb	r3, [r7, #3]
 80082fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008302:	68f9      	ldr	r1, [r7, #12]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	440b      	add	r3, r1
 8008310:	3306      	adds	r3, #6
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	e00b      	b.n	800832e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800831c:	68f9      	ldr	r1, [r7, #12]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	440b      	add	r3, r1
 8008328:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
 800832c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7f8 ff26 	bl	80011ac <HAL_PCD_SetAddress>
 8008360:	4603      	mov	r3, r0
 8008362:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d816      	bhi.n	8008398 <USBD_LL_SetUSBAddress+0x5c>
 800836a:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <USBD_LL_SetUSBAddress+0x34>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	08008381 	.word	0x08008381
 8008374:	08008387 	.word	0x08008387
 8008378:	0800838d 	.word	0x0800838d
 800837c:	08008393 	.word	0x08008393
    case HAL_OK :
      usb_status = USBD_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e00b      	b.n	800839e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	73fb      	strb	r3, [r7, #15]
    break;
 800838a:	e008      	b.n	800839e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800838c:	2301      	movs	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e005      	b.n	800839e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008392:	2303      	movs	r3, #3
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e002      	b.n	800839e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008398:	2303      	movs	r3, #3
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	bf00      	nop
  }
  return usb_status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	460b      	mov	r3, r1
 80083b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083c6:	7af9      	ldrb	r1, [r7, #11]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	f7f9 f81b 	bl	8001406 <HAL_PCD_EP_Transmit>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80083d4:	7dbb      	ldrb	r3, [r7, #22]
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d816      	bhi.n	8008408 <USBD_LL_Transmit+0x60>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <USBD_LL_Transmit+0x38>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f1 	.word	0x080083f1
 80083e4:	080083f7 	.word	0x080083f7
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008403 	.word	0x08008403
    case HAL_OK :
      usb_status = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	75fb      	strb	r3, [r7, #23]
    break;
 80083f4:	e00b      	b.n	800840e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	75fb      	strb	r3, [r7, #23]
    break;
 80083fa:	e008      	b.n	800840e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75fb      	strb	r3, [r7, #23]
    break;
 8008400:	e005      	b.n	800840e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008402:	2303      	movs	r3, #3
 8008404:	75fb      	strb	r3, [r7, #23]
    break;
 8008406:	e002      	b.n	800840e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	75fb      	strb	r3, [r7, #23]
    break;
 800840c:	bf00      	nop
  }
  return usb_status;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	607a      	str	r2, [r7, #4]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	460b      	mov	r3, r1
 8008426:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008436:	7af9      	ldrb	r1, [r7, #11]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	f7f8 ff8d 	bl	800135a <HAL_PCD_EP_Receive>
 8008440:	4603      	mov	r3, r0
 8008442:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008444:	7dbb      	ldrb	r3, [r7, #22]
 8008446:	2b03      	cmp	r3, #3
 8008448:	d816      	bhi.n	8008478 <USBD_LL_PrepareReceive+0x60>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <USBD_LL_PrepareReceive+0x38>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008461 	.word	0x08008461
 8008454:	08008467 	.word	0x08008467
 8008458:	0800846d 	.word	0x0800846d
 800845c:	08008473 	.word	0x08008473
    case HAL_OK :
      usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
    break;
 8008464:	e00b      	b.n	800847e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008466:	2303      	movs	r3, #3
 8008468:	75fb      	strb	r3, [r7, #23]
    break;
 800846a:	e008      	b.n	800847e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
    break;
 8008470:	e005      	b.n	800847e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008472:	2303      	movs	r3, #3
 8008474:	75fb      	strb	r3, [r7, #23]
    break;
 8008476:	e002      	b.n	800847e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008478:	2303      	movs	r3, #3
 800847a:	75fb      	strb	r3, [r7, #23]
    break;
 800847c:	bf00      	nop
  }
  return usb_status;
 800847e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f8 ff99 	bl	80013d6 <HAL_PCD_EP_GetRxCount>
 80084a4:	4603      	mov	r3, r0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80084bc:	78fb      	ldrb	r3, [r7, #3]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_PCDEx_LPM_Callback+0x18>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d013      	beq.n	80084ee <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80084c6:	e023      	b.n	8008510 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80084d0:	f000 f83c 	bl	800854c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084d4:	4b10      	ldr	r3, [pc, #64]	; (8008518 <HAL_PCDEx_LPM_Callback+0x68>)
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	4a0f      	ldr	r2, [pc, #60]	; (8008518 <HAL_PCDEx_LPM_Callback+0x68>)
 80084da:	f023 0306 	bic.w	r3, r3, #6
 80084de:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fbca 	bl	8006c80 <USBD_LL_Resume>
    break;
 80084ec:	e010      	b.n	8008510 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fbad 	bl	8006c54 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d005      	beq.n	800850e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_PCDEx_LPM_Callback+0x68>)
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	4a04      	ldr	r2, [pc, #16]	; (8008518 <HAL_PCDEx_LPM_Callback+0x68>)
 8008508:	f043 0306 	orr.w	r3, r3, #6
 800850c:	6113      	str	r3, [r2, #16]
    break;
 800850e:	bf00      	nop
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed00 	.word	0xe000ed00

0800851c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008524:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_static_malloc+0x18>)
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	200011b8 	.word	0x200011b8

08008538 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]

}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008550:	f7f7 fea4 	bl	800029c <SystemClock_Config>
}
 8008554:	bf00      	nop
 8008556:	bd80      	pop	{r7, pc}

08008558 <__errno>:
 8008558:	4b01      	ldr	r3, [pc, #4]	; (8008560 <__errno+0x8>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000190 	.word	0x20000190

08008564 <__libc_init_array>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	4d0d      	ldr	r5, [pc, #52]	; (800859c <__libc_init_array+0x38>)
 8008568:	4c0d      	ldr	r4, [pc, #52]	; (80085a0 <__libc_init_array+0x3c>)
 800856a:	1b64      	subs	r4, r4, r5
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	2600      	movs	r6, #0
 8008570:	42a6      	cmp	r6, r4
 8008572:	d109      	bne.n	8008588 <__libc_init_array+0x24>
 8008574:	4d0b      	ldr	r5, [pc, #44]	; (80085a4 <__libc_init_array+0x40>)
 8008576:	4c0c      	ldr	r4, [pc, #48]	; (80085a8 <__libc_init_array+0x44>)
 8008578:	f000 ffae 	bl	80094d8 <_init>
 800857c:	1b64      	subs	r4, r4, r5
 800857e:	10a4      	asrs	r4, r4, #2
 8008580:	2600      	movs	r6, #0
 8008582:	42a6      	cmp	r6, r4
 8008584:	d105      	bne.n	8008592 <__libc_init_array+0x2e>
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	f855 3b04 	ldr.w	r3, [r5], #4
 800858c:	4798      	blx	r3
 800858e:	3601      	adds	r6, #1
 8008590:	e7ee      	b.n	8008570 <__libc_init_array+0xc>
 8008592:	f855 3b04 	ldr.w	r3, [r5], #4
 8008596:	4798      	blx	r3
 8008598:	3601      	adds	r6, #1
 800859a:	e7f2      	b.n	8008582 <__libc_init_array+0x1e>
 800859c:	08009620 	.word	0x08009620
 80085a0:	08009620 	.word	0x08009620
 80085a4:	08009620 	.word	0x08009620
 80085a8:	08009624 	.word	0x08009624

080085ac <memset>:
 80085ac:	4402      	add	r2, r0
 80085ae:	4603      	mov	r3, r0
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d100      	bne.n	80085b6 <memset+0xa>
 80085b4:	4770      	bx	lr
 80085b6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ba:	e7f9      	b.n	80085b0 <memset+0x4>

080085bc <iprintf>:
 80085bc:	b40f      	push	{r0, r1, r2, r3}
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <iprintf+0x2c>)
 80085c0:	b513      	push	{r0, r1, r4, lr}
 80085c2:	681c      	ldr	r4, [r3, #0]
 80085c4:	b124      	cbz	r4, 80085d0 <iprintf+0x14>
 80085c6:	69a3      	ldr	r3, [r4, #24]
 80085c8:	b913      	cbnz	r3, 80085d0 <iprintf+0x14>
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f866 	bl	800869c <__sinit>
 80085d0:	ab05      	add	r3, sp, #20
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	68a1      	ldr	r1, [r4, #8]
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f9bd 	bl	8008958 <_vfiprintf_r>
 80085de:	b002      	add	sp, #8
 80085e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e4:	b004      	add	sp, #16
 80085e6:	4770      	bx	lr
 80085e8:	20000190 	.word	0x20000190

080085ec <std>:
 80085ec:	2300      	movs	r3, #0
 80085ee:	b510      	push	{r4, lr}
 80085f0:	4604      	mov	r4, r0
 80085f2:	e9c0 3300 	strd	r3, r3, [r0]
 80085f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085fa:	6083      	str	r3, [r0, #8]
 80085fc:	8181      	strh	r1, [r0, #12]
 80085fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008600:	81c2      	strh	r2, [r0, #14]
 8008602:	6183      	str	r3, [r0, #24]
 8008604:	4619      	mov	r1, r3
 8008606:	2208      	movs	r2, #8
 8008608:	305c      	adds	r0, #92	; 0x5c
 800860a:	f7ff ffcf 	bl	80085ac <memset>
 800860e:	4b05      	ldr	r3, [pc, #20]	; (8008624 <std+0x38>)
 8008610:	6263      	str	r3, [r4, #36]	; 0x24
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <std+0x3c>)
 8008614:	62a3      	str	r3, [r4, #40]	; 0x28
 8008616:	4b05      	ldr	r3, [pc, #20]	; (800862c <std+0x40>)
 8008618:	62e3      	str	r3, [r4, #44]	; 0x2c
 800861a:	4b05      	ldr	r3, [pc, #20]	; (8008630 <std+0x44>)
 800861c:	6224      	str	r4, [r4, #32]
 800861e:	6323      	str	r3, [r4, #48]	; 0x30
 8008620:	bd10      	pop	{r4, pc}
 8008622:	bf00      	nop
 8008624:	08008f01 	.word	0x08008f01
 8008628:	08008f23 	.word	0x08008f23
 800862c:	08008f5b 	.word	0x08008f5b
 8008630:	08008f7f 	.word	0x08008f7f

08008634 <_cleanup_r>:
 8008634:	4901      	ldr	r1, [pc, #4]	; (800863c <_cleanup_r+0x8>)
 8008636:	f000 b8af 	b.w	8008798 <_fwalk_reent>
 800863a:	bf00      	nop
 800863c:	08009259 	.word	0x08009259

08008640 <__sfmoreglue>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	2268      	movs	r2, #104	; 0x68
 8008644:	1e4d      	subs	r5, r1, #1
 8008646:	4355      	muls	r5, r2
 8008648:	460e      	mov	r6, r1
 800864a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800864e:	f000 f8e5 	bl	800881c <_malloc_r>
 8008652:	4604      	mov	r4, r0
 8008654:	b140      	cbz	r0, 8008668 <__sfmoreglue+0x28>
 8008656:	2100      	movs	r1, #0
 8008658:	e9c0 1600 	strd	r1, r6, [r0]
 800865c:	300c      	adds	r0, #12
 800865e:	60a0      	str	r0, [r4, #8]
 8008660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008664:	f7ff ffa2 	bl	80085ac <memset>
 8008668:	4620      	mov	r0, r4
 800866a:	bd70      	pop	{r4, r5, r6, pc}

0800866c <__sfp_lock_acquire>:
 800866c:	4801      	ldr	r0, [pc, #4]	; (8008674 <__sfp_lock_acquire+0x8>)
 800866e:	f000 b8b3 	b.w	80087d8 <__retarget_lock_acquire_recursive>
 8008672:	bf00      	nop
 8008674:	200013d9 	.word	0x200013d9

08008678 <__sfp_lock_release>:
 8008678:	4801      	ldr	r0, [pc, #4]	; (8008680 <__sfp_lock_release+0x8>)
 800867a:	f000 b8ae 	b.w	80087da <__retarget_lock_release_recursive>
 800867e:	bf00      	nop
 8008680:	200013d9 	.word	0x200013d9

08008684 <__sinit_lock_acquire>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sinit_lock_acquire+0x8>)
 8008686:	f000 b8a7 	b.w	80087d8 <__retarget_lock_acquire_recursive>
 800868a:	bf00      	nop
 800868c:	200013da 	.word	0x200013da

08008690 <__sinit_lock_release>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__sinit_lock_release+0x8>)
 8008692:	f000 b8a2 	b.w	80087da <__retarget_lock_release_recursive>
 8008696:	bf00      	nop
 8008698:	200013da 	.word	0x200013da

0800869c <__sinit>:
 800869c:	b510      	push	{r4, lr}
 800869e:	4604      	mov	r4, r0
 80086a0:	f7ff fff0 	bl	8008684 <__sinit_lock_acquire>
 80086a4:	69a3      	ldr	r3, [r4, #24]
 80086a6:	b11b      	cbz	r3, 80086b0 <__sinit+0x14>
 80086a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086ac:	f7ff bff0 	b.w	8008690 <__sinit_lock_release>
 80086b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086b4:	6523      	str	r3, [r4, #80]	; 0x50
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <__sinit+0x68>)
 80086b8:	4a13      	ldr	r2, [pc, #76]	; (8008708 <__sinit+0x6c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80086be:	42a3      	cmp	r3, r4
 80086c0:	bf04      	itt	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	61a3      	streq	r3, [r4, #24]
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 f820 	bl	800870c <__sfp>
 80086cc:	6060      	str	r0, [r4, #4]
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f81c 	bl	800870c <__sfp>
 80086d4:	60a0      	str	r0, [r4, #8]
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 f818 	bl	800870c <__sfp>
 80086dc:	2200      	movs	r2, #0
 80086de:	60e0      	str	r0, [r4, #12]
 80086e0:	2104      	movs	r1, #4
 80086e2:	6860      	ldr	r0, [r4, #4]
 80086e4:	f7ff ff82 	bl	80085ec <std>
 80086e8:	68a0      	ldr	r0, [r4, #8]
 80086ea:	2201      	movs	r2, #1
 80086ec:	2109      	movs	r1, #9
 80086ee:	f7ff ff7d 	bl	80085ec <std>
 80086f2:	68e0      	ldr	r0, [r4, #12]
 80086f4:	2202      	movs	r2, #2
 80086f6:	2112      	movs	r1, #18
 80086f8:	f7ff ff78 	bl	80085ec <std>
 80086fc:	2301      	movs	r3, #1
 80086fe:	61a3      	str	r3, [r4, #24]
 8008700:	e7d2      	b.n	80086a8 <__sinit+0xc>
 8008702:	bf00      	nop
 8008704:	08009588 	.word	0x08009588
 8008708:	08008635 	.word	0x08008635

0800870c <__sfp>:
 800870c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870e:	4607      	mov	r7, r0
 8008710:	f7ff ffac 	bl	800866c <__sfp_lock_acquire>
 8008714:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <__sfp+0x84>)
 8008716:	681e      	ldr	r6, [r3, #0]
 8008718:	69b3      	ldr	r3, [r6, #24]
 800871a:	b913      	cbnz	r3, 8008722 <__sfp+0x16>
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff ffbd 	bl	800869c <__sinit>
 8008722:	3648      	adds	r6, #72	; 0x48
 8008724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008728:	3b01      	subs	r3, #1
 800872a:	d503      	bpl.n	8008734 <__sfp+0x28>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	b30b      	cbz	r3, 8008774 <__sfp+0x68>
 8008730:	6836      	ldr	r6, [r6, #0]
 8008732:	e7f7      	b.n	8008724 <__sfp+0x18>
 8008734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008738:	b9d5      	cbnz	r5, 8008770 <__sfp+0x64>
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <__sfp+0x88>)
 800873c:	60e3      	str	r3, [r4, #12]
 800873e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008742:	6665      	str	r5, [r4, #100]	; 0x64
 8008744:	f000 f847 	bl	80087d6 <__retarget_lock_init_recursive>
 8008748:	f7ff ff96 	bl	8008678 <__sfp_lock_release>
 800874c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008754:	6025      	str	r5, [r4, #0]
 8008756:	61a5      	str	r5, [r4, #24]
 8008758:	2208      	movs	r2, #8
 800875a:	4629      	mov	r1, r5
 800875c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008760:	f7ff ff24 	bl	80085ac <memset>
 8008764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800876c:	4620      	mov	r0, r4
 800876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008770:	3468      	adds	r4, #104	; 0x68
 8008772:	e7d9      	b.n	8008728 <__sfp+0x1c>
 8008774:	2104      	movs	r1, #4
 8008776:	4638      	mov	r0, r7
 8008778:	f7ff ff62 	bl	8008640 <__sfmoreglue>
 800877c:	4604      	mov	r4, r0
 800877e:	6030      	str	r0, [r6, #0]
 8008780:	2800      	cmp	r0, #0
 8008782:	d1d5      	bne.n	8008730 <__sfp+0x24>
 8008784:	f7ff ff78 	bl	8008678 <__sfp_lock_release>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	e7ee      	b.n	800876c <__sfp+0x60>
 800878e:	bf00      	nop
 8008790:	08009588 	.word	0x08009588
 8008794:	ffff0001 	.word	0xffff0001

08008798 <_fwalk_reent>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	4606      	mov	r6, r0
 800879e:	4688      	mov	r8, r1
 80087a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087a4:	2700      	movs	r7, #0
 80087a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087aa:	f1b9 0901 	subs.w	r9, r9, #1
 80087ae:	d505      	bpl.n	80087bc <_fwalk_reent+0x24>
 80087b0:	6824      	ldr	r4, [r4, #0]
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d1f7      	bne.n	80087a6 <_fwalk_reent+0xe>
 80087b6:	4638      	mov	r0, r7
 80087b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087bc:	89ab      	ldrh	r3, [r5, #12]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d907      	bls.n	80087d2 <_fwalk_reent+0x3a>
 80087c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c6:	3301      	adds	r3, #1
 80087c8:	d003      	beq.n	80087d2 <_fwalk_reent+0x3a>
 80087ca:	4629      	mov	r1, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	47c0      	blx	r8
 80087d0:	4307      	orrs	r7, r0
 80087d2:	3568      	adds	r5, #104	; 0x68
 80087d4:	e7e9      	b.n	80087aa <_fwalk_reent+0x12>

080087d6 <__retarget_lock_init_recursive>:
 80087d6:	4770      	bx	lr

080087d8 <__retarget_lock_acquire_recursive>:
 80087d8:	4770      	bx	lr

080087da <__retarget_lock_release_recursive>:
 80087da:	4770      	bx	lr

080087dc <sbrk_aligned>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4e0e      	ldr	r6, [pc, #56]	; (8008818 <sbrk_aligned+0x3c>)
 80087e0:	460c      	mov	r4, r1
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	4605      	mov	r5, r0
 80087e6:	b911      	cbnz	r1, 80087ee <sbrk_aligned+0x12>
 80087e8:	f000 fb7a 	bl	8008ee0 <_sbrk_r>
 80087ec:	6030      	str	r0, [r6, #0]
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 fb75 	bl	8008ee0 <_sbrk_r>
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d00a      	beq.n	8008810 <sbrk_aligned+0x34>
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d007      	beq.n	8008814 <sbrk_aligned+0x38>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fb6a 	bl	8008ee0 <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d101      	bne.n	8008814 <sbrk_aligned+0x38>
 8008810:	f04f 34ff 	mov.w	r4, #4294967295
 8008814:	4620      	mov	r0, r4
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	200013e0 	.word	0x200013e0

0800881c <_malloc_r>:
 800881c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008820:	1ccd      	adds	r5, r1, #3
 8008822:	f025 0503 	bic.w	r5, r5, #3
 8008826:	3508      	adds	r5, #8
 8008828:	2d0c      	cmp	r5, #12
 800882a:	bf38      	it	cc
 800882c:	250c      	movcc	r5, #12
 800882e:	2d00      	cmp	r5, #0
 8008830:	4607      	mov	r7, r0
 8008832:	db01      	blt.n	8008838 <_malloc_r+0x1c>
 8008834:	42a9      	cmp	r1, r5
 8008836:	d905      	bls.n	8008844 <_malloc_r+0x28>
 8008838:	230c      	movs	r3, #12
 800883a:	603b      	str	r3, [r7, #0]
 800883c:	2600      	movs	r6, #0
 800883e:	4630      	mov	r0, r6
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	4e2e      	ldr	r6, [pc, #184]	; (8008900 <_malloc_r+0xe4>)
 8008846:	f000 fdbb 	bl	80093c0 <__malloc_lock>
 800884a:	6833      	ldr	r3, [r6, #0]
 800884c:	461c      	mov	r4, r3
 800884e:	bb34      	cbnz	r4, 800889e <_malloc_r+0x82>
 8008850:	4629      	mov	r1, r5
 8008852:	4638      	mov	r0, r7
 8008854:	f7ff ffc2 	bl	80087dc <sbrk_aligned>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	4604      	mov	r4, r0
 800885c:	d14d      	bne.n	80088fa <_malloc_r+0xde>
 800885e:	6834      	ldr	r4, [r6, #0]
 8008860:	4626      	mov	r6, r4
 8008862:	2e00      	cmp	r6, #0
 8008864:	d140      	bne.n	80088e8 <_malloc_r+0xcc>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	4631      	mov	r1, r6
 800886a:	4638      	mov	r0, r7
 800886c:	eb04 0803 	add.w	r8, r4, r3
 8008870:	f000 fb36 	bl	8008ee0 <_sbrk_r>
 8008874:	4580      	cmp	r8, r0
 8008876:	d13a      	bne.n	80088ee <_malloc_r+0xd2>
 8008878:	6821      	ldr	r1, [r4, #0]
 800887a:	3503      	adds	r5, #3
 800887c:	1a6d      	subs	r5, r5, r1
 800887e:	f025 0503 	bic.w	r5, r5, #3
 8008882:	3508      	adds	r5, #8
 8008884:	2d0c      	cmp	r5, #12
 8008886:	bf38      	it	cc
 8008888:	250c      	movcc	r5, #12
 800888a:	4629      	mov	r1, r5
 800888c:	4638      	mov	r0, r7
 800888e:	f7ff ffa5 	bl	80087dc <sbrk_aligned>
 8008892:	3001      	adds	r0, #1
 8008894:	d02b      	beq.n	80088ee <_malloc_r+0xd2>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	442b      	add	r3, r5
 800889a:	6023      	str	r3, [r4, #0]
 800889c:	e00e      	b.n	80088bc <_malloc_r+0xa0>
 800889e:	6822      	ldr	r2, [r4, #0]
 80088a0:	1b52      	subs	r2, r2, r5
 80088a2:	d41e      	bmi.n	80088e2 <_malloc_r+0xc6>
 80088a4:	2a0b      	cmp	r2, #11
 80088a6:	d916      	bls.n	80088d6 <_malloc_r+0xba>
 80088a8:	1961      	adds	r1, r4, r5
 80088aa:	42a3      	cmp	r3, r4
 80088ac:	6025      	str	r5, [r4, #0]
 80088ae:	bf18      	it	ne
 80088b0:	6059      	strne	r1, [r3, #4]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	bf08      	it	eq
 80088b6:	6031      	streq	r1, [r6, #0]
 80088b8:	5162      	str	r2, [r4, r5]
 80088ba:	604b      	str	r3, [r1, #4]
 80088bc:	4638      	mov	r0, r7
 80088be:	f104 060b 	add.w	r6, r4, #11
 80088c2:	f000 fd83 	bl	80093cc <__malloc_unlock>
 80088c6:	f026 0607 	bic.w	r6, r6, #7
 80088ca:	1d23      	adds	r3, r4, #4
 80088cc:	1af2      	subs	r2, r6, r3
 80088ce:	d0b6      	beq.n	800883e <_malloc_r+0x22>
 80088d0:	1b9b      	subs	r3, r3, r6
 80088d2:	50a3      	str	r3, [r4, r2]
 80088d4:	e7b3      	b.n	800883e <_malloc_r+0x22>
 80088d6:	6862      	ldr	r2, [r4, #4]
 80088d8:	42a3      	cmp	r3, r4
 80088da:	bf0c      	ite	eq
 80088dc:	6032      	streq	r2, [r6, #0]
 80088de:	605a      	strne	r2, [r3, #4]
 80088e0:	e7ec      	b.n	80088bc <_malloc_r+0xa0>
 80088e2:	4623      	mov	r3, r4
 80088e4:	6864      	ldr	r4, [r4, #4]
 80088e6:	e7b2      	b.n	800884e <_malloc_r+0x32>
 80088e8:	4634      	mov	r4, r6
 80088ea:	6876      	ldr	r6, [r6, #4]
 80088ec:	e7b9      	b.n	8008862 <_malloc_r+0x46>
 80088ee:	230c      	movs	r3, #12
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4638      	mov	r0, r7
 80088f4:	f000 fd6a 	bl	80093cc <__malloc_unlock>
 80088f8:	e7a1      	b.n	800883e <_malloc_r+0x22>
 80088fa:	6025      	str	r5, [r4, #0]
 80088fc:	e7de      	b.n	80088bc <_malloc_r+0xa0>
 80088fe:	bf00      	nop
 8008900:	200013dc 	.word	0x200013dc

08008904 <__sfputc_r>:
 8008904:	6893      	ldr	r3, [r2, #8]
 8008906:	3b01      	subs	r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	b410      	push	{r4}
 800890c:	6093      	str	r3, [r2, #8]
 800890e:	da08      	bge.n	8008922 <__sfputc_r+0x1e>
 8008910:	6994      	ldr	r4, [r2, #24]
 8008912:	42a3      	cmp	r3, r4
 8008914:	db01      	blt.n	800891a <__sfputc_r+0x16>
 8008916:	290a      	cmp	r1, #10
 8008918:	d103      	bne.n	8008922 <__sfputc_r+0x1e>
 800891a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800891e:	f000 bb33 	b.w	8008f88 <__swbuf_r>
 8008922:	6813      	ldr	r3, [r2, #0]
 8008924:	1c58      	adds	r0, r3, #1
 8008926:	6010      	str	r0, [r2, #0]
 8008928:	7019      	strb	r1, [r3, #0]
 800892a:	4608      	mov	r0, r1
 800892c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008930:	4770      	bx	lr

08008932 <__sfputs_r>:
 8008932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008934:	4606      	mov	r6, r0
 8008936:	460f      	mov	r7, r1
 8008938:	4614      	mov	r4, r2
 800893a:	18d5      	adds	r5, r2, r3
 800893c:	42ac      	cmp	r4, r5
 800893e:	d101      	bne.n	8008944 <__sfputs_r+0x12>
 8008940:	2000      	movs	r0, #0
 8008942:	e007      	b.n	8008954 <__sfputs_r+0x22>
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	463a      	mov	r2, r7
 800894a:	4630      	mov	r0, r6
 800894c:	f7ff ffda 	bl	8008904 <__sfputc_r>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d1f3      	bne.n	800893c <__sfputs_r+0xa>
 8008954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008958 <_vfiprintf_r>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	460d      	mov	r5, r1
 800895e:	b09d      	sub	sp, #116	; 0x74
 8008960:	4614      	mov	r4, r2
 8008962:	4698      	mov	r8, r3
 8008964:	4606      	mov	r6, r0
 8008966:	b118      	cbz	r0, 8008970 <_vfiprintf_r+0x18>
 8008968:	6983      	ldr	r3, [r0, #24]
 800896a:	b90b      	cbnz	r3, 8008970 <_vfiprintf_r+0x18>
 800896c:	f7ff fe96 	bl	800869c <__sinit>
 8008970:	4b89      	ldr	r3, [pc, #548]	; (8008b98 <_vfiprintf_r+0x240>)
 8008972:	429d      	cmp	r5, r3
 8008974:	d11b      	bne.n	80089ae <_vfiprintf_r+0x56>
 8008976:	6875      	ldr	r5, [r6, #4]
 8008978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800897a:	07d9      	lsls	r1, r3, #31
 800897c:	d405      	bmi.n	800898a <_vfiprintf_r+0x32>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	059a      	lsls	r2, r3, #22
 8008982:	d402      	bmi.n	800898a <_vfiprintf_r+0x32>
 8008984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008986:	f7ff ff27 	bl	80087d8 <__retarget_lock_acquire_recursive>
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	071b      	lsls	r3, r3, #28
 800898e:	d501      	bpl.n	8008994 <_vfiprintf_r+0x3c>
 8008990:	692b      	ldr	r3, [r5, #16]
 8008992:	b9eb      	cbnz	r3, 80089d0 <_vfiprintf_r+0x78>
 8008994:	4629      	mov	r1, r5
 8008996:	4630      	mov	r0, r6
 8008998:	f000 fb5a 	bl	8009050 <__swsetup_r>
 800899c:	b1c0      	cbz	r0, 80089d0 <_vfiprintf_r+0x78>
 800899e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a0:	07dc      	lsls	r4, r3, #31
 80089a2:	d50e      	bpl.n	80089c2 <_vfiprintf_r+0x6a>
 80089a4:	f04f 30ff 	mov.w	r0, #4294967295
 80089a8:	b01d      	add	sp, #116	; 0x74
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	4b7b      	ldr	r3, [pc, #492]	; (8008b9c <_vfiprintf_r+0x244>)
 80089b0:	429d      	cmp	r5, r3
 80089b2:	d101      	bne.n	80089b8 <_vfiprintf_r+0x60>
 80089b4:	68b5      	ldr	r5, [r6, #8]
 80089b6:	e7df      	b.n	8008978 <_vfiprintf_r+0x20>
 80089b8:	4b79      	ldr	r3, [pc, #484]	; (8008ba0 <_vfiprintf_r+0x248>)
 80089ba:	429d      	cmp	r5, r3
 80089bc:	bf08      	it	eq
 80089be:	68f5      	ldreq	r5, [r6, #12]
 80089c0:	e7da      	b.n	8008978 <_vfiprintf_r+0x20>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	0598      	lsls	r0, r3, #22
 80089c6:	d4ed      	bmi.n	80089a4 <_vfiprintf_r+0x4c>
 80089c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ca:	f7ff ff06 	bl	80087da <__retarget_lock_release_recursive>
 80089ce:	e7e9      	b.n	80089a4 <_vfiprintf_r+0x4c>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9309      	str	r3, [sp, #36]	; 0x24
 80089d4:	2320      	movs	r3, #32
 80089d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089da:	f8cd 800c 	str.w	r8, [sp, #12]
 80089de:	2330      	movs	r3, #48	; 0x30
 80089e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008ba4 <_vfiprintf_r+0x24c>
 80089e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089e8:	f04f 0901 	mov.w	r9, #1
 80089ec:	4623      	mov	r3, r4
 80089ee:	469a      	mov	sl, r3
 80089f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f4:	b10a      	cbz	r2, 80089fa <_vfiprintf_r+0xa2>
 80089f6:	2a25      	cmp	r2, #37	; 0x25
 80089f8:	d1f9      	bne.n	80089ee <_vfiprintf_r+0x96>
 80089fa:	ebba 0b04 	subs.w	fp, sl, r4
 80089fe:	d00b      	beq.n	8008a18 <_vfiprintf_r+0xc0>
 8008a00:	465b      	mov	r3, fp
 8008a02:	4622      	mov	r2, r4
 8008a04:	4629      	mov	r1, r5
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7ff ff93 	bl	8008932 <__sfputs_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	f000 80aa 	beq.w	8008b66 <_vfiprintf_r+0x20e>
 8008a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a14:	445a      	add	r2, fp
 8008a16:	9209      	str	r2, [sp, #36]	; 0x24
 8008a18:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80a2 	beq.w	8008b66 <_vfiprintf_r+0x20e>
 8008a22:	2300      	movs	r3, #0
 8008a24:	f04f 32ff 	mov.w	r2, #4294967295
 8008a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2c:	f10a 0a01 	add.w	sl, sl, #1
 8008a30:	9304      	str	r3, [sp, #16]
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a38:	931a      	str	r3, [sp, #104]	; 0x68
 8008a3a:	4654      	mov	r4, sl
 8008a3c:	2205      	movs	r2, #5
 8008a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a42:	4858      	ldr	r0, [pc, #352]	; (8008ba4 <_vfiprintf_r+0x24c>)
 8008a44:	f7f7 fbc4 	bl	80001d0 <memchr>
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	b9d8      	cbnz	r0, 8008a84 <_vfiprintf_r+0x12c>
 8008a4c:	06d1      	lsls	r1, r2, #27
 8008a4e:	bf44      	itt	mi
 8008a50:	2320      	movmi	r3, #32
 8008a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a56:	0713      	lsls	r3, r2, #28
 8008a58:	bf44      	itt	mi
 8008a5a:	232b      	movmi	r3, #43	; 0x2b
 8008a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a60:	f89a 3000 	ldrb.w	r3, [sl]
 8008a64:	2b2a      	cmp	r3, #42	; 0x2a
 8008a66:	d015      	beq.n	8008a94 <_vfiprintf_r+0x13c>
 8008a68:	9a07      	ldr	r2, [sp, #28]
 8008a6a:	4654      	mov	r4, sl
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	f04f 0c0a 	mov.w	ip, #10
 8008a72:	4621      	mov	r1, r4
 8008a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a78:	3b30      	subs	r3, #48	; 0x30
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d94e      	bls.n	8008b1c <_vfiprintf_r+0x1c4>
 8008a7e:	b1b0      	cbz	r0, 8008aae <_vfiprintf_r+0x156>
 8008a80:	9207      	str	r2, [sp, #28]
 8008a82:	e014      	b.n	8008aae <_vfiprintf_r+0x156>
 8008a84:	eba0 0308 	sub.w	r3, r0, r8
 8008a88:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	9304      	str	r3, [sp, #16]
 8008a90:	46a2      	mov	sl, r4
 8008a92:	e7d2      	b.n	8008a3a <_vfiprintf_r+0xe2>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	1d19      	adds	r1, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	9103      	str	r1, [sp, #12]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	bfbb      	ittet	lt
 8008aa0:	425b      	neglt	r3, r3
 8008aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa6:	9307      	strge	r3, [sp, #28]
 8008aa8:	9307      	strlt	r3, [sp, #28]
 8008aaa:	bfb8      	it	lt
 8008aac:	9204      	strlt	r2, [sp, #16]
 8008aae:	7823      	ldrb	r3, [r4, #0]
 8008ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ab2:	d10c      	bne.n	8008ace <_vfiprintf_r+0x176>
 8008ab4:	7863      	ldrb	r3, [r4, #1]
 8008ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab8:	d135      	bne.n	8008b26 <_vfiprintf_r+0x1ce>
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	1d1a      	adds	r2, r3, #4
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	9203      	str	r2, [sp, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bfb8      	it	lt
 8008ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aca:	3402      	adds	r4, #2
 8008acc:	9305      	str	r3, [sp, #20]
 8008ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bb4 <_vfiprintf_r+0x25c>
 8008ad2:	7821      	ldrb	r1, [r4, #0]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	f7f7 fb7a 	bl	80001d0 <memchr>
 8008adc:	b140      	cbz	r0, 8008af0 <_vfiprintf_r+0x198>
 8008ade:	2340      	movs	r3, #64	; 0x40
 8008ae0:	eba0 000a 	sub.w	r0, r0, sl
 8008ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ae8:	9b04      	ldr	r3, [sp, #16]
 8008aea:	4303      	orrs	r3, r0
 8008aec:	3401      	adds	r4, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af4:	482c      	ldr	r0, [pc, #176]	; (8008ba8 <_vfiprintf_r+0x250>)
 8008af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008afa:	2206      	movs	r2, #6
 8008afc:	f7f7 fb68 	bl	80001d0 <memchr>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d03f      	beq.n	8008b84 <_vfiprintf_r+0x22c>
 8008b04:	4b29      	ldr	r3, [pc, #164]	; (8008bac <_vfiprintf_r+0x254>)
 8008b06:	bb1b      	cbnz	r3, 8008b50 <_vfiprintf_r+0x1f8>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	3307      	adds	r3, #7
 8008b0c:	f023 0307 	bic.w	r3, r3, #7
 8008b10:	3308      	adds	r3, #8
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b16:	443b      	add	r3, r7
 8008b18:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1a:	e767      	b.n	80089ec <_vfiprintf_r+0x94>
 8008b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b20:	460c      	mov	r4, r1
 8008b22:	2001      	movs	r0, #1
 8008b24:	e7a5      	b.n	8008a72 <_vfiprintf_r+0x11a>
 8008b26:	2300      	movs	r3, #0
 8008b28:	3401      	adds	r4, #1
 8008b2a:	9305      	str	r3, [sp, #20]
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f04f 0c0a 	mov.w	ip, #10
 8008b32:	4620      	mov	r0, r4
 8008b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b38:	3a30      	subs	r2, #48	; 0x30
 8008b3a:	2a09      	cmp	r2, #9
 8008b3c:	d903      	bls.n	8008b46 <_vfiprintf_r+0x1ee>
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0c5      	beq.n	8008ace <_vfiprintf_r+0x176>
 8008b42:	9105      	str	r1, [sp, #20]
 8008b44:	e7c3      	b.n	8008ace <_vfiprintf_r+0x176>
 8008b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e7f0      	b.n	8008b32 <_vfiprintf_r+0x1da>
 8008b50:	ab03      	add	r3, sp, #12
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	462a      	mov	r2, r5
 8008b56:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <_vfiprintf_r+0x258>)
 8008b58:	a904      	add	r1, sp, #16
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f3af 8000 	nop.w
 8008b60:	4607      	mov	r7, r0
 8008b62:	1c78      	adds	r0, r7, #1
 8008b64:	d1d6      	bne.n	8008b14 <_vfiprintf_r+0x1bc>
 8008b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b68:	07d9      	lsls	r1, r3, #31
 8008b6a:	d405      	bmi.n	8008b78 <_vfiprintf_r+0x220>
 8008b6c:	89ab      	ldrh	r3, [r5, #12]
 8008b6e:	059a      	lsls	r2, r3, #22
 8008b70:	d402      	bmi.n	8008b78 <_vfiprintf_r+0x220>
 8008b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b74:	f7ff fe31 	bl	80087da <__retarget_lock_release_recursive>
 8008b78:	89ab      	ldrh	r3, [r5, #12]
 8008b7a:	065b      	lsls	r3, r3, #25
 8008b7c:	f53f af12 	bmi.w	80089a4 <_vfiprintf_r+0x4c>
 8008b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b82:	e711      	b.n	80089a8 <_vfiprintf_r+0x50>
 8008b84:	ab03      	add	r3, sp, #12
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <_vfiprintf_r+0x258>)
 8008b8c:	a904      	add	r1, sp, #16
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f000 f880 	bl	8008c94 <_printf_i>
 8008b94:	e7e4      	b.n	8008b60 <_vfiprintf_r+0x208>
 8008b96:	bf00      	nop
 8008b98:	080095ac 	.word	0x080095ac
 8008b9c:	080095cc 	.word	0x080095cc
 8008ba0:	0800958c 	.word	0x0800958c
 8008ba4:	080095ec 	.word	0x080095ec
 8008ba8:	080095f6 	.word	0x080095f6
 8008bac:	00000000 	.word	0x00000000
 8008bb0:	08008933 	.word	0x08008933
 8008bb4:	080095f2 	.word	0x080095f2

08008bb8 <_printf_common>:
 8008bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bbc:	4616      	mov	r6, r2
 8008bbe:	4699      	mov	r9, r3
 8008bc0:	688a      	ldr	r2, [r1, #8]
 8008bc2:	690b      	ldr	r3, [r1, #16]
 8008bc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	bfb8      	it	lt
 8008bcc:	4613      	movlt	r3, r2
 8008bce:	6033      	str	r3, [r6, #0]
 8008bd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bd4:	4607      	mov	r7, r0
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	b10a      	cbz	r2, 8008bde <_printf_common+0x26>
 8008bda:	3301      	adds	r3, #1
 8008bdc:	6033      	str	r3, [r6, #0]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	0699      	lsls	r1, r3, #26
 8008be2:	bf42      	ittt	mi
 8008be4:	6833      	ldrmi	r3, [r6, #0]
 8008be6:	3302      	addmi	r3, #2
 8008be8:	6033      	strmi	r3, [r6, #0]
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	f015 0506 	ands.w	r5, r5, #6
 8008bf0:	d106      	bne.n	8008c00 <_printf_common+0x48>
 8008bf2:	f104 0a19 	add.w	sl, r4, #25
 8008bf6:	68e3      	ldr	r3, [r4, #12]
 8008bf8:	6832      	ldr	r2, [r6, #0]
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	42ab      	cmp	r3, r5
 8008bfe:	dc26      	bgt.n	8008c4e <_printf_common+0x96>
 8008c00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c04:	1e13      	subs	r3, r2, #0
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	bf18      	it	ne
 8008c0a:	2301      	movne	r3, #1
 8008c0c:	0692      	lsls	r2, r2, #26
 8008c0e:	d42b      	bmi.n	8008c68 <_printf_common+0xb0>
 8008c10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c14:	4649      	mov	r1, r9
 8008c16:	4638      	mov	r0, r7
 8008c18:	47c0      	blx	r8
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d01e      	beq.n	8008c5c <_printf_common+0xa4>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	68e5      	ldr	r5, [r4, #12]
 8008c22:	6832      	ldr	r2, [r6, #0]
 8008c24:	f003 0306 	and.w	r3, r3, #6
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	bf08      	it	eq
 8008c2c:	1aad      	subeq	r5, r5, r2
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	bf0c      	ite	eq
 8008c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c38:	2500      	movne	r5, #0
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	bfc4      	itt	gt
 8008c3e:	1a9b      	subgt	r3, r3, r2
 8008c40:	18ed      	addgt	r5, r5, r3
 8008c42:	2600      	movs	r6, #0
 8008c44:	341a      	adds	r4, #26
 8008c46:	42b5      	cmp	r5, r6
 8008c48:	d11a      	bne.n	8008c80 <_printf_common+0xc8>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e008      	b.n	8008c60 <_printf_common+0xa8>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4652      	mov	r2, sl
 8008c52:	4649      	mov	r1, r9
 8008c54:	4638      	mov	r0, r7
 8008c56:	47c0      	blx	r8
 8008c58:	3001      	adds	r0, #1
 8008c5a:	d103      	bne.n	8008c64 <_printf_common+0xac>
 8008c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c64:	3501      	adds	r5, #1
 8008c66:	e7c6      	b.n	8008bf6 <_printf_common+0x3e>
 8008c68:	18e1      	adds	r1, r4, r3
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	2030      	movs	r0, #48	; 0x30
 8008c6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c72:	4422      	add	r2, r4
 8008c74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c7c:	3302      	adds	r3, #2
 8008c7e:	e7c7      	b.n	8008c10 <_printf_common+0x58>
 8008c80:	2301      	movs	r3, #1
 8008c82:	4622      	mov	r2, r4
 8008c84:	4649      	mov	r1, r9
 8008c86:	4638      	mov	r0, r7
 8008c88:	47c0      	blx	r8
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d0e6      	beq.n	8008c5c <_printf_common+0xa4>
 8008c8e:	3601      	adds	r6, #1
 8008c90:	e7d9      	b.n	8008c46 <_printf_common+0x8e>
	...

08008c94 <_printf_i>:
 8008c94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c98:	7e0f      	ldrb	r7, [r1, #24]
 8008c9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c9c:	2f78      	cmp	r7, #120	; 0x78
 8008c9e:	4691      	mov	r9, r2
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	469a      	mov	sl, r3
 8008ca6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008caa:	d807      	bhi.n	8008cbc <_printf_i+0x28>
 8008cac:	2f62      	cmp	r7, #98	; 0x62
 8008cae:	d80a      	bhi.n	8008cc6 <_printf_i+0x32>
 8008cb0:	2f00      	cmp	r7, #0
 8008cb2:	f000 80d8 	beq.w	8008e66 <_printf_i+0x1d2>
 8008cb6:	2f58      	cmp	r7, #88	; 0x58
 8008cb8:	f000 80a3 	beq.w	8008e02 <_printf_i+0x16e>
 8008cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cc4:	e03a      	b.n	8008d3c <_printf_i+0xa8>
 8008cc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cca:	2b15      	cmp	r3, #21
 8008ccc:	d8f6      	bhi.n	8008cbc <_printf_i+0x28>
 8008cce:	a101      	add	r1, pc, #4	; (adr r1, 8008cd4 <_printf_i+0x40>)
 8008cd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cd4:	08008d2d 	.word	0x08008d2d
 8008cd8:	08008d41 	.word	0x08008d41
 8008cdc:	08008cbd 	.word	0x08008cbd
 8008ce0:	08008cbd 	.word	0x08008cbd
 8008ce4:	08008cbd 	.word	0x08008cbd
 8008ce8:	08008cbd 	.word	0x08008cbd
 8008cec:	08008d41 	.word	0x08008d41
 8008cf0:	08008cbd 	.word	0x08008cbd
 8008cf4:	08008cbd 	.word	0x08008cbd
 8008cf8:	08008cbd 	.word	0x08008cbd
 8008cfc:	08008cbd 	.word	0x08008cbd
 8008d00:	08008e4d 	.word	0x08008e4d
 8008d04:	08008d71 	.word	0x08008d71
 8008d08:	08008e2f 	.word	0x08008e2f
 8008d0c:	08008cbd 	.word	0x08008cbd
 8008d10:	08008cbd 	.word	0x08008cbd
 8008d14:	08008e6f 	.word	0x08008e6f
 8008d18:	08008cbd 	.word	0x08008cbd
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008cbd 	.word	0x08008cbd
 8008d24:	08008cbd 	.word	0x08008cbd
 8008d28:	08008e37 	.word	0x08008e37
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	1d1a      	adds	r2, r3, #4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	602a      	str	r2, [r5, #0]
 8008d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0a3      	b.n	8008e88 <_printf_i+0x1f4>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	6829      	ldr	r1, [r5, #0]
 8008d44:	0606      	lsls	r6, r0, #24
 8008d46:	f101 0304 	add.w	r3, r1, #4
 8008d4a:	d50a      	bpl.n	8008d62 <_printf_i+0xce>
 8008d4c:	680e      	ldr	r6, [r1, #0]
 8008d4e:	602b      	str	r3, [r5, #0]
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	da03      	bge.n	8008d5c <_printf_i+0xc8>
 8008d54:	232d      	movs	r3, #45	; 0x2d
 8008d56:	4276      	negs	r6, r6
 8008d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5c:	485e      	ldr	r0, [pc, #376]	; (8008ed8 <_printf_i+0x244>)
 8008d5e:	230a      	movs	r3, #10
 8008d60:	e019      	b.n	8008d96 <_printf_i+0x102>
 8008d62:	680e      	ldr	r6, [r1, #0]
 8008d64:	602b      	str	r3, [r5, #0]
 8008d66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d6a:	bf18      	it	ne
 8008d6c:	b236      	sxthne	r6, r6
 8008d6e:	e7ef      	b.n	8008d50 <_printf_i+0xbc>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	6820      	ldr	r0, [r4, #0]
 8008d74:	1d19      	adds	r1, r3, #4
 8008d76:	6029      	str	r1, [r5, #0]
 8008d78:	0601      	lsls	r1, r0, #24
 8008d7a:	d501      	bpl.n	8008d80 <_printf_i+0xec>
 8008d7c:	681e      	ldr	r6, [r3, #0]
 8008d7e:	e002      	b.n	8008d86 <_printf_i+0xf2>
 8008d80:	0646      	lsls	r6, r0, #25
 8008d82:	d5fb      	bpl.n	8008d7c <_printf_i+0xe8>
 8008d84:	881e      	ldrh	r6, [r3, #0]
 8008d86:	4854      	ldr	r0, [pc, #336]	; (8008ed8 <_printf_i+0x244>)
 8008d88:	2f6f      	cmp	r7, #111	; 0x6f
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2308      	moveq	r3, #8
 8008d8e:	230a      	movne	r3, #10
 8008d90:	2100      	movs	r1, #0
 8008d92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d96:	6865      	ldr	r5, [r4, #4]
 8008d98:	60a5      	str	r5, [r4, #8]
 8008d9a:	2d00      	cmp	r5, #0
 8008d9c:	bfa2      	ittt	ge
 8008d9e:	6821      	ldrge	r1, [r4, #0]
 8008da0:	f021 0104 	bicge.w	r1, r1, #4
 8008da4:	6021      	strge	r1, [r4, #0]
 8008da6:	b90e      	cbnz	r6, 8008dac <_printf_i+0x118>
 8008da8:	2d00      	cmp	r5, #0
 8008daa:	d04d      	beq.n	8008e48 <_printf_i+0x1b4>
 8008dac:	4615      	mov	r5, r2
 8008dae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008db2:	fb03 6711 	mls	r7, r3, r1, r6
 8008db6:	5dc7      	ldrb	r7, [r0, r7]
 8008db8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dbc:	4637      	mov	r7, r6
 8008dbe:	42bb      	cmp	r3, r7
 8008dc0:	460e      	mov	r6, r1
 8008dc2:	d9f4      	bls.n	8008dae <_printf_i+0x11a>
 8008dc4:	2b08      	cmp	r3, #8
 8008dc6:	d10b      	bne.n	8008de0 <_printf_i+0x14c>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07de      	lsls	r6, r3, #31
 8008dcc:	d508      	bpl.n	8008de0 <_printf_i+0x14c>
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	6861      	ldr	r1, [r4, #4]
 8008dd2:	4299      	cmp	r1, r3
 8008dd4:	bfde      	ittt	le
 8008dd6:	2330      	movle	r3, #48	; 0x30
 8008dd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ddc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008de0:	1b52      	subs	r2, r2, r5
 8008de2:	6122      	str	r2, [r4, #16]
 8008de4:	f8cd a000 	str.w	sl, [sp]
 8008de8:	464b      	mov	r3, r9
 8008dea:	aa03      	add	r2, sp, #12
 8008dec:	4621      	mov	r1, r4
 8008dee:	4640      	mov	r0, r8
 8008df0:	f7ff fee2 	bl	8008bb8 <_printf_common>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d14c      	bne.n	8008e92 <_printf_i+0x1fe>
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	b004      	add	sp, #16
 8008dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e02:	4835      	ldr	r0, [pc, #212]	; (8008ed8 <_printf_i+0x244>)
 8008e04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e08:	6829      	ldr	r1, [r5, #0]
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e10:	6029      	str	r1, [r5, #0]
 8008e12:	061d      	lsls	r5, r3, #24
 8008e14:	d514      	bpl.n	8008e40 <_printf_i+0x1ac>
 8008e16:	07df      	lsls	r7, r3, #31
 8008e18:	bf44      	itt	mi
 8008e1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e1e:	6023      	strmi	r3, [r4, #0]
 8008e20:	b91e      	cbnz	r6, 8008e2a <_printf_i+0x196>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	f023 0320 	bic.w	r3, r3, #32
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	2310      	movs	r3, #16
 8008e2c:	e7b0      	b.n	8008d90 <_printf_i+0xfc>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f043 0320 	orr.w	r3, r3, #32
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	2378      	movs	r3, #120	; 0x78
 8008e38:	4828      	ldr	r0, [pc, #160]	; (8008edc <_printf_i+0x248>)
 8008e3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e3e:	e7e3      	b.n	8008e08 <_printf_i+0x174>
 8008e40:	0659      	lsls	r1, r3, #25
 8008e42:	bf48      	it	mi
 8008e44:	b2b6      	uxthmi	r6, r6
 8008e46:	e7e6      	b.n	8008e16 <_printf_i+0x182>
 8008e48:	4615      	mov	r5, r2
 8008e4a:	e7bb      	b.n	8008dc4 <_printf_i+0x130>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	6826      	ldr	r6, [r4, #0]
 8008e50:	6961      	ldr	r1, [r4, #20]
 8008e52:	1d18      	adds	r0, r3, #4
 8008e54:	6028      	str	r0, [r5, #0]
 8008e56:	0635      	lsls	r5, r6, #24
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	d501      	bpl.n	8008e60 <_printf_i+0x1cc>
 8008e5c:	6019      	str	r1, [r3, #0]
 8008e5e:	e002      	b.n	8008e66 <_printf_i+0x1d2>
 8008e60:	0670      	lsls	r0, r6, #25
 8008e62:	d5fb      	bpl.n	8008e5c <_printf_i+0x1c8>
 8008e64:	8019      	strh	r1, [r3, #0]
 8008e66:	2300      	movs	r3, #0
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	4615      	mov	r5, r2
 8008e6c:	e7ba      	b.n	8008de4 <_printf_i+0x150>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	1d1a      	adds	r2, r3, #4
 8008e72:	602a      	str	r2, [r5, #0]
 8008e74:	681d      	ldr	r5, [r3, #0]
 8008e76:	6862      	ldr	r2, [r4, #4]
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f7f7 f9a8 	bl	80001d0 <memchr>
 8008e80:	b108      	cbz	r0, 8008e86 <_printf_i+0x1f2>
 8008e82:	1b40      	subs	r0, r0, r5
 8008e84:	6060      	str	r0, [r4, #4]
 8008e86:	6863      	ldr	r3, [r4, #4]
 8008e88:	6123      	str	r3, [r4, #16]
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e90:	e7a8      	b.n	8008de4 <_printf_i+0x150>
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	462a      	mov	r2, r5
 8008e96:	4649      	mov	r1, r9
 8008e98:	4640      	mov	r0, r8
 8008e9a:	47d0      	blx	sl
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d0ab      	beq.n	8008df8 <_printf_i+0x164>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	079b      	lsls	r3, r3, #30
 8008ea4:	d413      	bmi.n	8008ece <_printf_i+0x23a>
 8008ea6:	68e0      	ldr	r0, [r4, #12]
 8008ea8:	9b03      	ldr	r3, [sp, #12]
 8008eaa:	4298      	cmp	r0, r3
 8008eac:	bfb8      	it	lt
 8008eae:	4618      	movlt	r0, r3
 8008eb0:	e7a4      	b.n	8008dfc <_printf_i+0x168>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	4632      	mov	r2, r6
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	47d0      	blx	sl
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d09b      	beq.n	8008df8 <_printf_i+0x164>
 8008ec0:	3501      	adds	r5, #1
 8008ec2:	68e3      	ldr	r3, [r4, #12]
 8008ec4:	9903      	ldr	r1, [sp, #12]
 8008ec6:	1a5b      	subs	r3, r3, r1
 8008ec8:	42ab      	cmp	r3, r5
 8008eca:	dcf2      	bgt.n	8008eb2 <_printf_i+0x21e>
 8008ecc:	e7eb      	b.n	8008ea6 <_printf_i+0x212>
 8008ece:	2500      	movs	r5, #0
 8008ed0:	f104 0619 	add.w	r6, r4, #25
 8008ed4:	e7f5      	b.n	8008ec2 <_printf_i+0x22e>
 8008ed6:	bf00      	nop
 8008ed8:	080095fd 	.word	0x080095fd
 8008edc:	0800960e 	.word	0x0800960e

08008ee0 <_sbrk_r>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4d06      	ldr	r5, [pc, #24]	; (8008efc <_sbrk_r+0x1c>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4608      	mov	r0, r1
 8008eea:	602b      	str	r3, [r5, #0]
 8008eec:	f7f7 fb60 	bl	80005b0 <_sbrk>
 8008ef0:	1c43      	adds	r3, r0, #1
 8008ef2:	d102      	bne.n	8008efa <_sbrk_r+0x1a>
 8008ef4:	682b      	ldr	r3, [r5, #0]
 8008ef6:	b103      	cbz	r3, 8008efa <_sbrk_r+0x1a>
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	bd38      	pop	{r3, r4, r5, pc}
 8008efc:	200013e4 	.word	0x200013e4

08008f00 <__sread>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	460c      	mov	r4, r1
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	f000 fab2 	bl	8009470 <_read_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	bfab      	itete	ge
 8008f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f12:	89a3      	ldrhlt	r3, [r4, #12]
 8008f14:	181b      	addge	r3, r3, r0
 8008f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f1a:	bfac      	ite	ge
 8008f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f1e:	81a3      	strhlt	r3, [r4, #12]
 8008f20:	bd10      	pop	{r4, pc}

08008f22 <__swrite>:
 8008f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f26:	461f      	mov	r7, r3
 8008f28:	898b      	ldrh	r3, [r1, #12]
 8008f2a:	05db      	lsls	r3, r3, #23
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4616      	mov	r6, r2
 8008f32:	d505      	bpl.n	8008f40 <__swrite+0x1e>
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	2302      	movs	r3, #2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f000 f9c8 	bl	80092d0 <_lseek_r>
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	4632      	mov	r2, r6
 8008f4e:	463b      	mov	r3, r7
 8008f50:	4628      	mov	r0, r5
 8008f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f56:	f000 b869 	b.w	800902c <_write_r>

08008f5a <__sseek>:
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 f9b5 	bl	80092d0 <_lseek_r>
 8008f66:	1c43      	adds	r3, r0, #1
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	bf15      	itete	ne
 8008f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f76:	81a3      	strheq	r3, [r4, #12]
 8008f78:	bf18      	it	ne
 8008f7a:	81a3      	strhne	r3, [r4, #12]
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <__sclose>:
 8008f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f82:	f000 b8d3 	b.w	800912c <_close_r>
	...

08008f88 <__swbuf_r>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	460e      	mov	r6, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b118      	cbz	r0, 8008f9a <__swbuf_r+0x12>
 8008f92:	6983      	ldr	r3, [r0, #24]
 8008f94:	b90b      	cbnz	r3, 8008f9a <__swbuf_r+0x12>
 8008f96:	f7ff fb81 	bl	800869c <__sinit>
 8008f9a:	4b21      	ldr	r3, [pc, #132]	; (8009020 <__swbuf_r+0x98>)
 8008f9c:	429c      	cmp	r4, r3
 8008f9e:	d12b      	bne.n	8008ff8 <__swbuf_r+0x70>
 8008fa0:	686c      	ldr	r4, [r5, #4]
 8008fa2:	69a3      	ldr	r3, [r4, #24]
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	071a      	lsls	r2, r3, #28
 8008faa:	d52f      	bpl.n	800900c <__swbuf_r+0x84>
 8008fac:	6923      	ldr	r3, [r4, #16]
 8008fae:	b36b      	cbz	r3, 800900c <__swbuf_r+0x84>
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	6820      	ldr	r0, [r4, #0]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	b2f6      	uxtb	r6, r6
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	4637      	mov	r7, r6
 8008fbe:	dc04      	bgt.n	8008fca <__swbuf_r+0x42>
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f948 	bl	8009258 <_fflush_r>
 8008fc8:	bb30      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008fca:	68a3      	ldr	r3, [r4, #8]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	60a3      	str	r3, [r4, #8]
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	701e      	strb	r6, [r3, #0]
 8008fd8:	6963      	ldr	r3, [r4, #20]
 8008fda:	3001      	adds	r0, #1
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	d004      	beq.n	8008fea <__swbuf_r+0x62>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	07db      	lsls	r3, r3, #31
 8008fe4:	d506      	bpl.n	8008ff4 <__swbuf_r+0x6c>
 8008fe6:	2e0a      	cmp	r6, #10
 8008fe8:	d104      	bne.n	8008ff4 <__swbuf_r+0x6c>
 8008fea:	4621      	mov	r1, r4
 8008fec:	4628      	mov	r0, r5
 8008fee:	f000 f933 	bl	8009258 <_fflush_r>
 8008ff2:	b988      	cbnz	r0, 8009018 <__swbuf_r+0x90>
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <__swbuf_r+0x9c>)
 8008ffa:	429c      	cmp	r4, r3
 8008ffc:	d101      	bne.n	8009002 <__swbuf_r+0x7a>
 8008ffe:	68ac      	ldr	r4, [r5, #8]
 8009000:	e7cf      	b.n	8008fa2 <__swbuf_r+0x1a>
 8009002:	4b09      	ldr	r3, [pc, #36]	; (8009028 <__swbuf_r+0xa0>)
 8009004:	429c      	cmp	r4, r3
 8009006:	bf08      	it	eq
 8009008:	68ec      	ldreq	r4, [r5, #12]
 800900a:	e7ca      	b.n	8008fa2 <__swbuf_r+0x1a>
 800900c:	4621      	mov	r1, r4
 800900e:	4628      	mov	r0, r5
 8009010:	f000 f81e 	bl	8009050 <__swsetup_r>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0cb      	beq.n	8008fb0 <__swbuf_r+0x28>
 8009018:	f04f 37ff 	mov.w	r7, #4294967295
 800901c:	e7ea      	b.n	8008ff4 <__swbuf_r+0x6c>
 800901e:	bf00      	nop
 8009020:	080095ac 	.word	0x080095ac
 8009024:	080095cc 	.word	0x080095cc
 8009028:	0800958c 	.word	0x0800958c

0800902c <_write_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d07      	ldr	r5, [pc, #28]	; (800904c <_write_r+0x20>)
 8009030:	4604      	mov	r4, r0
 8009032:	4608      	mov	r0, r1
 8009034:	4611      	mov	r1, r2
 8009036:	2200      	movs	r2, #0
 8009038:	602a      	str	r2, [r5, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	f7f7 fa67 	bl	800050e <_write>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_write_r+0x1e>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_write_r+0x1e>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	200013e4 	.word	0x200013e4

08009050 <__swsetup_r>:
 8009050:	4b32      	ldr	r3, [pc, #200]	; (800911c <__swsetup_r+0xcc>)
 8009052:	b570      	push	{r4, r5, r6, lr}
 8009054:	681d      	ldr	r5, [r3, #0]
 8009056:	4606      	mov	r6, r0
 8009058:	460c      	mov	r4, r1
 800905a:	b125      	cbz	r5, 8009066 <__swsetup_r+0x16>
 800905c:	69ab      	ldr	r3, [r5, #24]
 800905e:	b913      	cbnz	r3, 8009066 <__swsetup_r+0x16>
 8009060:	4628      	mov	r0, r5
 8009062:	f7ff fb1b 	bl	800869c <__sinit>
 8009066:	4b2e      	ldr	r3, [pc, #184]	; (8009120 <__swsetup_r+0xd0>)
 8009068:	429c      	cmp	r4, r3
 800906a:	d10f      	bne.n	800908c <__swsetup_r+0x3c>
 800906c:	686c      	ldr	r4, [r5, #4]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009074:	0719      	lsls	r1, r3, #28
 8009076:	d42c      	bmi.n	80090d2 <__swsetup_r+0x82>
 8009078:	06dd      	lsls	r5, r3, #27
 800907a:	d411      	bmi.n	80090a0 <__swsetup_r+0x50>
 800907c:	2309      	movs	r3, #9
 800907e:	6033      	str	r3, [r6, #0]
 8009080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	f04f 30ff 	mov.w	r0, #4294967295
 800908a:	e03e      	b.n	800910a <__swsetup_r+0xba>
 800908c:	4b25      	ldr	r3, [pc, #148]	; (8009124 <__swsetup_r+0xd4>)
 800908e:	429c      	cmp	r4, r3
 8009090:	d101      	bne.n	8009096 <__swsetup_r+0x46>
 8009092:	68ac      	ldr	r4, [r5, #8]
 8009094:	e7eb      	b.n	800906e <__swsetup_r+0x1e>
 8009096:	4b24      	ldr	r3, [pc, #144]	; (8009128 <__swsetup_r+0xd8>)
 8009098:	429c      	cmp	r4, r3
 800909a:	bf08      	it	eq
 800909c:	68ec      	ldreq	r4, [r5, #12]
 800909e:	e7e6      	b.n	800906e <__swsetup_r+0x1e>
 80090a0:	0758      	lsls	r0, r3, #29
 80090a2:	d512      	bpl.n	80090ca <__swsetup_r+0x7a>
 80090a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090a6:	b141      	cbz	r1, 80090ba <__swsetup_r+0x6a>
 80090a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090ac:	4299      	cmp	r1, r3
 80090ae:	d002      	beq.n	80090b6 <__swsetup_r+0x66>
 80090b0:	4630      	mov	r0, r6
 80090b2:	f000 f991 	bl	80093d8 <_free_r>
 80090b6:	2300      	movs	r3, #0
 80090b8:	6363      	str	r3, [r4, #52]	; 0x34
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090c0:	81a3      	strh	r3, [r4, #12]
 80090c2:	2300      	movs	r3, #0
 80090c4:	6063      	str	r3, [r4, #4]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f043 0308 	orr.w	r3, r3, #8
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	b94b      	cbnz	r3, 80090ea <__swsetup_r+0x9a>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e0:	d003      	beq.n	80090ea <__swsetup_r+0x9a>
 80090e2:	4621      	mov	r1, r4
 80090e4:	4630      	mov	r0, r6
 80090e6:	f000 f92b 	bl	8009340 <__smakebuf_r>
 80090ea:	89a0      	ldrh	r0, [r4, #12]
 80090ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f0:	f010 0301 	ands.w	r3, r0, #1
 80090f4:	d00a      	beq.n	800910c <__swsetup_r+0xbc>
 80090f6:	2300      	movs	r3, #0
 80090f8:	60a3      	str	r3, [r4, #8]
 80090fa:	6963      	ldr	r3, [r4, #20]
 80090fc:	425b      	negs	r3, r3
 80090fe:	61a3      	str	r3, [r4, #24]
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	b943      	cbnz	r3, 8009116 <__swsetup_r+0xc6>
 8009104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009108:	d1ba      	bne.n	8009080 <__swsetup_r+0x30>
 800910a:	bd70      	pop	{r4, r5, r6, pc}
 800910c:	0781      	lsls	r1, r0, #30
 800910e:	bf58      	it	pl
 8009110:	6963      	ldrpl	r3, [r4, #20]
 8009112:	60a3      	str	r3, [r4, #8]
 8009114:	e7f4      	b.n	8009100 <__swsetup_r+0xb0>
 8009116:	2000      	movs	r0, #0
 8009118:	e7f7      	b.n	800910a <__swsetup_r+0xba>
 800911a:	bf00      	nop
 800911c:	20000190 	.word	0x20000190
 8009120:	080095ac 	.word	0x080095ac
 8009124:	080095cc 	.word	0x080095cc
 8009128:	0800958c 	.word	0x0800958c

0800912c <_close_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_close_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f7 fa05 	bl	8000546 <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_close_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_close_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	200013e4 	.word	0x200013e4

0800914c <__sflush_r>:
 800914c:	898a      	ldrh	r2, [r1, #12]
 800914e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	4605      	mov	r5, r0
 8009154:	0710      	lsls	r0, r2, #28
 8009156:	460c      	mov	r4, r1
 8009158:	d458      	bmi.n	800920c <__sflush_r+0xc0>
 800915a:	684b      	ldr	r3, [r1, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	dc05      	bgt.n	800916c <__sflush_r+0x20>
 8009160:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	dc02      	bgt.n	800916c <__sflush_r+0x20>
 8009166:	2000      	movs	r0, #0
 8009168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800916c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800916e:	2e00      	cmp	r6, #0
 8009170:	d0f9      	beq.n	8009166 <__sflush_r+0x1a>
 8009172:	2300      	movs	r3, #0
 8009174:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009178:	682f      	ldr	r7, [r5, #0]
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	d032      	beq.n	80091e4 <__sflush_r+0x98>
 800917e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	075a      	lsls	r2, r3, #29
 8009184:	d505      	bpl.n	8009192 <__sflush_r+0x46>
 8009186:	6863      	ldr	r3, [r4, #4]
 8009188:	1ac0      	subs	r0, r0, r3
 800918a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800918c:	b10b      	cbz	r3, 8009192 <__sflush_r+0x46>
 800918e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009190:	1ac0      	subs	r0, r0, r3
 8009192:	2300      	movs	r3, #0
 8009194:	4602      	mov	r2, r0
 8009196:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009198:	6a21      	ldr	r1, [r4, #32]
 800919a:	4628      	mov	r0, r5
 800919c:	47b0      	blx	r6
 800919e:	1c43      	adds	r3, r0, #1
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	d106      	bne.n	80091b2 <__sflush_r+0x66>
 80091a4:	6829      	ldr	r1, [r5, #0]
 80091a6:	291d      	cmp	r1, #29
 80091a8:	d82c      	bhi.n	8009204 <__sflush_r+0xb8>
 80091aa:	4a2a      	ldr	r2, [pc, #168]	; (8009254 <__sflush_r+0x108>)
 80091ac:	40ca      	lsrs	r2, r1
 80091ae:	07d6      	lsls	r6, r2, #31
 80091b0:	d528      	bpl.n	8009204 <__sflush_r+0xb8>
 80091b2:	2200      	movs	r2, #0
 80091b4:	6062      	str	r2, [r4, #4]
 80091b6:	04d9      	lsls	r1, r3, #19
 80091b8:	6922      	ldr	r2, [r4, #16]
 80091ba:	6022      	str	r2, [r4, #0]
 80091bc:	d504      	bpl.n	80091c8 <__sflush_r+0x7c>
 80091be:	1c42      	adds	r2, r0, #1
 80091c0:	d101      	bne.n	80091c6 <__sflush_r+0x7a>
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	b903      	cbnz	r3, 80091c8 <__sflush_r+0x7c>
 80091c6:	6560      	str	r0, [r4, #84]	; 0x54
 80091c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ca:	602f      	str	r7, [r5, #0]
 80091cc:	2900      	cmp	r1, #0
 80091ce:	d0ca      	beq.n	8009166 <__sflush_r+0x1a>
 80091d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091d4:	4299      	cmp	r1, r3
 80091d6:	d002      	beq.n	80091de <__sflush_r+0x92>
 80091d8:	4628      	mov	r0, r5
 80091da:	f000 f8fd 	bl	80093d8 <_free_r>
 80091de:	2000      	movs	r0, #0
 80091e0:	6360      	str	r0, [r4, #52]	; 0x34
 80091e2:	e7c1      	b.n	8009168 <__sflush_r+0x1c>
 80091e4:	6a21      	ldr	r1, [r4, #32]
 80091e6:	2301      	movs	r3, #1
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b0      	blx	r6
 80091ec:	1c41      	adds	r1, r0, #1
 80091ee:	d1c7      	bne.n	8009180 <__sflush_r+0x34>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d0c4      	beq.n	8009180 <__sflush_r+0x34>
 80091f6:	2b1d      	cmp	r3, #29
 80091f8:	d001      	beq.n	80091fe <__sflush_r+0xb2>
 80091fa:	2b16      	cmp	r3, #22
 80091fc:	d101      	bne.n	8009202 <__sflush_r+0xb6>
 80091fe:	602f      	str	r7, [r5, #0]
 8009200:	e7b1      	b.n	8009166 <__sflush_r+0x1a>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009208:	81a3      	strh	r3, [r4, #12]
 800920a:	e7ad      	b.n	8009168 <__sflush_r+0x1c>
 800920c:	690f      	ldr	r7, [r1, #16]
 800920e:	2f00      	cmp	r7, #0
 8009210:	d0a9      	beq.n	8009166 <__sflush_r+0x1a>
 8009212:	0793      	lsls	r3, r2, #30
 8009214:	680e      	ldr	r6, [r1, #0]
 8009216:	bf08      	it	eq
 8009218:	694b      	ldreq	r3, [r1, #20]
 800921a:	600f      	str	r7, [r1, #0]
 800921c:	bf18      	it	ne
 800921e:	2300      	movne	r3, #0
 8009220:	eba6 0807 	sub.w	r8, r6, r7
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	f1b8 0f00 	cmp.w	r8, #0
 800922a:	dd9c      	ble.n	8009166 <__sflush_r+0x1a>
 800922c:	6a21      	ldr	r1, [r4, #32]
 800922e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009230:	4643      	mov	r3, r8
 8009232:	463a      	mov	r2, r7
 8009234:	4628      	mov	r0, r5
 8009236:	47b0      	blx	r6
 8009238:	2800      	cmp	r0, #0
 800923a:	dc06      	bgt.n	800924a <__sflush_r+0xfe>
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	f04f 30ff 	mov.w	r0, #4294967295
 8009248:	e78e      	b.n	8009168 <__sflush_r+0x1c>
 800924a:	4407      	add	r7, r0
 800924c:	eba8 0800 	sub.w	r8, r8, r0
 8009250:	e7e9      	b.n	8009226 <__sflush_r+0xda>
 8009252:	bf00      	nop
 8009254:	20400001 	.word	0x20400001

08009258 <_fflush_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	690b      	ldr	r3, [r1, #16]
 800925c:	4605      	mov	r5, r0
 800925e:	460c      	mov	r4, r1
 8009260:	b913      	cbnz	r3, 8009268 <_fflush_r+0x10>
 8009262:	2500      	movs	r5, #0
 8009264:	4628      	mov	r0, r5
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	b118      	cbz	r0, 8009272 <_fflush_r+0x1a>
 800926a:	6983      	ldr	r3, [r0, #24]
 800926c:	b90b      	cbnz	r3, 8009272 <_fflush_r+0x1a>
 800926e:	f7ff fa15 	bl	800869c <__sinit>
 8009272:	4b14      	ldr	r3, [pc, #80]	; (80092c4 <_fflush_r+0x6c>)
 8009274:	429c      	cmp	r4, r3
 8009276:	d11b      	bne.n	80092b0 <_fflush_r+0x58>
 8009278:	686c      	ldr	r4, [r5, #4]
 800927a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0ef      	beq.n	8009262 <_fflush_r+0xa>
 8009282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009284:	07d0      	lsls	r0, r2, #31
 8009286:	d404      	bmi.n	8009292 <_fflush_r+0x3a>
 8009288:	0599      	lsls	r1, r3, #22
 800928a:	d402      	bmi.n	8009292 <_fflush_r+0x3a>
 800928c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800928e:	f7ff faa3 	bl	80087d8 <__retarget_lock_acquire_recursive>
 8009292:	4628      	mov	r0, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7ff ff59 	bl	800914c <__sflush_r>
 800929a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800929c:	07da      	lsls	r2, r3, #31
 800929e:	4605      	mov	r5, r0
 80092a0:	d4e0      	bmi.n	8009264 <_fflush_r+0xc>
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	059b      	lsls	r3, r3, #22
 80092a6:	d4dd      	bmi.n	8009264 <_fflush_r+0xc>
 80092a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092aa:	f7ff fa96 	bl	80087da <__retarget_lock_release_recursive>
 80092ae:	e7d9      	b.n	8009264 <_fflush_r+0xc>
 80092b0:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <_fflush_r+0x70>)
 80092b2:	429c      	cmp	r4, r3
 80092b4:	d101      	bne.n	80092ba <_fflush_r+0x62>
 80092b6:	68ac      	ldr	r4, [r5, #8]
 80092b8:	e7df      	b.n	800927a <_fflush_r+0x22>
 80092ba:	4b04      	ldr	r3, [pc, #16]	; (80092cc <_fflush_r+0x74>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	bf08      	it	eq
 80092c0:	68ec      	ldreq	r4, [r5, #12]
 80092c2:	e7da      	b.n	800927a <_fflush_r+0x22>
 80092c4:	080095ac 	.word	0x080095ac
 80092c8:	080095cc 	.word	0x080095cc
 80092cc:	0800958c 	.word	0x0800958c

080092d0 <_lseek_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d07      	ldr	r5, [pc, #28]	; (80092f0 <_lseek_r+0x20>)
 80092d4:	4604      	mov	r4, r0
 80092d6:	4608      	mov	r0, r1
 80092d8:	4611      	mov	r1, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	602a      	str	r2, [r5, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	f7f7 f958 	bl	8000594 <_lseek>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d102      	bne.n	80092ee <_lseek_r+0x1e>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	b103      	cbz	r3, 80092ee <_lseek_r+0x1e>
 80092ec:	6023      	str	r3, [r4, #0]
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
 80092f0:	200013e4 	.word	0x200013e4

080092f4 <__swhatbuf_r>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	460e      	mov	r6, r1
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	b096      	sub	sp, #88	; 0x58
 8009300:	4614      	mov	r4, r2
 8009302:	461d      	mov	r5, r3
 8009304:	da08      	bge.n	8009318 <__swhatbuf_r+0x24>
 8009306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	602a      	str	r2, [r5, #0]
 800930e:	061a      	lsls	r2, r3, #24
 8009310:	d410      	bmi.n	8009334 <__swhatbuf_r+0x40>
 8009312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009316:	e00e      	b.n	8009336 <__swhatbuf_r+0x42>
 8009318:	466a      	mov	r2, sp
 800931a:	f000 f8bb 	bl	8009494 <_fstat_r>
 800931e:	2800      	cmp	r0, #0
 8009320:	dbf1      	blt.n	8009306 <__swhatbuf_r+0x12>
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800932c:	425a      	negs	r2, r3
 800932e:	415a      	adcs	r2, r3
 8009330:	602a      	str	r2, [r5, #0]
 8009332:	e7ee      	b.n	8009312 <__swhatbuf_r+0x1e>
 8009334:	2340      	movs	r3, #64	; 0x40
 8009336:	2000      	movs	r0, #0
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	b016      	add	sp, #88	; 0x58
 800933c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009340 <__smakebuf_r>:
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009344:	079d      	lsls	r5, r3, #30
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	d507      	bpl.n	800935c <__smakebuf_r+0x1c>
 800934c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	2301      	movs	r3, #1
 8009356:	6163      	str	r3, [r4, #20]
 8009358:	b002      	add	sp, #8
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	ab01      	add	r3, sp, #4
 800935e:	466a      	mov	r2, sp
 8009360:	f7ff ffc8 	bl	80092f4 <__swhatbuf_r>
 8009364:	9900      	ldr	r1, [sp, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff fa57 	bl	800881c <_malloc_r>
 800936e:	b948      	cbnz	r0, 8009384 <__smakebuf_r+0x44>
 8009370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009374:	059a      	lsls	r2, r3, #22
 8009376:	d4ef      	bmi.n	8009358 <__smakebuf_r+0x18>
 8009378:	f023 0303 	bic.w	r3, r3, #3
 800937c:	f043 0302 	orr.w	r3, r3, #2
 8009380:	81a3      	strh	r3, [r4, #12]
 8009382:	e7e3      	b.n	800934c <__smakebuf_r+0xc>
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <__smakebuf_r+0x7c>)
 8009386:	62b3      	str	r3, [r6, #40]	; 0x28
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009390:	81a3      	strh	r3, [r4, #12]
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	b15b      	cbz	r3, 80093b4 <__smakebuf_r+0x74>
 800939c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f889 	bl	80094b8 <_isatty_r>
 80093a6:	b128      	cbz	r0, 80093b4 <__smakebuf_r+0x74>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	f043 0301 	orr.w	r3, r3, #1
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	89a0      	ldrh	r0, [r4, #12]
 80093b6:	4305      	orrs	r5, r0
 80093b8:	81a5      	strh	r5, [r4, #12]
 80093ba:	e7cd      	b.n	8009358 <__smakebuf_r+0x18>
 80093bc:	08008635 	.word	0x08008635

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_lock+0x8>)
 80093c2:	f7ff ba09 	b.w	80087d8 <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	200013d8 	.word	0x200013d8

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	; (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f7ff ba04 	b.w	80087da <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	200013d8 	.word	0x200013d8

080093d8 <_free_r>:
 80093d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093da:	2900      	cmp	r1, #0
 80093dc:	d044      	beq.n	8009468 <_free_r+0x90>
 80093de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e2:	9001      	str	r0, [sp, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f1a1 0404 	sub.w	r4, r1, #4
 80093ea:	bfb8      	it	lt
 80093ec:	18e4      	addlt	r4, r4, r3
 80093ee:	f7ff ffe7 	bl	80093c0 <__malloc_lock>
 80093f2:	4a1e      	ldr	r2, [pc, #120]	; (800946c <_free_r+0x94>)
 80093f4:	9801      	ldr	r0, [sp, #4]
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	b933      	cbnz	r3, 8009408 <_free_r+0x30>
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	6014      	str	r4, [r2, #0]
 80093fe:	b003      	add	sp, #12
 8009400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009404:	f7ff bfe2 	b.w	80093cc <__malloc_unlock>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d908      	bls.n	800941e <_free_r+0x46>
 800940c:	6825      	ldr	r5, [r4, #0]
 800940e:	1961      	adds	r1, r4, r5
 8009410:	428b      	cmp	r3, r1
 8009412:	bf01      	itttt	eq
 8009414:	6819      	ldreq	r1, [r3, #0]
 8009416:	685b      	ldreq	r3, [r3, #4]
 8009418:	1949      	addeq	r1, r1, r5
 800941a:	6021      	streq	r1, [r4, #0]
 800941c:	e7ed      	b.n	80093fa <_free_r+0x22>
 800941e:	461a      	mov	r2, r3
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b10b      	cbz	r3, 8009428 <_free_r+0x50>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d9fa      	bls.n	800941e <_free_r+0x46>
 8009428:	6811      	ldr	r1, [r2, #0]
 800942a:	1855      	adds	r5, r2, r1
 800942c:	42a5      	cmp	r5, r4
 800942e:	d10b      	bne.n	8009448 <_free_r+0x70>
 8009430:	6824      	ldr	r4, [r4, #0]
 8009432:	4421      	add	r1, r4
 8009434:	1854      	adds	r4, r2, r1
 8009436:	42a3      	cmp	r3, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	d1e0      	bne.n	80093fe <_free_r+0x26>
 800943c:	681c      	ldr	r4, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	6053      	str	r3, [r2, #4]
 8009442:	4421      	add	r1, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	e7da      	b.n	80093fe <_free_r+0x26>
 8009448:	d902      	bls.n	8009450 <_free_r+0x78>
 800944a:	230c      	movs	r3, #12
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	e7d6      	b.n	80093fe <_free_r+0x26>
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	1961      	adds	r1, r4, r5
 8009454:	428b      	cmp	r3, r1
 8009456:	bf04      	itt	eq
 8009458:	6819      	ldreq	r1, [r3, #0]
 800945a:	685b      	ldreq	r3, [r3, #4]
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	bf04      	itt	eq
 8009460:	1949      	addeq	r1, r1, r5
 8009462:	6021      	streq	r1, [r4, #0]
 8009464:	6054      	str	r4, [r2, #4]
 8009466:	e7ca      	b.n	80093fe <_free_r+0x26>
 8009468:	b003      	add	sp, #12
 800946a:	bd30      	pop	{r4, r5, pc}
 800946c:	200013dc 	.word	0x200013dc

08009470 <_read_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d07      	ldr	r5, [pc, #28]	; (8009490 <_read_r+0x20>)
 8009474:	4604      	mov	r4, r0
 8009476:	4608      	mov	r0, r1
 8009478:	4611      	mov	r1, r2
 800947a:	2200      	movs	r2, #0
 800947c:	602a      	str	r2, [r5, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	f7f7 f828 	bl	80004d4 <_read>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_read_r+0x1e>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_read_r+0x1e>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	200013e4 	.word	0x200013e4

08009494 <_fstat_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d07      	ldr	r5, [pc, #28]	; (80094b4 <_fstat_r+0x20>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	f7f7 f85c 	bl	800055e <_fstat>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	d102      	bne.n	80094b0 <_fstat_r+0x1c>
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	b103      	cbz	r3, 80094b0 <_fstat_r+0x1c>
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	bf00      	nop
 80094b4:	200013e4 	.word	0x200013e4

080094b8 <_isatty_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_isatty_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f7 f85b 	bl	800057e <_isatty>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_isatty_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_isatty_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	200013e4 	.word	0x200013e4

080094d8 <_init>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	bf00      	nop
 80094dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094de:	bc08      	pop	{r3}
 80094e0:	469e      	mov	lr, r3
 80094e2:	4770      	bx	lr

080094e4 <_fini>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr
